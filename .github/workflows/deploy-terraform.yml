name: Deploy Terraform

on:
  push:
    paths:
      - 'infra/**'
    branches:
      - main

  workflow_dispatch:
jobs:
  terraform:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: infra

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Google Cloud auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GOOGLE_CREDENTIALS }}'

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GOOGLE_PROJECT }}
          install_components: gcloud

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Terraform Init
        run: terraform init -reconfigure

      - name: Import resources
        working-directory: infra
        run: |
          set -e

          echo "Running terraform imports for all targets..."

          jq -c '.[]' import_targets.json | while read row; do
            RESOURCE=$(echo "$row" | jq -r .resource)

            if echo "$row" | jq -e 'has("parts")' > /dev/null; then
              echo "\U1F30D Importing $RESOURCE with structured parts:"
              echo "$row" | jq '.parts'

              echo "$row" | jq -r '[.parts.resource, .parts.role, .parts.member] | @tsv' \
                | xargs -I {} terraform import "$RESOURCE" {} \
                || echo "\u26A0\uFE0F Failed to import $RESOURCE"
            else
              ID=$(echo "$row" | jq -r .id)
              echo "\U1F30D Importing $RESOURCE â†’ $ID"
              terraform import "$RESOURCE" "$ID" || echo "\u26A0\uFE0F Failed to import $RESOURCE"
            fi
          done

      - name: Zip Cloud Functions
        run: |
          set -e

          echo "Zipping get-api-key-credit function..."
          cd cloud-functions/get-api-key-credit
          zip -r get-api-key-credit.zip . -x '*.zip'
          cd -

          echo "Zipping submit-new-story function..."
          cd cloud-functions/submit-new-story
          zip -r submit-new-story.zip . -x '*.zip'
          cd -

          echo "Zipping process-new-story function..."
          cd cloud-functions/process-new-story
          zip -r process-new-story.zip . -x '*.zip'
          cd -

      - name: Terraform Plan
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
