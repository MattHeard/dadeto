name: Deploy Terraform

on:
  push:
    paths:
      - 'infra/**'
    branches:
      - main

  workflow_dispatch:
jobs:
  terraform:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: infra
    env:
      REGION: europe-west1
      ENVIRONMENT: prod
      TF_VAR_google_oauth_client_id: ${{ secrets.GOOGLE_OAUTH_CLIENT_ID }}
      TF_VAR_google_oauth_client_secret: ${{ secrets.GOOGLE_OAUTH_CLIENT_SECRET }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Google Cloud auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GOOGLE_CREDENTIALS }}'

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GOOGLE_PROJECT }}
          install_components: gcloud

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Terraform Init
        run: terraform init -migrate-state

      - name: Cleanup firebaserules state
        run: |
          set -euo pipefail
          extra=$(terraform state list | grep firebaserules | grep -v '^google_project_service.firebaserules$' || true)
          if [ -n "$extra" ]; then
            echo "Removing duplicate firebaserules entries:"
            echo "$extra" | xargs -n1 terraform state rm
          fi

      - name: Verify firebaserules state move
        run: |
          count=$(terraform state list | grep -c firebaserules || true)
          if [ "$count" -ne 1 ]; then
            echo "Expected exactly one firebaserules service resource, found $count"
            exit 1
          fi

      - name: Enable core GCP APIs
        run: |
          terraform apply -auto-approve \
            -target=google_project_service.firestore \
            -target=google_project_service.identitytoolkit \
            -target=google_project_service.cloudfunctions \
            -target=google_project_service.compute \
            -target=google_project_service.run \
            -target=google_project_service.artifactregistry \
            -target=google_project_service.cloudscheduler \
            -target=google_project_service.firebaserules

      - name: Terraform Plan
        run: terraform plan -lock-timeout=5m -input=false -out=tfplan

      - name: Ensure firebaserules not destroyed
        run: |
          if terraform show -no-color tfplan | grep -q '# google_project_service.firebaserules will be destroyed'; then
            echo 'firebaserules.googleapis.com service would be destroyed'
            exit 1
          fi

      - name: Terraform Apply
        run: terraform apply -lock-timeout=5m -auto-approve tfplan
