name: Deploy Terraform

on:
  push:
    paths:
      - 'infra/**'
    branches:
      - main

  workflow_dispatch:
jobs:
  terraform:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: infra
    env:
      REGION: europe-west1
      ENVIRONMENT: prod
      TF_VAR_google_oauth_client_id: ${{ secrets.GOOGLE_OAUTH_CLIENT_ID }}
      TF_VAR_google_oauth_client_secret: ${{ secrets.GOOGLE_OAUTH_CLIENT_SECRET }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Google Cloud auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GOOGLE_CREDENTIALS }}'

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GOOGLE_PROJECT }}
          install_components: alpha

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Terraform Init
        run: terraform init -migrate-state

      - name: Import existing Firestore rules release
        run: |
          if ! terraform state list | grep -q google_firebaserules_release.firestore; then
            RELEASE_NAME=$(gcloud alpha firebaserules releases list --project ${{ secrets.GOOGLE_PROJECT }} --format='value(name)' --filter='name:firestore.rules' | head -n 1)
            if [ -n "$RELEASE_NAME" ]; then
              terraform import google_firebaserules_release.firestore "$RELEASE_NAME"
            else
              echo 'No existing Firestore rules release found'
            fi
          else
            echo 'Firestore rules release already imported'
          fi

      - name: Terraform Plan
        run: terraform plan -lock-timeout=5m -input=false -out=tfplan

      - name: Terraform Apply
        run: terraform apply -lock-timeout=5m -auto-approve tfplan
