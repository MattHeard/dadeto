name: gcp-test

on:
  push:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: gcp-test-${{ github.ref }}
  cancel-in-progress: true

jobs:
  terraform:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write
    defaults:
      run:
        working-directory: infra
    env:
      REGION: europe-west1
      GOOGLE_PROJECT: ${{ secrets.GOOGLE_PROJECT }}
      CLOUDSDK_CORE_PROJECT: ${{ secrets.GOOGLE_PROJECT }}
      TF_VAR_google_oauth_client_id: ${{ secrets.GOOGLE_OAUTH_CLIENT_ID }}
      TF_VAR_google_oauth_client_secret: ${{ secrets.GOOGLE_OAUTH_CLIENT_SECRET }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate environment id
        id: environment
        run: |
          UUID="$(uuidgen | tr 'A-Z' 'a-z')"
          SHORT_ID="$(printf '%s' "$UUID" | md5sum | cut -c1-8)"
          ENVIRONMENT="t-${SHORT_ID}"
          echo "ENVIRONMENT=$ENVIRONMENT" >> "$GITHUB_ENV"
          echo "TF_VAR_environment=$ENVIRONMENT" >> "$GITHUB_ENV"
          echo "TF_VAR_database_id=$ENVIRONMENT" >> "$GITHUB_ENV"
          echo "TF_VAR_github_run_id=$GITHUB_RUN_ID" >> "$GITHUB_ENV"
          echo "environment=$ENVIRONMENT" >> "$GITHUB_OUTPUT"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Build cloud function sources
        working-directory: ./
        run: |
          npm ci
          npm run build:cloud

      - name: Set up Google Cloud auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GOOGLE_CREDENTIALS }}'

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.GOOGLE_PROJECT }}
          install_components: alpha

      - name: Log Google Cloud authentication details
        run: |
          gcloud auth list
          gcloud config list account
          gcloud config get-value project

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.3

      - name: Cache Terraform plugin dir
        uses: actions/cache@v4
        with:
          path: ~/.terraform.d/plugin-cache
          key: tf-plugins-${{ runner.os }}-${{ hashFiles('infra/**/.terraform.lock.hcl') }}

      - name: Terraform environment configuration
        run: |
          mkdir -p ~/.terraform.d/plugin-cache
          echo 'plugin_cache_dir = "~/.terraform.d/plugin-cache"' > ~/.terraformrc

      - name: Configure gcloud auth for Docker
        run: gcloud auth configure-docker ${REGION}-docker.pkg.dev --quiet

      - name: Build and push Playwright image
        working-directory: .
        env:
          AR_REPO: playwright
          IMAGE: e2e-runner
        run: |
          set -euo pipefail
          gcloud artifacts repositories create "$AR_REPO" \
            --repository-format=DOCKER --location="${REGION}" || true
          IMAGE_REF="${REGION}-docker.pkg.dev/${GOOGLE_PROJECT}/${AR_REPO}/${IMAGE}:$GITHUB_SHA"
          docker build -f docker/playwright/Dockerfile -t "$IMAGE_REF" .
          docker push "$IMAGE_REF"
          echo "TF_VAR_playwright_image=$IMAGE_REF" >> "$GITHUB_ENV"

      - name: Terraform Init
        id: terraform_init
        run: terraform init -reconfigure -backend-config="prefix=terraform/test/${{ github.run_id }}-${ENVIRONMENT}"

      - name: Terraform Fmt (diff + report)
        id: tffmt
        continue-on-error: true
        run: |
          set -o pipefail
          terraform fmt -check -diff -recursive -no-color | tee /tmp/tf-fmt.diff
          # list only offending files
          terraform fmt -check -recursive -no-color -list=true 2>/dev/null | tee /tmp/tf-fmt.list
          # emit GitHub annotations for each file
          if [ -s /tmp/tf-fmt.list ]; then
            while IFS= read -r f; do
              echo "::error file=${f}::terraform fmt mismatch"
            done < /tmp/tf-fmt.list
          fi

      - name: Terraform Validate (report)
        id: tfvalidate
        continue-on-error: true
        run: terraform validate -no-color | tee /tmp/tf-validate.txt

      - name: Upload Terraform fmt/validate reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: tf-lint-${{ steps.environment.outputs.environment }}
          path: |
            /tmp/tf-fmt.diff
            /tmp/tf-fmt.list
            /tmp/tf-validate.txt

      - name: Enforce fmt/validate
        if: always()
        run: |
          FMT_OK='${{ steps.tffmt.outcome }}'
          VAL_OK='${{ steps.tfvalidate.outcome }}'
          if [ "$FMT_OK" != "success" ] || [ "$VAL_OK" != "success" ]; then
            echo "terraform fmt/validate failed; see artifacts tf-lint-â€¦ for diffs"
            exit 3
          fi

      - name: Terraform Plan
        run: terraform plan -lock-timeout=5m -input=false -var="environment=${ENVIRONMENT}" -out=tfplan

      - name: Terraform Apply
        run: terraform apply -lock-timeout=5m -auto-approve tfplan

      - name: Upload tf artifacts
        if: always() && steps.terraform_init.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: tf-${{ steps.environment.outputs.environment }}
          path: |
            infra/tfplan
            infra/.terraform
          if-no-files-found: warn

      - name: Print Terraform state addresses
        if: always()
        run: terraform state list || true

      - name: Dump gcloud auth and project
        if: always()
        run: |
          gcloud auth list
          gcloud config get-value project

      - name: Run Playwright job
        id: run_playwright_job
        if: success()
        run: |
          set -euo pipefail
          JOB_NAME="$(terraform output -raw playwright_job_name)"
          REGION_OUT="$(terraform output -raw playwright_region)"
          if [ "$JOB_NAME" != "null" ]; then
            gcloud run jobs execute "$JOB_NAME" --region="${REGION_OUT}" --wait
          else
            echo "Playwright disabled for this environment"
          fi

      - name: Verify reports in GCS
        if: always()
        run: |
          set -euo pipefail
          BUCKET="$(terraform output -raw reports_bucket 2>/dev/null || true)"
          if [ -z "$BUCKET" ] || [ "$BUCKET" = "null" ]; then
            echo "No reports bucket configured; skipping verification"
            exit 0
          fi
          gcloud storage ls "gs://${BUCKET}/${TF_VAR_environment}/${GITHUB_RUN_ID}/" || true

      - name: Dump Cloud Run job logs
        if: always()
        run: |
          set -euo pipefail
          JOB_NAME="$(terraform output -raw playwright_job_name 2>/dev/null || true)"
          if [ -z "$JOB_NAME" ] || [ "$JOB_NAME" = "null" ]; then
            echo "Playwright job not provisioned; skipping log export"
            exit 0
          fi
          gcloud logging read \
            "resource.type=\"cloud_run_job\" AND resource.labels.job_name='${JOB_NAME}'" \
            --limit=2000 --format=json > /tmp/run-job-logs.json || true

      - name: Upload Cloud Run job logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-job-logs-${{ steps.environment.outputs.environment }}
          path: /tmp/run-job-logs.json
          if-no-files-found: ignore

      - name: Tag commit on successful apply (PAT, debug)
        id: tag_commit
        if: success() && github.ref == 'refs/heads/main' && steps.run_playwright_job.outcome == 'success'
        env:
          PAT: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          TAG_NAME: gcp-test-${{ steps.environment.outputs.environment }}
        run: |
          set -euo pipefail

          echo "Configuring git user:"
          git config user.name "tag-bot"
          git config user.email "tag-bot@users.noreply.github.com"
          git config user.name && git config user.email

          echo "Current HEAD:"
          git rev-parse HEAD
          echo "Workflows at HEAD:"
          git -C "$GITHUB_WORKSPACE" ls-tree -r HEAD -- .github/workflows || true

          echo "Setting PAT remote:"
          git remote set-url origin "https://x-access-token:${PAT}@github.com/${{ github.repository }}.git"
          echo "Push remote is:"
          git remote get-url --push origin

          echo "Creating annotated tag:"
          COMMIT_SHA="$(git rev-parse HEAD)"
          WF_LIST="$(git -C "$GITHUB_WORKSPACE" ls-tree -r HEAD --name-only .github/workflows || true)"
          {
            echo "env: $TAG_NAME"
            echo "commit: $COMMIT_SHA"
            echo "actor: $GITHUB_ACTOR"
            echo "run_id: $GITHUB_RUN_ID"
            echo "workflows:"
            echo "$WF_LIST"
          } > /tmp/tagmsg.txt

          git tag -fa "$TAG_NAME" -m "$(cat /tmp/tagmsg.txt)"

          echo "Show tag object locally:"
          git for-each-ref "refs/tags/$TAG_NAME" --format="%(objecttype) %(objectname) %(refname)"
          echo "--- tag message ---"
          git tag -n99 -l "$TAG_NAME"

          echo "Pushing tag via PAT:"
          git push -f origin "$TAG_NAME"

          echo "Verify tag on remote:"
          git ls-remote --tags origin | grep -q "refs/tags/$TAG_NAME" || { echo "Tag not found on remote"; exit 1; }

      - name: Terraform Destroy
        if: always() && steps.terraform_init.outcome == 'success'
        run: |
          set -euo pipefail

          terraform refresh -lock-timeout=5m -var="environment=${ENVIRONMENT}"
          terraform destroy -lock-timeout=5m -auto-approve -input=false -var="environment=${ENVIRONMENT}"
