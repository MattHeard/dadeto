name: gcp-test

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  terraform:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    defaults:
      run:
        working-directory: infra
    env:
      REGION: europe-west1
      TF_VAR_google_oauth_client_id: ${{ secrets.GOOGLE_OAUTH_CLIENT_ID }}
      TF_VAR_google_oauth_client_secret: ${{ secrets.GOOGLE_OAUTH_CLIENT_SECRET }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate environment id
        id: environment
        run: |
          UUID="$(uuidgen | tr 'A-Z' 'a-z')"
          SHORT_ID="$(printf '%s' "$UUID" | md5sum | cut -c1-8)"
          ENVIRONMENT="t-${SHORT_ID}"
          echo "ENVIRONMENT=$ENVIRONMENT" >> "$GITHUB_ENV"
          echo "TF_VAR_environment=$ENVIRONMENT" >> "$GITHUB_ENV"
          echo "TF_VAR_database_id=$ENVIRONMENT" >> "$GITHUB_ENV"
          echo "environment=$ENVIRONMENT" >> "$GITHUB_OUTPUT"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Build cloud function sources
        working-directory: ./
        run: npm run build:cloud

      - name: Set up Google Cloud auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GOOGLE_CREDENTIALS }}'

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GOOGLE_PROJECT }}
          install_components: alpha

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.3

      - name: Terraform Init
        id: terraform_init
        run: terraform init -reconfigure -backend-config="prefix=terraform/test/${ENVIRONMENT}"

      - name: Terraform Targeted Apply (Identity Platform Tenant)
        run: >-
          terraform apply -lock-timeout=5m -auto-approve
          -target=google_identity_platform_tenant.environment
          -target=google_identity_platform_tenant_default_supported_idp_config.google
          -var="environment=${ENVIRONMENT}"

      - name: Terraform Plan
        run: terraform plan -lock-timeout=5m -input=false -var="environment=${ENVIRONMENT}" -out=tfplan

      - name: Terraform Apply
        run: terraform apply -lock-timeout=5m -auto-approve tfplan

      - name: Tag commit on successful apply
        if: success()
        env:
          TAG_NAME: gcp-test-${{ steps.environment.outputs.environment }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git tag "$TAG_NAME"
          git push origin "$TAG_NAME"

      - name: Terraform Destroy
        if: always() && steps.terraform_init.outcome == 'success'
        run: |
          set -euo pipefail

          if ! terraform state list > /tmp/state.txt; then
            echo "No state; nothing to destroy"
            exit 0
          fi

          # Build a list of destroy targets without relying on bash arrays.
          set --
          while IFS= read -r address; do
            set -- "$@" "-target=$address"
          done < /tmp/state.txt

          if [ "$#" -eq 0 ]; then
            echo "No resources eligible for destroy"
            exit 0
          fi

          terraform destroy -lock-timeout=5m -auto-approve -var="environment=${ENVIRONMENT}" "$@"
