[{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/eslint.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/generate.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/jest.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/public/2024-10-02/hello.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/public/2024-10-03/script.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/public/2025-03-20/identity.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/public/2025-03-21/booleanCoercer.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/public/2025-03-21/italics.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/public/main.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/src/generator/full-width.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/src/generator/generator.js","messages":[{"ruleId":"complexity","severity":1,"message":"Function 'formatRelatedLink' has a complexity of 11. Maximum allowed is 10.","line":673,"column":1,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":692,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Create paragraphs HTML string.\n * @param {string|string[]} content - A string or an array of strings.\n * @returns {string} - HTML string composed of paragraph elements.\n */\nfunction createParagraphs(content) {\n  if (Array.isArray(content)) {\n    return content.map(para => `<p>${para}</p>`).join('');\n  } else {\n    return `<p>${content}</p>`;\n  }\n}\n\n/**\n * Create a blockquote HTML string.\n * @param {string|string[]} content - A string or an array of strings.\n * @returns {string} - The blockquote HTML.\n */\nfunction createBlockquote(content) {\n  const paragraphs = createParagraphs(content);\n  return `<blockquote class=\"${CLASS.VALUE}\">${BLOCKQUOTE_CORNERS}${paragraphs}</blockquote>`;\n}\nimport { headElement } from './head.js';\nimport { fullWidthElement } from './full-width.js';\nimport scriptTag from './script.js';\nimport { HEADER_BANNER } from './title.js';\nimport {\n  createTag,\n  createAttrPair,\n  escapeHtml,\n  wrapHtml,\n  join,\n  ATTR_NAME,\n} from './html.js';\n\n// CSS class names\nconst CLASS = {\n  KEY: 'key',\n  VALUE: 'value',\n  ENTRY: 'entry',\n  ARTICLE_TITLE: 'article-title',\n  METADATA: 'metadata',\n  FOOTER: 'footer',\n  WARNING: 'warning',\n  MEDIA: 'media',\n  FULL_WIDTH: 'full-width',\n};\n\nconst BLOCKQUOTE_CORNERS = `<div class=\"corner corner-tl\"><div class=\"h-line\"></div><div class=\"v-line\"></div></div><div class=\"corner corner-tr\"><div class=\"h-line\"></div><div class=\"v-line\"></div></div><div class=\"corner corner-bl\"><div class=\"h-line\"></div><div class=\"v-line\"></div></div><div class=\"corner corner-br\"><div class=\"h-line\"></div><div class=\"v-line\"></div></div>`;\n\n// HTML tag names\nconst DIV_TAG_NAME = 'div';\nconst ARTICLE_TAG_NAME = 'article';\n\n// Date formatting constants\nconst DATE_LOCALE = 'en-GB';\nconst DATE_FORMAT_OPTIONS = {\n  day: 'numeric',\n  month: 'short',\n  year: 'numeric',\n};\n\n// Container ID\nconst CONTAINER_ID = 'container';\n\n// HTML generation helpers\n\n/**\n * Create a div element with specified classes and content\n * @param {string} classes - CSS classes to apply to the div\n * @param {string} content - HTML content to place inside the div\n * @returns {string} - HTML div element\n */\nfunction createDiv(classes, content) {\n  const classAttr = createAttrPair(ATTR_NAME.CLASS, classes);\n  return createTag(DIV_TAG_NAME, classAttr, content);\n}\n\n/**\n * Join CSS classes into a space-separated string\n * @param {string[]} classes - Array of CSS class names\n * @returns {string} - Space-separated class string\n */\nfunction joinClasses(classes) {\n  return classes.join(' ');\n}\n\n/**\n * Create a div with the value class and optional additional classes\n * @param {string} content - Content for the value div\n * @param {string[]} additionalClasses - Additional CSS classes to apply\n * @returns {string} - HTML div element with value class and any additional classes\n */\nfunction createValueDiv(content, additionalClasses = []) {\n  const classes = [CLASS.VALUE, ...additionalClasses].filter(Boolean);\n  const joinedClasses = joinClasses(classes);\n  return createDiv(joinedClasses, content);\n}\n\n/**\n * Create an array with two parts for joining\n * @param {string} first - The first part\n * @param {string} second - The second part\n * @returns {Array<string>} - Array containing both parts\n */\nfunction createParts(first, second) {\n  return [first, second];\n}\n\n/**\n * Create a pair with two elements\n * @param {string} first - The first element\n * @param {string} second - The second element\n * @returns {string} - Combined HTML without newlines\n */\nfunction createPair(first, second) {\n  const parts = createParts(first, second);\n  return join(parts);\n}\n\n/**\n * Convert a date string to a Date object\n * @param {string} dateString - The date string to convert\n * @returns {Date} - The Date object\n */\nfunction createDateFromString(dateString) {\n  return new Date(dateString);\n}\n\n/**\n * Format a date using the locale and options\n * @param {Date} date - The date to format\n * @returns {string} - The formatted date string\n */\nfunction formatDateWithOptions(date) {\n  return date.toLocaleDateString(DATE_LOCALE, DATE_FORMAT_OPTIONS);\n}\n\n/**\n * Format date in \"4 May 2022\" format\n * @param {string} dateString - The date string to format\n * @returns {string} - The formatted date string\n */\nfunction formatDate(dateString) {\n  const date = createDateFromString(dateString);\n  return formatDateWithOptions(date);\n}\n\n// Header components\n\n// No longer using newlines and indentation\n\nconst METADATA_TEXT = `Software developer and philosopher in Berlin`;\n\n/**\n * Create an empty div with the key class\n * @returns {string} - HTML div element with key class and no content\n */\nfunction createEmptyKeyDiv() {\n  return createDiv(CLASS.KEY, '');\n}\n\nfunction prefixWithEmptyKey(valueDiv) {\n  const emptyKeyDiv = createEmptyKeyDiv();\n  return createPair(emptyKeyDiv, valueDiv);\n}\n\n/**\n * Create the content for the header section\n */\nfunction createHeaderContent() {\n  const valueDivs = [\n    createValueDiv(HEADER_BANNER),\n    createValueDiv(METADATA_TEXT, [CLASS.METADATA])\n  ];\n\n  const parts = valueDivs.map(prefixWithEmptyKey);\n  \n  return join(parts);\n}\n\n/**\n * Create a section with the given content\n * @param {string} content - The content to wrap in a section\n * @returns {string} - HTML for the section\n */\nfunction createSection(content) {\n  return createDiv(CLASS.ENTRY, content);\n}\n\n/**\n * Create the header section with banner and metadata\n * @returns {string} - HTML for the header section\n */\nfunction createHeaderSection() {\n  const headerContent = createHeaderContent();\n  return createSection(headerContent);\n}\n\n// Footer components\nconst WARNING_MESSAGE =\n  'All content is authored by Matt Heard and is <a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\">CC BY-NC-SA 4.0</a>, unless otherwise noted.';\n\n/**\n * Create the content for the footer section\n * @returns {string} - HTML for the footer content\n */\nfunction createFooterContent() {\n  const classes = joinClasses([CLASS.FOOTER, CLASS.VALUE, CLASS.WARNING]);\n  const footerDiv = createDiv(classes, WARNING_MESSAGE);\n  return prefixWithEmptyKey(footerDiv);\n}\n\n/**\n * Create the footer section with warning message\n * @returns {string} - HTML for the footer section\n */\nfunction createFooterSection() {\n  const footerContent = createFooterContent();\n  return createSection(footerContent);\n}\n\n// Page structure\n/**\n * Create the opening tag for the container div\n * @returns {string} - Opening div tag with container ID\n */\nfunction createContainerDivOpen() {\n  const idAttr = createAttrPair(ATTR_NAME.ID, CONTAINER_ID);\n  return `<${DIV_TAG_NAME} ${idAttr}>`;\n}\n\n/**\n * Create the header content array\n */\nfunction createHeaderContentArray(headerElement) {\n  return [\n    headElement,\n    '<body>',\n    createContainerDivOpen(),\n    '<!-- Header -->',\n    headerElement,\n  ];\n}\n\n/**\n * Create the page header with head element, body opening tag and header section\n */\nfunction createPageHeader() {\n  const headerElement = createHeaderSection();\n  const contentArray = createHeaderContentArray(headerElement);\n\n  return contentArray.join('');\n}\n\n/**\n * Create the closing container div\n */\nfunction createContainerDivClose() {\n  return '</div>';\n}\n\n/**\n * Create the body closing tag\n */\nfunction createBodyClose() {\n  return '</body>';\n}\n\n/**\n * Create the footer content array\n */\nfunction createFooterContentArray(footerElement) {\n  return [\n    '',\n    footerElement,\n    createContainerDivClose(),\n    scriptTag,\n    createBodyClose(),\n  ];\n}\n\n/**\n * Create the page footer with footer section, container div closing, and body closing tag\n */\nfunction createPageFooter() {\n  const footerElement = createFooterSection();\n  const contentArray = createFooterContentArray(footerElement);\n\n  return contentArray.join('');\n}\n\n/**\n * Convert a post to article HTML\n */\nfunction convertPostToArticleHTML(post) {\n  return generateArticle(post);\n}\n\n/**\n * Format article HTML with indentation\n */\nfunction formatArticleHTML(articleHTML) {\n  return articleHTML;\n}\n\n/**\n * Process posts and join article HTML\n */\nfunction processPostsToHTML(posts) {\n  return posts.map(convertPostToArticleHTML)\n              .map(formatArticleHTML)\n              .join('');\n}\n\n/**\n * Generate HTML for all articles in the blog\n */\nfunction generateArticles(posts) {\n  return processPostsToHTML(posts);\n}\n\n/**\n * Create attributes for an article element\n */\nfunction createIdAttributeIfNeeded(post) {\n  if (!post.key) {\n    return '';\n  }\n\n  return ' ' + createAttrPair(ATTR_NAME.ID, post.key);\n}\n\n/**\n * Create attributes for an article element\n */\nfunction createArticleAttributes(post) {\n  const tagClasses = hasTags(post) ? post.tags.map(tag => `tag-${tag}`).join(' ') : '';\n  const classValue = tagClasses ? `${CLASS.ENTRY} ${tagClasses}` : CLASS.ENTRY;\n  const classAttr = createAttrPair(ATTR_NAME.CLASS, classValue);\n  const idAttr = createIdAttributeIfNeeded(post);\n  return `${classAttr}${idAttr}`;\n}\n\n/**\n * Format article content with full width element\n */\nfunction formatArticleContent(content) {\n  return `${fullWidthElement}${content}`;\n}\n\n/**\n * Create an article from a blog post\n */\nfunction generateArticle(post) {\n  const content = generateArticleContent(post);\n  const formattedContent = formatArticleContent(content);\n  const attributes = createArticleAttributes(post);\n\n  return createTag(ARTICLE_TAG_NAME, attributes, formattedContent);\n}\n\n/**\n * Get content array from post, defaulting to empty array if not present\n */\nfunction getContentArray(post) {\n  return post.content || [];\n}\n\n/**\n * Determine if an item is the first in the content array\n */\nfunction isFirstContentItem(index) {\n  return index === 0;\n}\n\n/**\n * Create a content item with index awareness\n */\nfunction createContentItemWithIndex(text, index) {\n  const isFirst = isFirstContentItem(index);\n  return createContentSectionItem(text, isFirst);\n}\n\n/**\n * Normalize a content item.\n * If content is already an object, return it unchanged;\n * otherwise, wrap it in an object with type 'text' and content fields.\n * @param {Object|string} content - The content item to normalize.\n * @returns {Object} - Normalized content object.\n */\nfunction normalizeContentItem(content) {\n  return (typeof content === 'object' && content !== null)\n    ? content\n    : { type: 'text', content: content };\n}\n\n/**\n * Mapping of content types to their renderer functions.\n */\nconst CONTENT_RENDERERS = {\n  quote: createBlockquote,\n};\n\n/**\n * Create a content section item with exact formatting\n * @param {Object|string} content - The content object or text\n * @param {boolean} isFirst - Whether this is the first content item\n * @returns {string} - Formatted content section HTML\n */\nfunction createContentSectionItem(content, isFirst) {\n  const normalizedContent = normalizeContentItem(content);\n  const key = isFirst ? 'text' : '';\n  const keyDiv = createDiv(CLASS.KEY, key);\n  \n  const valueDiv = normalizedContent.type === 'quote'\n    ? CONTENT_RENDERERS.quote(normalizedContent.content)\n    : (normalizedContent.type === 'text' && Array.isArray(normalizedContent.content))\n      ? createBlockquote(normalizedContent.content)\n      : `<p class=\"${CLASS.VALUE}\">${normalizedContent.content}</p>`;\n\n  return formatSection(keyDiv, valueDiv);\n}\n\n/**\n * Generate the text content sections for a blog post\n */\nfunction generateContentSections(post) {\n  const contentArray = getContentArray(post);\n\n  const contentItems = contentArray.map(createContentItemWithIndex);\n\n  return combineHTMLSections(...contentItems);\n}\n\n/**\n * Generate header section for a blog post\n */\nfunction generateHeaderSection(post) {\n  const titleSection = generateTitleSection(post);\n  const dateSection = generateDateSection(post);\n  const tagsSection = generateTagsSection(post);\n\n  return combineHTMLSections(titleSection, dateSection, tagsSection);\n}\n\n/**\n * Create the title value for a blog post\n */\nfunction createTitleValue(post) {\n  const titleLink = `<a href=\"#${post.key}\">${post.title}</a>`;\n  const titleHeader = `<h2>${titleLink}</h2>`;\n  return `<div class=\"${CLASS.VALUE}\">${titleHeader}</div>`;\n}\n\n/**\n * Generate the title section for a blog post\n */\nfunction generateTitleSection(post) {\n  const titleClasses = joinClasses([CLASS.KEY, CLASS.ARTICLE_TITLE]);\n  const titleKey = createDiv(titleClasses, post.key);\n  const titleValue = createTitleValue(post);\n\n  return createPair(titleKey, titleValue);\n}\n\n/**\n * Generate the date section for a blog post\n */\nfunction generateDateSection(post) {\n  if (!post.publicationDate) {\n    return '';\n  }\n\n  const dateKey = createDiv(CLASS.KEY, 'pubAt');\n  const dateValue = `<p class=\"${CLASS.VALUE} ${CLASS.METADATA}\">${formatDate(post.publicationDate)}</p>`;\n\n  return createPair(dateKey, dateValue);\n}\n\n/**\n * Generate the tags section for a blog post\n * @param {Object} post - The blog post\n * @returns {string} - HTML for the tags section\n */\nfunction generateTagsSection(post) {\n  if (!hasTags(post)) {\n    return '';\n  }\n\n  const tagsKey = createDiv(CLASS.KEY, 'tags');\n  const tagsContent = post.tags.map(tag => {\n    const escapedTag = escapeHtml(tag);\n    return `<a class=\"tag-${escapedTag}\">${escapedTag}</a>`;\n  }).join(', ');\n  const tagsValue = `<p class=\"${CLASS.VALUE} ${CLASS.METADATA}\">${tagsContent}</p>`;\n\n  return createPair(tagsKey, tagsValue);\n}\n\n/**\n * Check if post has the specified media type\n */\nfunction hasMediaType(post, mediaType) {\n  return !!post[mediaType];\n}\n\n/**\n * Check if post has related links\n * @param {Object} post - The blog post\n * @returns {boolean} - True if post has related links\n */\nfunction hasRelatedLinks(post) {\n  return post.relatedLinks !== undefined && Array.isArray(post.relatedLinks) && post.relatedLinks.length > 0;\n}\n\n/**\n * Check if post has tags\n * @param {Object} post - The blog post\n * @returns {boolean} - True if post has tags\n */\nfunction hasTags(post) {\n  return post.tags !== undefined && Array.isArray(post.tags) && post.tags.length > 0;\n}\n\n/**\n * Check if post either is YouTube content or has a publication date\n */\nfunction isValidMediaType(post, mediaType) {\n  return mediaType === 'youtube' || post.publicationDate;\n}\n\n/**\n * Check if media should be displayed\n */\nfunction shouldDisplayMedia(post, mediaType) {\n  return hasMediaType(post, mediaType) && isValidMediaType(post, mediaType);\n}\n\n/**\n * Create a key div for media sections\n */\nfunction createMediaKeyDiv(label) {\n  const classes = `${CLASS.KEY} ${CLASS.MEDIA}`;\n  return createDiv(classes, label);\n}\n\n/**\n * Format a section with key and value divs\n * @param {string} keyDiv - The key div HTML\n * @param {string} valueDiv - The value div HTML\n * @returns {string} - Formatted section HTML\n */\nfunction formatSection(keyDiv, valueDiv) {\n  return `${keyDiv}${valueDiv}`;\n}\n\n/**\n * Generate media content based on media type\n */\nfunction generateMediaContent(post, mediaType) {\n  switch (mediaType) {\n    case 'illustration':\n      return createIllustrationContent(post);\n    case 'audio':\n      return createAudioContent(post);\n    case 'youtube':\n      return createYouTubeContent(post);\n    default:\n      return '';\n  }\n}\n\n/**\n * Higher-order function for generating media sections\n */\nfunction createMediaSectionGenerator(mediaType, label) {\n  return function (post) {\n    if (!shouldDisplayMedia(post, mediaType)) {\n      return '';\n    }\n\n    const keyDiv = createMediaKeyDiv(label);\n    const valueDiv = generateMediaContent(post, mediaType);\n\n    return formatSection(keyDiv, valueDiv);\n  };\n}\n\n/**\n * Create illustration image element\n */\nfunction createIllustrationImage(post) {\n  // Use fileName if provided, otherwise fall back to publicationDate\n  const fileName = post.illustration.fileName || post.publicationDate;\n  const src = `${fileName}.${post.illustration.fileType}`;\n  const altText = post.illustration.altText;\n\n  return `<img loading=\"lazy\" src=\"${src}\" alt=\"${altText}\"/>`;\n}\n\n/**\n * Create illustration content\n */\nfunction createIllustrationContent(post) {\n  const image = createIllustrationImage(post);\n\n  return `<div class=\"${CLASS.VALUE}\">${image}</div>`;\n}\n\n/**\n * Create audio source element\n */\nfunction createAudioSource(post) {\n  const audioSrc = `${post.publicationDate}.${post.audio.fileType}`;\n  return `<source src=\"${audioSrc}\">`;\n}\n\n/**\n * Create audio content\n */\nfunction createAudioContent(post) {\n  const source = createAudioSource(post);\n\n  return `<audio class=\"${CLASS.VALUE}\" controls>${source}</audio>`;\n}\n\n/**\n * Create YouTube iframe with proper attributes\n */\nfunction createYouTubeIframe(post) {\n  const youtubeId = post.youtube.id;\n  const timestamp = post.youtube.timestamp;\n  const title = escapeHtml(post.youtube.title);\n\n  return `<iframe height=\"300px\" width=\"100%\" src=\"https://www.youtube.com/embed/${youtubeId}?start=${timestamp}\" title=\"${title}\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" loading=\"lazy\" allowfullscreen></iframe>`;\n}\n\n/**\n * Create YouTube content\n */\nfunction createYouTubeContent(post) {\n  const iframe = createYouTubeIframe(post);\n\n  return `<p class=\"${CLASS.VALUE}\">${iframe}</p>`;\n}\n\n\n/**\n * Mapping for media sections.\n * Each key maps to a function that generates the corresponding media section.\n */\nconst MEDIA_SECTIONS = {\n  illustration: createMediaSectionGenerator('illustration', 'illus'),\n  audio: createMediaSectionGenerator('audio', 'audio'),\n  youtube: createMediaSectionGenerator('youtube', 'video'),\n};\n\n/**\n * Generate all media sections for a blog post by iterating over the MEDIA_SECTIONS mapping.\n */\nfunction generateMediaSections(post) {\n  const sections = Object.values(MEDIA_SECTIONS).map(generator => generator(post));\n  return combineHTMLSections(...sections);\n}\n\n/**\n * Format a related link to display in the list\n * @param {Object} link - The related link object\n * @returns {string} - Formatted HTML for a related link\n */\nconst DEFAULT_RELATED_LINK_ATTRS = 'target=\"_blank\" rel=\"noopener\"';\nfunction formatRelatedLink(link) {\n  const { url, title, author, source, type, quote } = link;\n  const escapedUrl = escapeHtml(url);\n  const escapedTitle = escapeHtml(title);\n  const escapedAuthor = author ? escapeHtml(author) : '';\n  const escapedSource = source ? escapeHtml(source) : '';\n  const escapedQuote = quote ? escapeHtml(quote) : '';\n  const baseLink = (type === 'microblog' || type === 'article' || type === 'report')\n    ? `<a href=\"${escapedUrl}\" ${DEFAULT_RELATED_LINK_ATTRS}>\"${escapedTitle}\"</a>`\n    : (type === 'book')\n    ? `<a href=\"${escapedUrl}\" ${DEFAULT_RELATED_LINK_ATTRS}><em>_${escapedTitle}_</em></a>`\n    : `<a href=\"${escapedUrl}\" ${DEFAULT_RELATED_LINK_ATTRS}>${escapedTitle}</a>`;\n  \n  const authorPart = escapedAuthor ? ` by ${escapedAuthor}` : '';\n  const sourcePart = escapedSource ? `, ${escapedSource}` : '';\n  const quotePart = escapedQuote ? ` (\"${escapedQuote}\")` : '';\n  \n  const finalLink = baseLink + authorPart + sourcePart + quotePart;\n  return `<li>${finalLink}</li>`;\n}\n\n/**\n * Generate the related links section for a blog post\n * @param {Object} post - The blog post\n * @returns {string} - HTML for the related links section\n */\nfunction generateRelatedLinksSection(post) {\n  if (!hasRelatedLinks(post)) {\n    return '';\n  }\n\n  const keyDiv = createDiv(CLASS.KEY, 'links');\n  // Join with an empty string to avoid spacing issues in the HTML output\n  const linksList = post.relatedLinks.map(link => formatRelatedLink(link)).join('');\n  const valueContent = `<ul class=\"related-links\">${linksList}</ul>`;\n  const valueDiv = createDiv(CLASS.VALUE, valueContent);\n\n  return formatSection(keyDiv, valueDiv);\n}\n\n/**\n * Combine multiple HTML sections into a single string\n */\nfunction combineHTMLSections(...sections) {\n  return sections.join('');\n}\n\n/**\n * Check if post has a toy component\n * @param {Object} post - The blog post\n * @returns {boolean} - True if post has a toy component\n */\nfunction hasToy(post) {\n  return post && post.toy && post.toy.modulePath && post.toy.functionName;\n}\n\n/**\n * Generate the input section for a toy component\n * @returns {string} - HTML for the input section\n */\nfunction generateToyInputSection() {\n  const keyDiv = createDiv(CLASS.KEY, 'in');\n  const valueContent = '<form><input type=\"text\" disabled></form>';\n  const valueDiv = createValueDiv(valueContent);\n  \n  return formatSection(keyDiv, valueDiv);\n}\n\n/**\n * Generate the button section for a toy component\n * @returns {string} - HTML for the button section\n */\nfunction generateToyButtonSection() {\n  const keyDiv = createEmptyKeyDiv();\n  const valueContent = '<button type=\"submit\" disabled>Submit</button>';\n  const valueDiv = createValueDiv(valueContent);\n  \n  return formatSection(keyDiv, valueDiv);\n}\n\n/**\n * Generate the output section for a toy component\n * @returns {string} - HTML for the output section\n */\nfunction generateToyOutputSection() {\n  const keyDiv = createDiv(CLASS.KEY, 'out');\n  const valueContent = '<p class=\"output\">This toy requires Javascript to run.</p>';\n  const valueDiv = createValueDiv(valueContent, [CLASS.WARNING]);\n  \n  return formatSection(keyDiv, valueDiv);\n}\n\n/**\n * Generate script tag to add the component\n * @param {Object} post - The blog post\n * @returns {string} - HTML script tag\n */\nfunction generateToyScript(post) {\n  const scriptContent = `window.addComponent('${post.key}', '${post.toy.modulePath}', '${post.toy.functionName}');`;\n  return `<script type=\"module\">${scriptContent}</script>`;\n}\n\n/**\n * Generate the toy UI components for a blog post\n * @param {Object} post - The blog post\n * @returns {string} - HTML for the toy UI components\n */\nfunction generateToyUISection(post) {\n  if (!hasToy(post)) {\n    return '';\n  }\n  \n  return combineHTMLSections(\n    generateToyInputSection(),\n    generateToyButtonSection(),\n    generateToyOutputSection()\n  );\n}\n\n/**\n * Generate the toy script section for a blog post\n * @param {Object} post - The blog post\n * @returns {string} - HTML for the toy script section\n */\nfunction generateToyScriptSection(post) {\n  if (!hasToy(post)) {\n    return '';\n  }\n  \n  return generateToyScript(post);\n}\n\n/**\n * Get all sections for a blog post article.\n * @param {Object} post - The blog post.\n * @returns {string[]} - An array of HTML sections.\n */\nfunction getArticleSections(post) {\n  const headerSection = generateHeaderSection(post);\n  const mediaSection = generateMediaSections(post);\n  const contentSection = generateContentSections(post);\n  const toyUISection = generateToyUISection(post);\n  const relatedLinksSection = generateRelatedLinksSection(post);\n  const toyScriptSection = generateToyScriptSection(post);\n \n  return [\n    headerSection,\n    mediaSection,\n    contentSection,\n    toyUISection,\n    relatedLinksSection,\n    toyScriptSection\n  ];\n}\n\n/**\n * Generate the content of a blog post article\n */\nfunction generateArticleContent(post) {\n  return combineHTMLSections(...getArticleSections(post));\n}\n\n/**\n * Create blog HTML content array\n */\nfunction createBlogContentArray(header, articles, footer) {\n  // Remove the newline character between elements\n  return [header, articles, footer];\n}\n\n/**\n * Build the complete HTML content for the blog from header, articles, and footer.\n * @param {string} header - The header HTML.\n * @param {string} articles - The articles HTML.\n * @param {string} footer - The footer HTML.\n * @returns {string} - Combined HTML content.\n */\nfunction getBlogHtmlContent(header, articles, footer) {\n  const contentArray = createBlogContentArray(header, articles, footer);\n  return contentArray.join('');\n}\n\n/**\n * Retrieve the HTML for all articles from the blog.\n * @param {Object} blog - The blog object.\n * @returns {string} - Combined HTML for all articles.\n */\nfunction getArticles(blog) {\n  return generateArticles(blog.posts);\n}\n\n/**\n * Assemble the blog HTML content by combining header, articles, and footer.\n * @param {string} header - The header HTML.\n * @param {Object} blog - The blog object.\n * @param {string} footer - The footer HTML.\n * @returns {string} - The combined HTML content.\n */\nfunction assembleBlogHTML(header, blog, footer) {\n  const articles = getArticles(blog);\n  return getBlogHtmlContent(header, articles, footer);\n}\n\nexport function generateBlog(blog, header, footer, wrapHtml) {\n  const htmlContents = assembleBlogHTML(header, blog, footer);\n  return wrapHtml(htmlContents);\n}\n\nconst createBlogComponents = () => ({\n  header: createPageHeader(),\n  footer: createPageFooter(),\n  wrapFunc: wrapHtml,\n});\n\n/**\n * Extracts the blog generation arguments from the blog components.\n * @returns {Object} - An object containing header, footer, and wrapFunc.\n */\nfunction getBlogGenerationArgs() {\n  const components = createBlogComponents();\n  const { header, footer, wrapFunc } = components;\n  return { header, footer, wrapFunc };\n}\n\nexport const generateBlogOuter = (blog) => {\n  const { header, footer, wrapFunc } = getBlogGenerationArgs();\n  return generateBlog(blog, header, footer, wrapFunc);\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/src/generator/head.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/src/generator/html.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/src/generator/interactive.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/src/generator/main.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/src/generator/script.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/src/generator/styles.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/src/generator/title.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/src/toys/2024-10-02/hello.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/src/toys/2025-03-19/identity.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/src/toys/2025-03-21/booleanCoercer.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/src/toys/2025-03-21/italics.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/test/generator/generator.test.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'describe' is not defined.","line":7,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":7,"endColumn":9},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":8,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":8,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":100,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":103,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":103,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":126,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":126,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":129,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":129,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":156,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":156,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":159,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":159,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":183,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":183,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":186,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":186,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":221,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":221,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":224,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":224,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":242,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":242,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":245,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":245,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":287,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":287,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":290,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":290,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":312,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":312,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":315,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":315,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":338,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":338,"endColumn":11}],"suppressedMessages":[],"errorCount":19,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { generateBlog } from '../../src/generator/generator.js';\n\nconst header = '<body>';\nconst footer = '</body>';\nconst wrapHtml = c => ['<html>', c, '</html>'].join('');\n\ndescribe('Blog Generator', () => {\n  test('should generate complete HTML page with multiple posts', () => {\n    const blog = {\n      posts: [\n        {\n          key: 'FIRS1',\n          title: 'First Post',\n          publicationDate: '2022-05-04',\n          content: ['First post content'],\n          illustration: {\n            fileType: 'png',\n            altText: 'a messy desk, digital art, black and white',\n          },\n          audio: {\n            fileType: 'mp3'\n          },\n          relatedLinks: [\n            {\n              url: 'https://en.wikipedia.org/wiki/Blog',\n              title: 'Blog',\n              author: 'Wikipedia',\n              source: 'Wikipedia (EN)',\n              type: 'article'\n            },\n            {\n              url: 'https://twitter.com/example/status/123456789',\n              title: 'Thoughts on blogging',\n              author: '@exampleuser',\n              type: 'microblog'\n            },\n            {\n              url: 'https://example.com/books/blogging-101',\n              title: 'Blogging 101',\n              author: 'Jane Doe',\n              source: 'Example Publishing',\n              type: 'book',\n              quote: 'Blogging is an essential skill for the digital age'\n            }\n          ],\n        },\n        {\n          key: 'SECO2',\n          title: 'Second Post',\n          publicationDate: '2022-05-05',\n          content: ['Second post content', 'Another paragraph'],\n          illustration: {\n            fileType: 'png',\n            fileName: 'foo',\n            altText: 'a tangle of yellow and black woollen yarn',\n          },\n          youtube: {\n            id: 'EdlrqPPI_YQ',\n            title: 'Lonely & Horny Episode 2 - Orion',\n            timestamp: 420,\n          },\n          audio: {\n            fileType: 'm4a',\n          },\n          relatedLinks: [\n            {\n              url: 'https://example.com/video-tutorial',\n              title: 'Video Tutorial',\n              author: 'John Smith',\n              source: 'Example Videos',\n              type: 'video'\n            },\n            {\n              url: 'https://example.org/report-2022',\n              title: 'Annual Report 2022',\n              author: 'Research Team',\n              source: 'Example Organization',\n              type: 'report',\n              quote: 'Significant progress was made in all key areas'\n            },\n            {\n              url: 'https://example.net',\n              title: 'Example Website',\n              source: 'Example Net',\n              type: 'website'\n            }\n          ],\n          toy: {\n            modulePath: '/toys/2025-03-19/identity.js',\n            functionName: 'identity',\n          }\n        },\n      ],\n    };\n\n    // The expected HTML is now a single line without indentation or newlines\n    const expectedHtml = `<html><body><article class=\"entry\" id=\"FIRS1\"><div class=\"key full-width\">▄▄▄▄▄▄▄▄▄▄</div><div class=\"value full-width\">▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄</div><div class=\"key article-title\">FIRS1</div><div class=\"value\"><h2><a href=\"#FIRS1\">First Post</a></h2></div><div class=\"key\">pubAt</div><p class=\"value metadata\">4 May 2022</p><div class=\"key media\">illus</div><div class=\"value\"><img loading=\"lazy\" src=\"2022-05-04.png\" alt=\"a messy desk, digital art, black and white\"/></div><div class=\"key media\">audio</div><audio class=\"value\" controls><source src=\"2022-05-04.mp3\"></audio><div class=\"key\">text</div><p class=\"value\">First post content</p><div class=\"key\">links</div><div class=\"value\"><ul class=\"related-links\"><li><a href=\"https://en.wikipedia.org/wiki/Blog\" target=\"_blank\" rel=\"noopener\">\"Blog\"</a> by Wikipedia, Wikipedia (EN)</li><li><a href=\"https://twitter.com/example/status/123456789\" target=\"_blank\" rel=\"noopener\">\"Thoughts on blogging\"</a> by @exampleuser</li><li><a href=\"https://example.com/books/blogging-101\" target=\"_blank\" rel=\"noopener\"><em>_Blogging 101_</em></a> by Jane Doe, Example Publishing (\"Blogging is an essential skill for the digital age\")</li></ul></div></article><article class=\"entry\" id=\"SECO2\"><div class=\"key full-width\">▄▄▄▄▄▄▄▄▄▄</div><div class=\"value full-width\">▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄</div><div class=\"key article-title\">SECO2</div><div class=\"value\"><h2><a href=\"#SECO2\">Second Post</a></h2></div><div class=\"key\">pubAt</div><p class=\"value metadata\">5 May 2022</p><div class=\"key media\">illus</div><div class=\"value\"><img loading=\"lazy\" src=\"foo.png\" alt=\"a tangle of yellow and black woollen yarn\"/></div><div class=\"key media\">audio</div><audio class=\"value\" controls><source src=\"2022-05-05.m4a\"></audio><div class=\"key media\">video</div><p class=\"value\"><iframe height=\"300px\" width=\"100%\" src=\"https://www.youtube.com/embed/EdlrqPPI_YQ?start=420\" title=\"Lonely &amp; Horny Episode 2 - Orion\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" loading=\"lazy\" allowfullscreen></iframe></p><div class=\"key\">text</div><p class=\"value\">Second post content</p><div class=\"key\"></div><p class=\"value\">Another paragraph</p><div class=\"key\">in</div><div class=\"value\"><form><input type=\"text\" disabled></form></div><div class=\"key\"></div><div class=\"value\"><button type=\"submit\" disabled>Submit</button></div><div class=\"key\">out</div><div class=\"value warning\"><p class=\"output\">This toy requires Javascript to run.</p></div><div class=\"key\">links</div><div class=\"value\"><ul class=\"related-links\"><li><a href=\"https://example.com/video-tutorial\" target=\"_blank\" rel=\"noopener\">Video Tutorial</a> by John Smith, Example Videos</li><li><a href=\"https://example.org/report-2022\" target=\"_blank\" rel=\"noopener\">\"Annual Report 2022\"</a> by Research Team, Example Organization (\"Significant progress was made in all key areas\")</li><li><a href=\"https://example.net\" target=\"_blank\" rel=\"noopener\">Example Website</a>, Example Net</li></ul></div><script type=\"module\">window.addComponent('SECO2', '/toys/2025-03-19/identity.js', 'identity');</script></article></body></html>`;\n\n    const html = generateBlog(blog, header, footer, wrapHtml);\n    expect(html).toBe(expectedHtml);\n  });\n\n  test('should contain content for posts', () => {\n    const blog = {\n      posts: [\n        {\n          key: 'FIRS1',\n          title: 'First',\n          publicationDate: '2024-01-01',\n          content: ['This is the content of the first post.'],\n        },\n        {\n          key: 'SECO1',\n          title: 'Second',\n          publicationDate: '2023-12-31',\n          content: [\n            'This post has two paragraphs.',\n            'Here is the second one.'\n          ]\n        }\n      ],\n    };\n\n    const html = generateBlog(blog, header, footer, wrapHtml);\n    const expectedHtml = `<html><body><article class=\"entry\" id=\"FIRS1\"><div class=\"key full-width\">▄▄▄▄▄▄▄▄▄▄</div><div class=\"value full-width\">▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄</div><div class=\"key article-title\">FIRS1</div><div class=\"value\"><h2><a href=\"#FIRS1\">First</a></h2></div><div class=\"key\">pubAt</div><p class=\"value metadata\">1 Jan 2024</p><div class=\"key\">text</div><p class=\"value\">This is the content of the first post.</p></article><article class=\"entry\" id=\"SECO1\"><div class=\"key full-width\">▄▄▄▄▄▄▄▄▄▄</div><div class=\"value full-width\">▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄</div><div class=\"key article-title\">SECO1</div><div class=\"value\"><h2><a href=\"#SECO1\">Second</a></h2></div><div class=\"key\">pubAt</div><p class=\"value metadata\">31 Dec 2023</p><div class=\"key\">text</div><p class=\"value\">This post has two paragraphs.</p><div class=\"key\"></div><p class=\"value\">Here is the second one.</p></article></body></html>`;\n    expect(html).toBe(expectedHtml);\n  });\n\n  test('should contain an illustration for posts', () => {\n    const blog = {\n      posts: [\n        {\n          key: 'FIRS1',\n          title: 'Single Post',\n          publicationDate: '2024-01-01',\n          illustration: {\n            fileType: 'png',\n            altText: 'An illustration'\n          },\n        },\n        {\n          key: 'SECO1',\n          title: 'Second',\n          publicationDate: '2023-12-31',\n          illustration: {\n            fileType: 'svg',\n            fileName: '2023-12-31-0',\n            altText: 'A diagram'\n          },\n        }\n      ],\n    };\n\n    const html = generateBlog(blog, header, footer, wrapHtml);\n    const expectedHtml = `<html><body><article class=\"entry\" id=\"FIRS1\"><div class=\"key full-width\">▄▄▄▄▄▄▄▄▄▄</div><div class=\"value full-width\">▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄</div><div class=\"key article-title\">FIRS1</div><div class=\"value\"><h2><a href=\"#FIRS1\">Single Post</a></h2></div><div class=\"key\">pubAt</div><p class=\"value metadata\">1 Jan 2024</p><div class=\"key media\">illus</div><div class=\"value\"><img loading=\"lazy\" src=\"2024-01-01.png\" alt=\"An illustration\"/></div></article><article class=\"entry\" id=\"SECO1\"><div class=\"key full-width\">▄▄▄▄▄▄▄▄▄▄</div><div class=\"value full-width\">▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄</div><div class=\"key article-title\">SECO1</div><div class=\"value\"><h2><a href=\"#SECO1\">Second</a></h2></div><div class=\"key\">pubAt</div><p class=\"value metadata\">31 Dec 2023</p><div class=\"key media\">illus</div><div class=\"value\"><img loading=\"lazy\" src=\"2023-12-31-0.svg\" alt=\"A diagram\"/></div></article></body></html>`;\n    expect(html).toBe(expectedHtml);\n  });\n\n  test('should contain audio elements', () => {\n    const blog = {\n      posts: [\n        {\n          key: 'FIRS1',\n          title: 'First',\n          publicationDate: '2024-01-01',\n          audio: {\n            fileType: 'mp3'\n          },\n        },\n        {\n          key: 'SECO1',\n          title: 'Second',\n          publicationDate: '2023-12-31',\n          audio: {\n            fileType: 'wav'\n          },\n        },\n      ],\n    };\n\n    const html = generateBlog(blog, header, footer, wrapHtml);\n    const expectedHtml = `<html><body><article class=\"entry\" id=\"FIRS1\"><div class=\"key full-width\">▄▄▄▄▄▄▄▄▄▄</div><div class=\"value full-width\">▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄</div><div class=\"key article-title\">FIRS1</div><div class=\"value\"><h2><a href=\"#FIRS1\">First</a></h2></div><div class=\"key\">pubAt</div><p class=\"value metadata\">1 Jan 2024</p><div class=\"key media\">audio</div><audio class=\"value\" controls><source src=\"2024-01-01.mp3\"></audio></article><article class=\"entry\" id=\"SECO1\"><div class=\"key full-width\">▄▄▄▄▄▄▄▄▄▄</div><div class=\"value full-width\">▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄</div><div class=\"key article-title\">SECO1</div><div class=\"value\"><h2><a href=\"#SECO1\">Second</a></h2></div><div class=\"key\">pubAt</div><p class=\"value metadata\">31 Dec 2023</p><div class=\"key media\">audio</div><audio class=\"value\" controls><source src=\"2023-12-31.wav\"></audio></article></body></html>`;\n    expect(html).toBe(expectedHtml);\n  });\n\n  test('should contain related links for a post', () => {\n    const blog = {\n      posts: [\n        {\n          key: 'LINK1',\n          title: 'Post with Links',\n          publicationDate: '2024-01-15',\n          relatedLinks: [\n            {\n              url: 'https://example.com/article',\n              title: 'Example Article',\n              author: 'John Doe',\n              source: 'Example Blog',\n              type: 'article',\n              quote: 'This is an important quote'\n            },\n            {\n              url: 'https://example.org/book',\n              title: 'Example Book',\n              author: 'Jane Smith',\n              source: 'Example Publishing',\n              type: 'book'\n            },\n            {\n              url: 'https://example.net',\n              title: 'Example Website',\n              source: 'Example Net'\n            }\n          ]\n        }\n      ],\n    };\n\n    const html = generateBlog(blog, header, footer, wrapHtml);\n    const expectedHtml = `<html><body><article class=\"entry\" id=\"LINK1\"><div class=\"key full-width\">▄▄▄▄▄▄▄▄▄▄</div><div class=\"value full-width\">▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄</div><div class=\"key article-title\">LINK1</div><div class=\"value\"><h2><a href=\"#LINK1\">Post with Links</a></h2></div><div class=\"key\">pubAt</div><p class=\"value metadata\">15 Jan 2024</p><div class=\"key\">links</div><div class=\"value\"><ul class=\"related-links\"><li><a href=\"https://example.com/article\" target=\"_blank\" rel=\"noopener\">\"Example Article\"</a> by John Doe, Example Blog (\"This is an important quote\")</li><li><a href=\"https://example.org/book\" target=\"_blank\" rel=\"noopener\"><em>_Example Book_</em></a> by Jane Smith, Example Publishing</li><li><a href=\"https://example.net\" target=\"_blank\" rel=\"noopener\">Example Website</a>, Example Net</li></ul></div></article></body></html>`;\n    expect(html).toBe(expectedHtml);\n  });\n\n  test('should contain a YouTube video for a post', () => {\n    const blog = {\n      posts: [\n        {\n          key: 'VIDE1',\n          title: 'Post with Video',\n          publicationDate: '2024-02-01',\n          youtube: {\n            id: 'dQw4w9WgXcQ',\n            timestamp: 0,\n            title: 'Never Gonna Give You Up'\n          }\n        }\n      ],\n    };\n\n    const html = generateBlog(blog, header, footer, wrapHtml);\n    const expectedHtml = `<html><body><article class=\"entry\" id=\"VIDE1\"><div class=\"key full-width\">▄▄▄▄▄▄▄▄▄▄</div><div class=\"value full-width\">▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄</div><div class=\"key article-title\">VIDE1</div><div class=\"value\"><h2><a href=\"#VIDE1\">Post with Video</a></h2></div><div class=\"key\">pubAt</div><p class=\"value metadata\">1 Feb 2024</p><div class=\"key media\">video</div><p class=\"value\"><iframe height=\"300px\" width=\"100%\" src=\"https://www.youtube.com/embed/dQw4w9WgXcQ?start=0\" title=\"Never Gonna Give You Up\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" loading=\"lazy\" allowfullscreen></iframe></p></article></body></html>`;\n    expect(html).toBe(expectedHtml);\n  });\n\n  test('should contain a toy component for a post', () => {\n    const blog = {\n      posts: [\n        {\n          key: 'TOY01',\n          title: 'Post with Toy',\n          publicationDate: '2024-03-01',\n          toy: {\n            modulePath: './toys/2024-03-01/calculator.js',\n            functionName: 'calculator'\n          }\n        },\n        {\n          key: 'LINK1',\n          title: 'Post with Related Links',\n          publicationDate: '2024-03-02',\n          relatedLinks: [\n            {\n              url: 'https://example.com/article',\n              title: 'Example Article',\n              author: 'John Doe',\n              source: 'Example Blog',\n              type: 'article'\n            },\n            {\n              url: 'https://example.org/book',\n              title: 'Programming Guide',\n              author: 'Jane Smith',\n              source: 'Tech Publishing',\n              type: 'book'\n            }\n          ],\n          toy: {\n            modulePath: './toys/2024-03-02/counter.js',\n            functionName: 'counter'\n          }\n        }\n      ],\n    };\n\n    const html = generateBlog(blog, header, footer, wrapHtml);\n    const expectedHtml = `<html><body><article class=\"entry\" id=\"TOY01\"><div class=\"key full-width\">▄▄▄▄▄▄▄▄▄▄</div><div class=\"value full-width\">▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄</div><div class=\"key article-title\">TOY01</div><div class=\"value\"><h2><a href=\"#TOY01\">Post with Toy</a></h2></div><div class=\"key\">pubAt</div><p class=\"value metadata\">1 Mar 2024</p><div class=\"key\">in</div><div class=\"value\"><form><input type=\"text\" disabled></form></div><div class=\"key\"></div><div class=\"value\"><button type=\"submit\" disabled>Submit</button></div><div class=\"key\">out</div><div class=\"value warning\"><p class=\"output\">This toy requires Javascript to run.</p></div><script type=\"module\">window.addComponent('TOY01', './toys/2024-03-01/calculator.js', 'calculator');</script></article><article class=\"entry\" id=\"LINK1\"><div class=\"key full-width\">▄▄▄▄▄▄▄▄▄▄</div><div class=\"value full-width\">▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄</div><div class=\"key article-title\">LINK1</div><div class=\"value\"><h2><a href=\"#LINK1\">Post with Related Links</a></h2></div><div class=\"key\">pubAt</div><p class=\"value metadata\">2 Mar 2024</p><div class=\"key\">in</div><div class=\"value\"><form><input type=\"text\" disabled></form></div><div class=\"key\"></div><div class=\"value\"><button type=\"submit\" disabled>Submit</button></div><div class=\"key\">out</div><div class=\"value warning\"><p class=\"output\">This toy requires Javascript to run.</p></div><div class=\"key\">links</div><div class=\"value\"><ul class=\"related-links\"><li><a href=\"https://example.com/article\" target=\"_blank\" rel=\"noopener\">\"Example Article\"</a> by John Doe, Example Blog</li><li><a href=\"https://example.org/book\" target=\"_blank\" rel=\"noopener\"><em>_Programming Guide_</em></a> by Jane Smith, Tech Publishing</li></ul></div><script type=\"module\">window.addComponent('LINK1', './toys/2024-03-02/counter.js', 'counter');</script></article></body></html>`;\n    expect(html).toBe(expectedHtml);\n  });\n\n  test('should display tags for posts', () => {\n    const blog = {\n      posts: [\n        {\n          key: 'TAG01',\n          title: 'Post with Single Tag',\n          publicationDate: '2024-04-01',\n          content: ['This is a post with a single tag.'],\n          tags: ['tutorial']\n        },\n        {\n          key: 'TAG02',\n          title: 'Post with Multiple Tags',\n          publicationDate: '2024-04-02',\n          content: ['This is a post with multiple tags.'],\n          tags: ['javascript', 'programming', 'web-development']\n        }\n      ],\n    };\n\n    const html = generateBlog(blog, header, footer, wrapHtml);\n    const expectedHtml = `<html><body><article class=\"entry tag-tutorial\" id=\"TAG01\"><div class=\"key full-width\">▄▄▄▄▄▄▄▄▄▄</div><div class=\"value full-width\">▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄</div><div class=\"key article-title\">TAG01</div><div class=\"value\"><h2><a href=\"#TAG01\">Post with Single Tag</a></h2></div><div class=\"key\">pubAt</div><p class=\"value metadata\">1 Apr 2024</p><div class=\"key\">tags</div><p class=\"value metadata\"><a class=\"tag-tutorial\">tutorial</a></p><div class=\"key\">text</div><p class=\"value\">This is a post with a single tag.</p></article><article class=\"entry tag-javascript tag-programming tag-web-development\" id=\"TAG02\"><div class=\"key full-width\">▄▄▄▄▄▄▄▄▄▄</div><div class=\"value full-width\">▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄</div><div class=\"key article-title\">TAG02</div><div class=\"value\"><h2><a href=\"#TAG02\">Post with Multiple Tags</a></h2></div><div class=\"key\">pubAt</div><p class=\"value metadata\">2 Apr 2024</p><div class=\"key\">tags</div><p class=\"value metadata\"><a class=\"tag-javascript\">javascript</a>, <a class=\"tag-programming\">programming</a>, <a class=\"tag-web-development\">web-development</a></p><div class=\"key\">text</div><p class=\"value\">This is a post with multiple tags.</p></article></body></html>`;\n    expect(html).toBe(expectedHtml);\n  });\n\n  test('should render quotes as blockquotes', () => {\n    const blog = {\n      posts: [\n        {\n          key: 'FIRS1',\n          title: 'First',\n          publicationDate: '2024-01-01',\n          content: [\n            { type: 'quote', content: 'This is the content of the first post.' },\n            {\n              type: 'text',\n              content: [\n                'This is a quote with multiple lines.',\n                'Here is the second one.'\n              ]\n            },\n          ],\n        }\n      ],\n    };\n\n    const html = generateBlog(blog, header, footer, wrapHtml);\n    const expectedHtml = `<html><body><article class=\"entry\" id=\"FIRS1\"><div class=\"key full-width\">▄▄▄▄▄▄▄▄▄▄</div><div class=\"value full-width\">▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄</div><div class=\"key article-title\">FIRS1</div><div class=\"value\"><h2><a href=\"#FIRS1\">First</a></h2></div><div class=\"key\">pubAt</div><p class=\"value metadata\">1 Jan 2024</p><div class=\"key\">text</div><blockquote class=\"value\"><div class=\"corner corner-tl\"><div class=\"h-line\"></div><div class=\"v-line\"></div></div><div class=\"corner corner-tr\"><div class=\"h-line\"></div><div class=\"v-line\"></div></div><div class=\"corner corner-bl\"><div class=\"h-line\"></div><div class=\"v-line\"></div></div><div class=\"corner corner-br\"><div class=\"h-line\"></div><div class=\"v-line\"></div></div><p>This is the content of the first post.</p></blockquote><div class=\"key\"></div><blockquote class=\"value\"><div class=\"corner corner-tl\"><div class=\"h-line\"></div><div class=\"v-line\"></div></div><div class=\"corner corner-tr\"><div class=\"h-line\"></div><div class=\"v-line\"></div></div><div class=\"corner corner-bl\"><div class=\"h-line\"></div><div class=\"v-line\"></div></div><div class=\"corner corner-br\"><div class=\"h-line\"></div><div class=\"v-line\"></div></div><p>This is a quote with multiple lines.</p><p>Here is the second one.</p></blockquote></article></body></html>`;\n    expect(html).toBe(expectedHtml);\n  });\n});","usedDeprecatedRules":[]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/test/toys/2024-10-02/hello.test.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'describe' is not defined.","line":3,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":3,"endColumn":9},{"ruleId":"no-undef","severity":2,"message":"'it' is not defined.","line":4,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":4,"endColumn":5},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":5,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":5,"endColumn":11}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { hello } from '../../../src/toys/2024-10-02/hello.js';\n\ndescribe('hello', () => {\n  it('should return \"Hello world\"', () => {\n    expect(hello()).toBe('Hello world');\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/test/toys/2025-03-19/identity.test.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'describe' is not defined.","line":3,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":3,"endColumn":9},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":4,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":4,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":5,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":5,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":6,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":6,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":7,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":7,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":8,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":8,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":9,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":9,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":10,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":10,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":13,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":13,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":18,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":18,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":19,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":19,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":20,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":20,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":23,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":23,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":32,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":32,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":33,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":33,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":34,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":34,"endColumn":11}],"suppressedMessages":[],"errorCount":16,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { identity } from '../../../src/toys/2025-03-19/identity.js';\n\ndescribe('identity function', () => {\n  test('returns primitive values unchanged', () => {\n    expect(identity(42)).toBe(42);\n    expect(identity('hello')).toBe('hello');\n    expect(identity(true)).toBe(true);\n    expect(identity(false)).toBe(false);\n    expect(identity(null)).toBe(null);\n    expect(identity(undefined)).toBe(undefined);\n  });\n\n  test('returns object references unchanged', () => {\n    const obj = { foo: 'bar' };\n    const arr = [1, 2, 3];\n    const func = () => {};\n    \n    expect(identity(obj)).toBe(obj);\n    expect(identity(arr)).toBe(arr);\n    expect(identity(func)).toBe(func);\n  });\n\n  test('keeps object values unchanged', () => {\n    const complexObj = { \n      name: 'test',\n      nested: { value: 123 },\n      array: [1, 2, { key: 'value' }]\n    };\n    \n    const result = identity(complexObj);\n    \n    expect(result).toEqual(complexObj);\n    expect(result.nested.value).toBe(123);\n    expect(result.array[2].key).toBe('value');\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/test/toys/2025-03-21/booleanCoercer.test.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'describe' is not defined.","line":4,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":4,"endColumn":9},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":5,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":5,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":6,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":6,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":9,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":9,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":10,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":10,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":13,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":13,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":14,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":14,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":17,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":17,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":18,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":18,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":21,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":21,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":22,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":22,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":25,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":25,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":26,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":26,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":29,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":29,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":30,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":30,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":33,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":33,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":34,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":34,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":37,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":37,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":38,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":38,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":41,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":41,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":42,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":42,"endColumn":11}],"suppressedMessages":[],"errorCount":21,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// booleanCoercer.test.js\nimport { coerceToBoolean } from '../../../src/toys/2025-03-21/booleanCoercer.js';\n\ndescribe('coerceToBoolean', () => {\n  test('returns { value: true } for input boolean true', () => {\n    expect(coerceToBoolean(true)).toBe('{ value: true }');\n  });\n\n  test('returns { value: false } for input boolean false', () => {\n    expect(coerceToBoolean(false)).toBe('{ value: false }');\n  });\n\n  test('returns { value: true } for input string \"true\"', () => {\n    expect(coerceToBoolean(\"true\")).toBe('{ value: true }');\n  });\n\n  test('returns { value: false } for input string \"false\"', () => {\n    expect(coerceToBoolean(\"false\")).toBe('{ value: false }');\n  });\n\n  test('handles case insensitivity for \"TrUe\"', () => {\n    expect(coerceToBoolean(\"TrUe\")).toBe('{ value: true }');\n  });\n\n  test('handles case insensitivity for \"FaLsE\"', () => {\n    expect(coerceToBoolean(\"FaLsE\")).toBe('{ value: false }');\n  });\n\n  test('returns {} for non-boolean and non-valid string input (number)', () => {\n    expect(coerceToBoolean(123)).toBe('{}');\n  });\n\n  test('returns {} for non-boolean and non-valid string input (object)', () => {\n    expect(coerceToBoolean({})).toBe('{}');\n  });\n\n  test('returns {} for non-boolean and non-valid string input (null)', () => {\n    expect(coerceToBoolean(null)).toBe('{}');\n  });\n\n  test('returns {} for non-boolean and non-valid string input (undefined)', () => {\n    expect(coerceToBoolean(undefined)).toBe('{}');\n  });\n});","usedDeprecatedRules":[]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/test/toys/2025-03-21/italics.test.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'describe' is not defined.","line":3,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":3,"endColumn":9},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":4,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":4,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":5,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":5,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":6,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":6,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":7,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":7,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":8,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":8,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":9,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":9,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":10,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":10,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":13,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":13,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":14,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":14,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":15,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":15,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":18,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":18,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":19,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":19,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":20,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":20,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":21,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":21,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":22,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":22,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":25,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":25,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":26,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":26,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":27,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":27,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":28,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":28,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":29,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":29,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":32,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":32,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":33,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":33,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":34,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":34,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":39,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":39,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":40,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":40,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":41,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":41,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":42,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":42,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":45,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":45,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":46,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":46,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":47,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":47,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":48,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":48,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":51,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":51,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":52,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":52,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":53,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":53,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":54,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":54,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":55,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":55,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":56,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":56,"endColumn":11}],"suppressedMessages":[],"errorCount":38,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { italics } from '../../../src/toys/2025-03-21/italics.js';\n\ndescribe('italics function', () => {\n  test('returns non-string values unchanged', () => {\n    expect(italics(null)).toBe(null);\n    expect(italics(undefined)).toBe(undefined);\n    expect(italics(42)).toBe(42);\n    expect(italics(true)).toBe(true);\n    expect(italics({})).toEqual({});\n    expect(italics([])).toEqual([]);\n  });\n\n  test('leaves regular text unchanged', () => {\n    expect(italics('Regular text without markdown')).toBe('Regular text without markdown');\n    expect(italics('')).toBe('');\n  });\n\n  test('adds <em> tags around asterisk-style italics while preserving asterisks', () => {\n    expect(italics('This is *italic* text')).toBe('This is <em>*italic*</em> text');\n    expect(italics('*Start* and end')).toBe('<em>*Start*</em> and end');\n    expect(italics('Start and *end*')).toBe('Start and <em>*end*</em>');\n    expect(italics('Multiple *italic* words in *one* string')).toBe('Multiple <em>*italic*</em> words in <em>*one*</em> string');\n  });\n\n  test('adds <em> tags around underscore-style italics while preserving underscores', () => {\n    expect(italics('This is _italic_ text')).toBe('This is <em>_italic_</em> text');\n    expect(italics('_Start_ and end')).toBe('<em>_Start_</em> and end');\n    expect(italics('Start and _end_')).toBe('Start and <em>_end_</em>');\n    expect(italics('Multiple _italic_ words in _one_ string')).toBe('Multiple <em>_italic_</em> words in <em>_one_</em> string');\n  });\n\n  test('handles both asterisk and underscore styles in the same string', () => {\n    expect(italics('*Asterisk* and _underscore_')).toBe('<em>*Asterisk*</em> and <em>_underscore_</em>');\n    expect(italics('Text with _multiple_ *italic* _formats_ mixed *in*')).toBe(\n      'Text with <em>_multiple_</em> <em>*italic*</em> <em>_formats_</em> mixed <em>*in*</em>'\n    );\n  });\n\n  test('does not add <em> tags around bold double-asterisk markdown', () => {\n    expect(italics('This is **bold** text')).toBe('This is **bold** text');\n    expect(italics('**Start** and end')).toBe('**Start** and end');\n    expect(italics('Mixed **bold** and *italic*')).toBe('Mixed **bold** and <em>*italic*</em>');\n  });\n\n  test('does not add <em> tags around bold double-underscore markdown', () => {\n    expect(italics('This is __bold__ text')).toBe('This is __bold__ text');\n    expect(italics('__Start__ and end')).toBe('__Start__ and end');\n    expect(italics('Mixed __bold__ and _italic_')).toBe('Mixed __bold__ and <em>_italic_</em>');\n  });\n\n  test('handles complex mixed formatting correctly', () => {\n    expect(italics('**Bold** and *italic* mixed')).toBe('**Bold** and <em>*italic*</em> mixed');\n    expect(italics('__Bold__ and _italic_ mixed')).toBe('__Bold__ and <em>_italic_</em> mixed');\n    expect(italics('**Bold with *nested italic***')).toBe('**Bold with *nested italic***');\n    expect(italics('__Bold with _nested italic___')).toBe('__Bold with _nested italic___');\n    expect(italics('Text with **bold** and *italic* and __more bold__ and _more italic_'))\n      .toBe('Text with **bold** and <em>*italic*</em> and __more bold__ and <em>_more italic_</em>');\n  });\n});\n","usedDeprecatedRules":[]}]