[{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/babel.config.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/eslint.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/generate.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/jest.config.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/src/browser/main.js","messages":[{"ruleId":"complexity","severity":1,"message":"Function 'handleSubmit' has a complexity of 4. Maximum allowed is 2.","line":108,"column":3,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":180,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 3. Maximum allowed is 2.","line":119,"column":21,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":137,"endColumn":10},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 5. Maximum allowed is 2.","line":138,"column":21,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":163,"endColumn":10},{"ruleId":"no-prototype-builtins","severity":2,"message":"Do not access Object.prototype method 'hasOwnProperty' from target object.","line":140,"column":74,"nodeType":"CallExpression","messageId":"prototypeBuildIn","endLine":140,"endColumn":88,"suggestions":[{"messageId":"callObjectPrototype","data":{"prop":"hasOwnProperty"},"fix":{"range":[4966,4989],"text":"Object.prototype.hasOwnProperty.call(newData, "},"desc":"Call Object.prototype.hasOwnProperty explicitly."}]},{"ruleId":"no-prototype-builtins","severity":2,"message":"Do not access Object.prototype method 'hasOwnProperty' from target object.","line":154,"column":26,"nodeType":"CallExpression","messageId":"prototypeBuildIn","endLine":154,"endColumn":40,"suggestions":[{"messageId":"callObjectPrototype","data":{"prop":"hasOwnProperty"},"fix":{"range":[5754,5777],"text":"Object.prototype.hasOwnProperty.call(newData, "},"desc":"Call Object.prototype.hasOwnProperty explicitly."}]},{"ruleId":"complexity","severity":1,"message":"Function 'hideArticlesByClass' has a complexity of 3. Maximum allowed is 2.","line":245,"column":1,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":252,"endColumn":2},{"ruleId":"complexity","severity":1,"message":"Function 'toggleHideLink' has a complexity of 3. Maximum allowed is 2.","line":254,"column":1,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":281,"endColumn":2},{"ruleId":"complexity","severity":1,"message":"Function 'fetchAndCacheBlogData' has a complexity of 3. Maximum allowed is 2.","line":301,"column":1,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":333,"endColumn":2}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Single global state object\nlet globalState = {\n  blog: null, // Holds the fetched blog data\n  blogStatus: 'idle', // 'idle', 'loading', 'loaded', 'error'\n  blogError: null, // Stores any error during fetch\n  blogFetchPromise: null, // Tracks the ongoing fetch promise\n  temporary: {} // Holds data managed by toys like setTemporary\n};\n\n// Audio controls functionality\n(function() {\n  const audioElements = document.querySelectorAll(\"audio\");\n  \n  audioElements.forEach(function(audio, index) {\n    audio.removeAttribute(\"controls\");\n    \n    if (!audio.id) {\n      audio.id = \"audio-\" + index;\n    }\n    \n    const controlsContainer = document.createElement(\"div\");\n    controlsContainer.className = \"audio-controls\";\n    controlsContainer.id = \"controls-\" + audio.id;\n    \n    const timeDisplay = document.createElement(\"span\");\n    timeDisplay.className = \"audio-time\";\n    timeDisplay.textContent = \"0:00\";\n    \n    const playButton = document.createElement(\"a\");\n    playButton.href = \"#\";\n    playButton.textContent = \"PLAY\";\n    playButton.addEventListener(\"click\", function(e) {\n      e.preventDefault();\n      audio.play();\n    });\n    \n    const pauseButton = document.createElement(\"a\");\n    pauseButton.href = \"#\";\n    pauseButton.textContent = \"PAUSE\";\n    pauseButton.addEventListener(\"click\", function(e) {\n      e.preventDefault();\n      audio.pause();\n    });\n    \n    const stopButton = document.createElement(\"a\");\n    stopButton.href = \"#\";\n    stopButton.textContent = \"STOP\";\n    stopButton.addEventListener(\"click\", function(e) {\n      e.preventDefault();\n      audio.pause();\n      audio.currentTime = 0;\n    });\n    \n    audio.addEventListener(\"timeupdate\", function() {\n      const minutes = Math.floor(audio.currentTime / 60);\n      const seconds = Math.floor(audio.currentTime % 60).toString().padStart(2, \"0\");\n      timeDisplay.textContent = minutes + \":\" + seconds;\n    });\n    \n    controlsContainer.appendChild(playButton);\n    controlsContainer.appendChild(document.createTextNode(\" \"));\n    controlsContainer.appendChild(pauseButton);\n    controlsContainer.appendChild(document.createTextNode(\" \"));\n    controlsContainer.appendChild(stopButton);\n    controlsContainer.appendChild(document.createTextNode(\" \"));\n    controlsContainer.appendChild(timeDisplay);\n    \n    audio.parentNode.insertBefore(controlsContainer, audio.nextSibling);\n  });\n})();\n\n// Interactive components functionality\n/**\n * Initialize an interactive component with a processing function\n * @param {string} id - The ID of the article element\n * @param {Function} processingFunction - The function to process input values\n */\nfunction initializeInteractiveComponent(id, processingFunction) {\n  // Get the article element\n  const article = document.getElementById(id);\n  \n  // Get the elements within the article\n  const inputElement = article.querySelector('input');\n  const submitButton = article.querySelector('button');\n  const outputElement = article.querySelector('p.output');\n  \n  // Disable controls during initialization\n  inputElement.disabled = true;\n  submitButton.disabled = true;\n  \n  // Update message to show JS is running\n  outputElement.textContent = 'Initialising...';\n  \n  /**\n   * Enable controls and update status message\n   */\n  function enableControls() {\n    inputElement.disabled = false;\n    submitButton.disabled = false;\n    outputElement.textContent = 'Ready for input';\n    outputElement.parentElement.classList.remove('warning');\n  }\n  \n  /**\n   * Handle form submission events\n   * @param {Event} event - The submission event\n   */\n  function handleSubmit(event) {\n    if (event) {\n      event.preventDefault();\n    }\n    const inputValue = inputElement.value;\n    \n    try {\n      // Create an env Map with utility functions that might be needed by processing functions\n      const env = new Map([\n        [\"getRandomNumber\", () => Math.random()],\n        [\"getCurrentTime\", () => new Date().toISOString()],\n        [\"getData\", () => {\n          // Return a deep copy of the current global state\n          // Using JSON parse/stringify for a simple deep copy\n          const stateCopy = JSON.parse(JSON.stringify(globalState));\n          \n          // Check blog status and trigger fetch if needed, but don't block\n          if (stateCopy.blogStatus === 'idle') {\n            fetchAndCacheBlogData(); // Trigger fetch (no await)\n          } else if (stateCopy.blogStatus === 'error') {\n            console.warn(\"Blog data previously failed to load:\", stateCopy.blogError);\n          }\n          \n          // Remove fetch-related properties from the copy returned to the toy\n          delete stateCopy.blogStatus;\n          delete stateCopy.blogError;\n          delete stateCopy.blogFetchPromise;\n          \n          return stateCopy; \n        }],\n        [\"setData\", (newData) => {\n          // Replace the entire global state, but validate basic structure\n          if (typeof newData === 'object' && newData !== null && newData.hasOwnProperty('temporary')) {\n            // Preserve the internal blog loading state properties when updating\n            const currentBlogStatus = globalState.blogStatus;\n            const currentBlogError = globalState.blogError;\n            const currentBlogFetchPromise = globalState.blogFetchPromise;\n            const currentBlogData = globalState.blog; // Preserve actual blog data too\n            \n            globalState = newData;\n            \n            // Restore internal properties\n            globalState.blogStatus = currentBlogStatus;\n            globalState.blogError = currentBlogError;\n            globalState.blogFetchPromise = currentBlogFetchPromise;\n            // Ensure the blog data wasn't wiped out if it wasn't included in newData\n            if (!newData.hasOwnProperty('blog')) {\n              globalState.blog = currentBlogData;\n            }\n            \n            console.log('Global state updated:', globalState);\n          } else {\n            console.error('setData received invalid data structure:', newData);\n            throw new Error('setData requires an object with at least a \\'temporary\\' property.');\n          }\n        }]\n      ]);\n      \n      // Call the processing function with the input value\n      // If the function accepts two parameters (length === 2), it will receive the env Map\n      // If it only accepts one parameter, the second argument (env) will be ignored by the function\n      const result = processingFunction.length === 2\n                 ? processingFunction(inputValue, env)\n                 : processingFunction(inputValue);\n      \n      // Update the output\n      outputElement.textContent = result;\n    } catch (error) {\n      console.error('Error processing input:', error);\n      outputElement.textContent = 'Error: ' + error.message;\n      outputElement.parentElement.classList.add('warning');\n    }\n  }\n  \n  // Add event listener to the submit button\n  submitButton.addEventListener('click', handleSubmit);\n  \n  // Add event listener for Enter key in the input field\n  inputElement.addEventListener('keypress', (event) => {\n    if (event.key === 'Enter') {\n      handleSubmit(event);\n    }\n  });\n  \n  // Enable controls when initialization is complete\n  enableControls();\n}\n\n/**\n * Initialize a component when it enters the viewport\n * @param {string} id - The ID of the article element to observe\n * @param {string} modulePath - Path to the module containing the processing function\n * @param {string} functionName - Name of the function to import from the module\n */\nfunction initializeWhenVisible(id, modulePath, functionName) {\n  const article = document.getElementById(id);\n  \n  // Create an observer instance\n  const observer = new IntersectionObserver((entries, observer) => {\n    entries.forEach(entry => {\n      // If the article is visible\n      if (entry.isIntersecting) {\n        // Dynamically import the module only when the article is visible\n        import(modulePath).then((module) => {\n          const processingFunction = module[functionName];\n          \n          // Initialize the component with the imported function\n          initializeInteractiveComponent(id, processingFunction);\n        }).catch(error => {\n          console.error('Error loading module ' + modulePath + ':', error);\n        });\n        \n        // Stop observing once initialized\n        observer.disconnect();\n      }\n    });\n  }, {\n    // Options for the observer\n    root: null, // viewport\n    threshold: 0.1 // 10% visibility is enough to trigger\n  });\n  \n  // Start observing the article\n  observer.observe(article);\n}\n\n// Initialize all registered components when they become visible\nif (window.interactiveComponents && window.interactiveComponents.length > 0) {\n  console.log('Initializing', window.interactiveComponents.length, 'interactive components');\n  window.interactiveComponents.forEach(component => {\n    initializeWhenVisible(component.id, component.modulePath, component.functionName);\n  });\n} else {\n  console.warn('No interactive components found to initialize');\n}\n\n// Tag filtering functionality\nfunction hideArticlesByClass(className) {\n  var articles = document.getElementsByTagName('article');\n  for (var i = 0; i < articles.length; i++) {\n    if (articles[i].classList.contains(className)) {\n      articles[i].style.display = 'none';\n    }\n  }\n}\n\nfunction toggleHideLink(link, className) {\n  // Check if a span with the hide link already exists immediately after the link.\n  if (link.nextElementSibling && link.nextElementSibling.classList.contains('hide-span')) {\n    // Remove the span if it exists.\n    link.nextElementSibling.remove();\n  } else {\n    // Create a new span element.\n    var span = document.createElement('span');\n    span.classList.add('hide-span');\n    // Append the opening text node.\n    span.appendChild(document.createTextNode(\" (\"));\n\n    // Create the hide anchor element.\n    var hideLink = document.createElement('a');\n    hideLink.textContent = \"hide\";\n    // Add click listener to trigger hideArticlesByClass.\n    hideLink.addEventListener('click', function(event) {\n      event.preventDefault();\n      hideArticlesByClass(className);\n    });\n    span.appendChild(hideLink);\n    // Append the closing text node.\n    span.appendChild(document.createTextNode(\")\"));\n\n    // Insert the span immediately after the link.\n    link.parentNode.insertBefore(span, link.nextSibling);\n  }\n}\n\n(function() {\n  Array.from(document.getElementsByTagName('a')).forEach(function(link) {\n    Array.from(link.classList).forEach(function(className) {\n      if (className.indexOf('tag-') === 0) {\n        link.addEventListener('click', function(event) {\n          event.preventDefault();\n          toggleHideLink(link, className);\n        });\n        return; // exit after first tag- match\n      }\n    });\n  });\n})();\n\n/**\n * Fetches blog data and updates the global state.\n * Ensures only one fetch happens at a time.\n */\nfunction fetchAndCacheBlogData() {\n  // Prevent multiple simultaneous fetches\n  if (globalState.blogStatus === 'loading' && globalState.blogFetchPromise) {\n    console.log('Blog data fetch already in progress.');\n    return globalState.blogFetchPromise; \n  }\n  \n  console.log('Starting to fetch blog data...');\n  globalState.blogStatus = 'loading';\n  globalState.blogError = null;\n  \n  globalState.blogFetchPromise = fetch('./blog.json') \n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return response.json();\n    })\n    .then(data => {\n      globalState.blog = data; // Update the blog property\n      globalState.blogStatus = 'loaded';\n      console.log('Blog data loaded successfully into globalState.');\n      globalState.blogFetchPromise = null; // Clear promise on success\n    })\n    .catch(error => {\n      console.error('Error loading blog data:', error);\n      globalState.blogError = error;\n      globalState.blogStatus = 'error';\n      globalState.blogFetchPromise = null; // Clear promise on error\n    });\n  \n  return globalState.blogFetchPromise;\n}\n\n// Initial fetch of blog data when the script loads\nfetchAndCacheBlogData();","usedDeprecatedRules":[]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/src/generator/copy-toys.js","messages":[{"ruleId":"complexity","severity":1,"message":"Function 'shouldCopy' has a complexity of 3. Maximum allowed is 2.","line":83,"column":1,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":85,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env node\n\n/**\n * This script copies toy JavaScript files from src/toys to public\n * It preserves the directory structure\n */\n\nimport fs from 'fs';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\n// Get the directory name of the current module\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\n\n// Source and destination directories\nconst srcDir = path.join(__dirname, '..', '..', 'src', 'toys');\nconst destDir = path.join(__dirname, '..', '..', 'public');\n\n/**\n * Copy a file from source to destination\n * @param {string} src - Source file path\n * @param {string} dest - Destination file path\n */\nfunction copyFile(src, dest) {\n  // Create destination directory if it doesn't exist\n  const destDir = path.dirname(dest);\n  if (!fs.existsSync(destDir)) {\n    fs.mkdirSync(destDir, { recursive: true });\n  }\n  \n  // Copy the file\n  fs.copyFileSync(src, dest);\n  console.log(`Copied: ${src} -> ${dest}`);\n}\n\n/**\n * Recursively copy files from source to destination\n * @param {string} src - Source directory\n * @param {string} dest - Destination directory\n */\nfunction copyToyFiles(src, dest) {\n  const entries = fs.readdirSync(src, { withFileTypes: true });\n\n  for (const entry of entries) {\n    handleEntry(entry, src, dest);\n  }\n}\n\nfunction handleDirectoryEntry(entry, src, dest) {\n  const srcPath = path.join(src, entry.name);\n  copyToyFiles(srcPath, dest);\n}\n\nfunction handleFileEntry(entry, src, dest, srcPath) {\n  if (shouldCopy(entry)) {\n    const destPath = getDestPath(srcPath);\n    copyFile(srcPath, destPath);\n  }\n}\n\nfunction handleEntry(entry, src, dest) {\n  const srcPath = path.join(src, entry.name);\n\n  if (entry.isDirectory()) {\n    handleDirectoryEntry(entry, src, dest);\n  } else {\n    handleFileEntry(entry, src, dest, srcPath);\n  }\n}\n\nfunction isRegularFile(entry) {\n  return entry.isFile();\n}\n\nfunction isJavaScriptFile(entry) {\n  return entry.name.endsWith('.js');\n}\n\nfunction isTestFile(entry) {\n  return entry.name.endsWith('.test.js');\n}\n\nfunction shouldCopy(entry) {\n  return isRegularFile(entry) && isJavaScriptFile(entry) && !isTestFile(entry);\n}\n\nfunction getDestPath(srcPath) {\n  const relativePath = path.relative(srcDir, srcPath);\n  return path.join(destDir, relativePath);\n}\n\n// Execute the copy function\ncopyToyFiles(srcDir, destDir);\nconsole.log('Toy files copied successfully!');\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/src/generator/full-width.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/src/generator/generator.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/src/generator/head.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/src/generator/html.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/src/generator/interactive.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/src/generator/styles.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/src/generator/title.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/src/toys/2024-10-02/hello.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/src/toys/2025-03-19/identity.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/src/toys/2025-03-21/booleanCoercer.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/src/toys/2025-03-21/italics.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/src/toys/2025-03-26/prettyFloat.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'isInvalidNumber' is defined but never used.","line":26,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":25,"suggestions":[{"messageId":"removeVar","data":{"varName":"isInvalidNumber"},"fix":{"range":[598,674],"text":""},"desc":"Remove unused variable 'isInvalidNumber'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'parseValidNumber' is defined but never used.","line":34,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":34,"endColumn":26,"suggestions":[{"messageId":"removeVar","data":{"varName":"parseValidNumber"},"fix":{"range":[752,812],"text":""},"desc":"Remove unused variable 'parseValidNumber'."}]},{"ruleId":"complexity","severity":1,"message":"Function 'decomposeFloat' has a complexity of 4. Maximum allowed is 2.","line":43,"column":8,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":55,"endColumn":2}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"function isNonFinite(input) {\n  const num = Number(input);\n  return !Number.isFinite(num);\n}\n\nfunction getZeroVariantResult(num) {\n  const result = isZeroVariant(num);\n  return result !== null ? result : null;\n}\n\nfunction getValidNumber(input) {\n  if (isNonFinite(input)) return null;\n  return Number(input);\n}\n\nfunction getIEEEDecomposition(num) {\n  const parts = decomposeIEEE754(num);\n  if (!isValidIEEEParts(parts)) return null;\n  return getSignificandAndExponent(parts);\n}\n\nfunction formatFloatDecomposition(decimal, { B, C }) {\n  return `${decimal} (${B.toString()} × 2^${C.toString()})`;\n}\n\nfunction isInvalidNumber(input) {\n  return getValidNumber(input) === null;\n}\n\nfunction getZeroVariantString(num) {\n  return getZeroVariantResult(num);\n}\n\nfunction parseValidNumber(input) {\n  return Number(input);\n}\n\nfunction resolveZeroVariant(num) {\n  const zeroResult = getZeroVariantString(num);\n  return zeroResult ? zeroResult : null;\n}\n\nexport function decomposeFloat(input) {\n  const num = Number(input);\n  if (!Number.isFinite(num)) return \"\";\n\n  const zeroReturn = resolveZeroVariant(num);\n  if (zeroReturn) return zeroReturn;\n\n  const A = formatDecimal(num);\n  const decomposition = getIEEEDecomposition(num);\n  if (!decomposition) return \"\";\n\n  return formatFloatDecomposition(A, decomposition);\n}\n\nfunction isPositiveZero(n) {\n  return Object.is(n, 0);\n}\n\nfunction isNegativeZero(n) {\n  return Object.is(n, -0);\n}\n\nfunction isPositiveZeroResult(num) {\n  return isPositiveZero(num) ? \"0 (0 × 2^0)\" : null;\n}\n\nfunction isNegativeZeroResult(num) {\n  return isNegativeZero(num) ? \"0 (-0 × 2^0)\" : null;\n}\n\nfunction isZeroVariant(num) {\n  return isPositiveZeroResult(num) || isNegativeZeroResult(num);\n}\n\nfunction formatDecimal(num) {\n  let A = num.toPrecision(17);\n  return A.includes('.') ? A.replace(/\\.?0+$/, '') : A;\n}\n\nfunction hasIEEEFields(parts) {\n  return ['sign', 'mantissa', 'exponent'].every(key => key in parts);\n}\n\nfunction isValidIEEEParts(parts) {\n  return Boolean(parts) && hasIEEEFields(parts);\n}\n\nfunction getSignificandAndExponent({ sign, mantissa, exponent }) {\n  const signValue = sign === 0 ? 1n : -1n;\n  const fullSignificand = (1n << 52n) | BigInt(mantissa);\n  const B = signValue * fullSignificand;\n  const C = BigInt(exponent - 1023) - 52n;\n  return { B, C };\n}\n\nfunction decomposeIEEE754(value) {\n  if (!Number.isFinite(value)) return {};\n\n  const bits = getFloat64Bits(value);\n  return extractIEEEComponents(bits);\n}\n\nfunction getFloat64Bits(value) {\n  const buffer = new ArrayBuffer(8);\n  const floatView = new Float64Array(buffer);\n  const byteView = new Uint8Array(buffer);\n\n  floatView[0] = value;\n\n  let bits = 0n;\n  for (let i = 7; i >= 0; i--) {\n    bits = (bits << 8n) | BigInt(byteView[i]);\n  }\n\n  return bits;\n}\n\nfunction extractIEEEComponents(bits) {\n  const sign = Number((bits >> 63n) & 1n);\n  const exponentBits = (bits >> 52n) & 0x7FFn;\n  const mantissaBits = bits & 0xFFFFFFFFFFFFFn;\n\n  if (exponentBits === 0n) {\n    return {};\n  }\n\n  return {\n    sign,\n    mantissa: Number(mantissaBits),\n    exponent: Number(exponentBits),\n  };\n}","usedDeprecatedRules":[]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/src/toys/2025-03-28/rand.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/src/toys/2025-03-29/fishingGame.js","messages":[{"ruleId":"complexity","severity":1,"message":"Function 'getBaitData' has a complexity of 3. Maximum allowed is 2.","line":24,"column":1,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":33,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"function isRecognizedBait(baitKey, baitOptions) {\n  return baitKey in baitOptions;\n}\n\nfunction isEmptyBait(baitKey) {\n  return baitKey.length === 0;\n}\n\nfunction getDefaultBaitResponse(moodDescription) {\n  return {\n    isError: true,\n    message: `You cast your line with nothing but hesitation. Without any bait, the waters remain undisturbed in their ${moodDescription}.`\n  };\n}\n\nfunction getRecognizedBait(baitKey, baitOptions) {\n  return baitOptions[baitKey];\n}\n\nfunction getUnrecognizedBait() {\n  return { modifier: 0, description: \"an unconventional bait\" };\n}\n\nfunction getBaitData(input, baitOptions, moodDescription) {\n  const baitKey = input.trim().toLowerCase();\n  if (isRecognizedBait(baitKey, baitOptions)) {\n    return getRecognizedBait(baitKey, baitOptions);\n  }\n  if (isEmptyBait(baitKey)) {\n    return getDefaultBaitResponse(moodDescription);\n  }\n  return getUnrecognizedBait();\n}\n\nfunction getTimeOfDay(hour) {\n  const ranges = [\n    { start: 5, end: 12, label: \"morning\" },\n    { start: 12, end: 17, label: \"afternoon\" },\n    { start: 17, end: 21, label: \"evening\" },\n    { start: 21, end: 24, label: \"night\" },\n    { start: 0, end: 5, label: \"night\" },\n  ];\n  const match = ranges.find(({ start, end }) => hour >= start && hour < end);\n  if (!match) throw new Error(`Unrecognized hour: ${hour}`);\n  return match.label;\n}\n\nfunction getSeason(month) {\n  const ranges = [\n    { months: [11, 0, 1], label: \"winter\" },\n    { months: [2, 3, 4], label: \"spring\" },\n    { months: [5, 6, 7], label: \"summer\" },\n    { months: [8, 9, 10], label: \"fall\" },\n  ];\n  const match = ranges.find(({ months }) => months.includes(month));\n  if (!match) throw new Error(`Unrecognized month: ${month}`);\n  return match.label;\n}\n\nfunction getMoodDescription(season, timeOfDay) {\n  const seasonDescriptions = {\n    winter: \"crisp, icy waters\",\n    spring: \"bubbling, fresh currents\",\n    summer: \"warm, shimmering waves\",\n    fall: \"cool, reflective ponds\",\n  };\n  const timeDescriptions = {\n    morning: \"as dawn breaks with promise\",\n    afternoon: \"under a vibrant sun\",\n    evening: \"in the glow of twilight\",\n    night: \"beneath a silent, starry sky\",\n  };\n  return `${seasonDescriptions[season]} ${timeDescriptions[timeOfDay]}`;\n}\n\nfunction isSilentCatch(chance) {\n  return chance < 0.3;\n}\n\nfunction isCommonCatch(chance) {\n  return chance < 0.6;\n}\n\nfunction isTroutCatch(chance) {\n  return chance < 0.85;\n}\n\nconst fishingOutcomes = [\n  {\n    check: isSilentCatch,\n    describe: (bait, mood) =>\n      `the water stays silent. Despite your use of ${bait}, no fish disturb the ${mood}.`,\n  },\n  {\n    check: isCommonCatch,\n    describe: (bait, mood) =>\n      `a common carp surfaces gently, a modest reward for your effort with ${bait}, set against ${mood}.`,\n  },\n  {\n    check: isTroutCatch,\n    describe: (bait, mood) =>\n      `a glimmering trout appears briefly, its shimmer echoing the beauty of ${mood}. Your choice of ${bait} worked well.`,\n  },\n  {\n    check: () => true,\n    describe: (bait, mood) =>\n      `in a burst of brilliance, a legendary golden fish leaps forth—its radiance matching the splendor of ${mood}. Your ${bait} has yielded a prize.`,\n  },\n];\n\nfunction getFishingOutcome(effectiveChance, baitDescription, moodDescription) {\n  return fishingOutcomes.find(({ check }) => check(effectiveChance)).describe(baitDescription, moodDescription);\n}\n\nfunction getBaitOptions() {\n  return {\n    \"worm\": { modifier: 0.0, description: \"a wriggling worm\" },\n    \"insect\": { modifier: 0.05, description: \"a lively insect\" },\n    \"bread\": { modifier: -0.05, description: \"a slice of bread\" },\n    \"cheese\": { modifier: 0.1, description: \"a pungent piece of cheese\" },\n    \"shiny bait\": { modifier: 0.15, description: \"a glittering lure\" },\n    \"doughnut\": { modifier: 0.2, description: \"a tempting doughnut\" },\n    \"grub\": { modifier: 0.05, description: \"a succulent grub\" },\n    \"minnow\": { modifier: 0.1, description: \"a darting minnow\" },\n    \"sausage\": { modifier: 0.2, description: \"a savory sausage\" },\n    \"maggot\": { modifier: -0.1, description: \"a squirming maggot\" },\n  };\n}\n\nfunction getTimeContext(getCurrentTime) {\n  const date = new Date(getCurrentTime());\n  const month = date.getMonth();\n  const hour = date.getHours();\n  const season = getSeason(month);\n  const timeOfDay = getTimeOfDay(hour);\n  return { season, timeOfDay };\n}\n\nfunction fishingGame(input, env) {\n  const { season, timeOfDay } = getTimeContext(env.get(\"getCurrentTime\"));\n\n  const moodDescription = getMoodDescription(season, timeOfDay);\n\n  const baitOptions = getBaitOptions();\n\n  const baitDataOrError = getBaitData(input, baitOptions, moodDescription);\n  if (baitDataOrError.isError) return baitDataOrError.message;\n  const baitData = baitDataOrError;\n\n  const getRandomNumber = env.get(\"getRandomNumber\");\n  const baseChance = getRandomNumber();\n  const effectiveChance = Math.min(1, Math.max(0, baseChance + baitData.modifier));\n\n  const outcome = getFishingOutcome(effectiveChance, baitData.description, moodDescription);\n\n  return `Casting your line with ${baitData.description}, you await a catch. ${outcome}`;\n}\n\nexport { fishingGame };","usedDeprecatedRules":[]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/src/toys/2025-03-29/get.js","messages":[{"ruleId":"complexity","severity":1,"message":"Function 'get' has a complexity of 16. Maximum allowed is 2.","line":7,"column":8,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":55,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Retrieves a value from data provided by the environment using the input as a path.\n * @param {string} input - The path (e.g., 'key1.key2.0.key3') to look up in the data.\n * @param {Map<string, Function>} env - Environment map containing dependencies. Expected: 'getData'.\n * @returns {string} The JSON stringified value found at the path, or an error message.\n */\nexport function get(input, env) {\n  if (!env || typeof env.get !== 'function') {\n    return \"Error: 'env' Map with 'get' method is required.\";\n  }\n  const getData = env.get('getData');\n  if (typeof getData !== 'function') {\n    return \"Error: 'getData' function not found in env.\";\n  }\n\n  try {\n    const data = getData();\n    if (input.trim() === '') {\n      return JSON.stringify(data);\n    }\n    // Basic check if initial data is an object or array\n    if (data === null || (typeof data !== 'object' && !Array.isArray(data))) {\n        return \"Error: 'getData' did not return a valid object or array.\";\n    }\n\n    // Split the input path by dots\n    const pathSegments = input.split('.');\n    let currentValue = data;\n    let currentPath = '';\n\n    // Traverse the path\n    for (const segment of pathSegments) {\n      currentPath = currentPath ? `${currentPath}.${segment}` : segment;\n      if (currentValue === null || typeof currentValue !== 'object') {\n        return `Error: Cannot access property '${segment}' on non-object value at path '${currentPath.substring(0, currentPath.lastIndexOf('.') !== -1 ? currentPath.lastIndexOf('.') : 0)}'. Value is: ${JSON.stringify(currentValue)}`;\n      }\n\n      if (Object.prototype.hasOwnProperty.call(currentValue, segment)) {\n        currentValue = currentValue[segment];\n      } else {\n        return `Error: Path segment '${segment}' not found at '${currentPath}'. Available keys/indices: ${Object.keys(currentValue).join(', ')}`;\n      }\n    }\n\n    // Return a string representation of the final value\n    try {\n      return JSON.stringify(currentValue);\n    } catch (stringifyError) {\n        return `Error stringifying final value at path \"${input}\": ${stringifyError.message}`;\n    }\n  } catch (error) {\n      // Catch errors from getData() execution or other unexpected issues\n      return `Error during data retrieval or path traversal for \"${input}\": ${error.message}`;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/src/toys/2025-03-29/setTemporary.js","messages":[{"ruleId":"complexity","severity":1,"message":"Function 'isObject' has a complexity of 3. Maximum allowed is 2.","line":6,"column":1,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":8,"endColumn":2},{"ruleId":"complexity","severity":1,"message":"Function 'deepMerge' has a complexity of 4. Maximum allowed is 2.","line":19,"column":1,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":43,"endColumn":2},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 3. Maximum allowed is 2.","line":22,"column":33,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":34,"endColumn":6},{"ruleId":"complexity","severity":1,"message":"Function 'setTemporary' has a complexity of 10. Maximum allowed is 2.","line":52,"column":8,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":102,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Checks if an item is a plain object (not an array or null).\n * @param {*} item - The item to check.\n * @returns {boolean}\n */\nfunction isObject(item) {\n  return (item && typeof item === 'object' && !Array.isArray(item));\n}\n\n/**\n * Deeply merges two objects. Creates a new object with merged properties.\n * Properties in source will overwrite properties in target, unless both\n * properties are plain objects, in which case they are recursively merged.\n * Arrays and other types are overwritten, not merged.\n * @param {object} target - The target object.\n * @param {object} source - The source object.\n * @returns {object} A new object representing the merged result.\n */\nfunction deepMerge(target, source) {\n  const output = { ...target }; // Start with a shallow copy of the target\n  if (isObject(target) && isObject(source)) {\n    Object.keys(source).forEach(key => {\n      const targetValue = target[key];\n      const sourceValue = source[key];\n      if (isObject(targetValue) && isObject(sourceValue)) {\n        // If both target and source values are objects, recursively merge\n        output[key] = deepMerge(targetValue, sourceValue);\n      } else {\n        // Otherwise, overwrite with the source value\n        // (If sourceValue is an object, this assignment handles the case\n        // where target[key] wasn't an object or didn't exist)\n        output[key] = sourceValue;\n      }\n    });\n  } else if (isObject(source)) {\n      // If target is not an object but source is, return a shallow copy of source\n      // (or deep copy if required, but shallow should suffice here as we merge onto it)\n      return { ...source };\n  }\n  // If source is not an object, the initial shallow copy of target is returned\n  // or target itself if it wasn't an object either (though initial checks prevent this)\n  return output;\n}\n\n/**\n * Parses input as JSON, deep merges it into the 'temporary' object obtained via env.getData(),\n * and then passes the entire modified data structure back to env.setData().\n * @param {string} input - A JSON string to parse and merge.\n * @param {Map<string, Function>} env - Environment map. Expected: 'getData()', 'setData(data)'.\n * @returns {string} A confirmation message or an error message.\n */\nexport function setTemporary(input, env) {\n  let inputJson;\n  try {\n    inputJson = JSON.parse(input);\n  } catch (parseError) {\n    return `Error: Invalid JSON input. ${parseError.message}`;\n  }\n\n  if (!isObject(inputJson)) { // Use the helper\n      return \"Error: Input JSON must be a plain object.\";\n  }\n\n  if (!env || typeof env.get !== 'function') {\n    return \"Error: 'env' Map with 'get' method is required.\";\n  }\n  const getData = env.get('getData');\n  const setData = env.get('setData');\n  if (typeof getData !== 'function') {\n    return \"Error: 'getData' function not found in env.\";\n  }\n  if (typeof setData !== 'function') {\n      return \"Error: 'setData' function not found in env.\";\n  }\n\n  try {\n    const currentData = getData(); \n\n    if (!isObject(currentData)) { // Use the helper\n        return \"Error: 'getData' did not return a valid object.\";\n    }\n\n    // Deep clone currentData to create newData - JSON method is simple but has limitations (e.g., with Dates, Functions)\n    // For this use case, it should be acceptable.\n    const newData = JSON.parse(JSON.stringify(currentData));\n\n    // Ensure the 'temporary' key exists and is an object in the new copy\n    if (!isObject(newData.temporary)) {\n        newData.temporary = {}; \n    }\n\n    // Perform the deep merge\n    newData.temporary = deepMerge(newData.temporary, inputJson);\n\n    setData(newData);\n\n    return `Success: Temporary data deep merged.`; \n\n  } catch (error) {\n    return `Error updating temporary data: ${error.message}`;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/src/toys/2025-03-30/cyberpunkAdventure.js","messages":[{"ruleId":"complexity","severity":1,"message":"Function 'cyberpunkAdventure' has a complexity of 22. Maximum allowed is 2.","line":1,"column":8,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":115,"endColumn":2},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":83,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":83,"endColumn":48,"suggestions":[{"messageId":"addBrackets","fix":{"range":[3136,3561],"text":"{ const stealthCheck = getRandomNumber();\n        const success = stealthCheck > 0.3;\n        if (success) {\n          output = `> You dodge the shadows and find a hidden stash: a stimpack.`;\n          nextInventory.push(\"stimpack\");\n          nextVisited.add(\"alley\");\n        } else {\n          output = `> You trip a wire. Sirens start up. You sprint back to the Market.`;\n        }\n        nextState = \"hub\";\n        break; }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":84,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":84,"endColumn":44,"suggestions":[{"messageId":"addBrackets","fix":{"range":[3136,3561],"text":"{ const stealthCheck = getRandomNumber();\n        const success = stealthCheck > 0.3;\n        if (success) {\n          output = `> You dodge the shadows and find a hidden stash: a stimpack.`;\n          nextInventory.push(\"stimpack\");\n          nextVisited.add(\"alley\");\n        } else {\n          output = `> You trip a wire. Sirens start up. You sprint back to the Market.`;\n        }\n        nextState = \"hub\";\n        break; }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":112,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":112,"endColumn":13}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export function cyberpunkAdventure(input, env) {\n  try {\n    const getRandomNumber = env.get(\"getRandomNumber\");\n    const getCurrentTime = env.get(\"getCurrentTime\");\n    const getData = env.get(\"getData\");\n    const setTemporaryData = env.get(\"setData\");\n    const { temporary } = getData();\n    const scoped = temporary.CYBE1 || {};\n\n    const name = scoped.name || input.trim() || \"Stray\";\n    const state = scoped.state || \"intro\";\n    const inventory = scoped.inventory || [];\n    const visited = new Set(scoped.visited || []);\n\n    const lowerInput = input.trim().toLowerCase();\n    const time = getCurrentTime();\n\n    let output = \"\";\n    let nextState = state;\n    let nextInventory = [...inventory];\n    let nextVisited = new Set(visited);\n\n    // If we haven’t stored the name yet, do so now\n    if (!scoped.name) {\n      setTemporaryData({ temporary: { CYBE1: { name } } });\n      return `> Welcome, ${name}. Your story begins now.\\n> Type 'start' to continue.`;\n    }\n\n    // Game logic\n    switch (state) {\n      case \"intro\":\n        output = `> ${time}\\n> ${name}, you're in the Neon Market. Lights hum. Faces blur.\\n> You see paths to: Hacker Den, Transport Hub, and Back Alley.\\n> Where do you go? (hacker / transport / alley)`;\n        nextState = \"hub\";\n        break;\n\n      case \"hub\":\n        if (lowerInput.includes(\"hacker\")) {\n          output = `> You approach the Hacker Den. The door requires a password.`;\n          nextState = \"hacker:door\";\n        } else if (lowerInput.includes(\"transport\")) {\n          output = `> You head to the Transport Hub. Trains screech overhead.`;\n          nextState = \"transport:platform\";\n        } else if (lowerInput.includes(\"alley\")) {\n          output = `> You slip into the Back Alley. The shadows move with you.`;\n          nextState = \"alley:stealth\";\n        } else {\n          output = `> Unclear direction. Options: hacker / transport / alley`;\n        }\n        break;\n\n      // Hacker Den phases\n      case \"hacker:door\":\n        if (lowerInput.includes(\"zero\")) {\n          output = `> Password accepted. Inside, a rogue AI offers you a cracked implant.`;\n          nextInventory.push(\"cracked implant\");\n          nextVisited.add(\"hacker\");\n          nextState = \"hub\";\n        } else {\n          output = `> Hint: the password is a number and a name...`;\n        }\n        break;\n\n      // Transport Hub phases\n      case \"transport:platform\":\n        output = `> A vendor offers you a neural ticket in exchange for your datapad.`;\n        nextState = \"transport:trade\";\n        break;\n\n      case \"transport:trade\":\n        if (nextInventory.includes(\"datapad\") && lowerInput.includes(\"trade\")) {\n          output = `> You hand over the datapad. The vendor grins and slips you the neural ticket.`;\n          nextInventory.splice(nextInventory.indexOf(\"datapad\"), 1);\n          nextInventory.push(\"neural ticket\");\n          nextVisited.add(\"transport\");\n          nextState = \"hub\";\n        } else {\n          output = `> Do you want to trade? Type 'trade datapad'.`;\n        }\n        break;\n\n      // Back Alley phases\n      case \"alley:stealth\":\n        const stealthCheck = getRandomNumber();\n        const success = stealthCheck > 0.3;\n        if (success) {\n          output = `> You dodge the shadows and find a hidden stash: a stimpack.`;\n          nextInventory.push(\"stimpack\");\n          nextVisited.add(\"alley\");\n        } else {\n          output = `> You trip a wire. Sirens start up. You sprint back to the Market.`;\n        }\n        nextState = \"hub\";\n        break;\n\n      default:\n        output = `> Glitch in the grid. Resetting...`;\n        nextState = \"intro\";\n    }\n\n    setTemporaryData({\n      temporary: {\n        CYBE1: {\n          name,\n          state: nextState,\n          inventory: nextInventory,\n          visited: [...nextVisited]\n        }\n      }\n    });\n\n    return output;\n  } catch (e) {\n    return `> SYSTEM ERROR: neural link failure`;\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/stryker.config.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/test/browser/main.test.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/test/generator/generator.test.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/test/toys/2024-10-02/hello.test.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/test/toys/2025-03-19/identity.test.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/test/toys/2025-03-21/booleanCoercer.test.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/test/toys/2025-03-21/italics.test.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/test/toys/2025-03-26/prettyFloat.test.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/test/toys/2025-03-28/rand.test.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/test/toys/2025-03-29/fishingGame.test.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/test/toys/2025-03-29/get.test.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/test/toys/2025-03-29/setTemporary.test.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/test/toys/2025-03-30/cyberpunkAdventure.test.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]