[{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/babel.config.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-multi-spaces","replacedBy":["@stylistic/js/no-multi-spaces"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multi-spaces","url":"https://eslint.style/rules/js/no-multi-spaces"}}]}}]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/eslint.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-multi-spaces","replacedBy":["@stylistic/js/no-multi-spaces"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multi-spaces","url":"https://eslint.style/rules/js/no-multi-spaces"}}]}}]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/generate.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-multi-spaces","replacedBy":["@stylistic/js/no-multi-spaces"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multi-spaces","url":"https://eslint.style/rules/js/no-multi-spaces"}}]}}]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/jest.config.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-multi-spaces","replacedBy":["@stylistic/js/no-multi-spaces"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multi-spaces","url":"https://eslint.style/rules/js/no-multi-spaces"}}]}}]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/reports/coverage/lcov-report/block-navigation.js","messages":[],"suppressedMessages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":1,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":86,"endColumn":6,"fix":{"range":[21,24],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":4,"column":5,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":4,"endColumn":76,"fix":{"range":[128,131],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":7,"column":5,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":7,"endColumn":46,"fix":{"range":[259,262],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":10,"column":5,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":10,"endColumn":80,"fix":{"range":[391,394],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":13,"column":5,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":17,"endColumn":57,"fix":{"range":[572,575],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":20,"column":5,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":20,"endColumn":71,"fix":{"range":[820,823],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":22,"column":5,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":22,"endColumn":22,"fix":{"range":[892,895],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"complexity","severity":1,"message":"Function 'goToPrevious' has a complexity of 4. Maximum allowed is 2.","line":41,"column":5,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":50,"endColumn":6,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":42,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":42,"endColumn":27,"fix":{"range":[1436,1439],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"complexity","severity":1,"message":"Function 'goToNext' has a complexity of 3. Maximum allowed is 2.","line":52,"column":5,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":63,"endColumn":6,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":53,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":53,"endColumn":27,"fix":{"range":[1768,1771],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"complexity","severity":1,"message":"Function 'jump' has a complexity of 8. Maximum allowed is 2.","line":65,"column":12,"nodeType":"FunctionExpression","messageId":"complex","endLine":85,"endColumn":6,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"eqeqeq","severity":1,"message":"Expected '!==' and instead saw '!='.","line":68,"column":36,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":68,"endColumn":38,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-multi-spaces","replacedBy":["@stylistic/js/no-multi-spaces"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multi-spaces","url":"https://eslint.style/rules/js/no-multi-spaces"}}]}}]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/reports/coverage/lcov-report/prettify.js","messages":[],"suppressedMessages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":52,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":105,"fix":{"range":[72,75],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":105,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":272,"fix":{"range":[125,128],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":272,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":381,"fix":{"range":[292,295],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":381,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":646,"fix":{"range":[401,404],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":646,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":796,"fix":{"range":[666,669],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":796,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":1071,"fix":{"range":[816,819],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":1071,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":1236,"fix":{"range":[1091,1094],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":1236,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":1323,"fix":{"range":[1256,1259],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":1323,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":1506,"fix":{"range":[1343,1346],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":1506,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":1667,"fix":{"range":[1526,1529],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":1667,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":1846,"fix":{"range":[1687,1690],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":1846,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":1919,"fix":{"range":[1866,1869],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":1919,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":1941,"fix":{"range":[1939,1942],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":1941,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":2060,"fix":{"range":[1961,1964],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":2060,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":2072,"fix":{"range":[2080,2083],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":2072,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":2084,"fix":{"range":[2092,2095],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":2084,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":2096,"fix":{"range":[2104,2107],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":2096,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":2108,"fix":{"range":[2116,2119],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":2108,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":2120,"fix":{"range":[2128,2131],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":2120,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":2132,"fix":{"range":[2140,2143],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":2132,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":2144,"fix":{"range":[2152,2155],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":2144,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":2156,"fix":{"range":[2164,2167],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":2156,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":2168,"fix":{"range":[2176,2179],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":2168,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":2180,"fix":{"range":[2188,2191],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":2180,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":2192,"fix":{"range":[2200,2203],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":2192,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":2204,"fix":{"range":[2212,2215],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":2204,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":2219,"fix":{"range":[2224,2227],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":2219,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":2525,"fix":{"range":[2239,2242],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"complexity","severity":1,"message":"Function 'k' has a complexity of 8. Maximum allowed is 2.","line":2,"column":2525,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":2,"endColumn":5372,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":2539,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":2548,"fix":{"range":[2559,2562],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":2548,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":2560,"fix":{"range":[2568,2571],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":2560,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":2573,"fix":{"range":[2580,2583],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":2577,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":2595,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":2605,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":2617,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":2755,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":2791,"fix":{"range":[2775,2778],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"complexity","severity":1,"message":"Function 'ab' has a complexity of 7. Maximum allowed is 2.","line":2,"column":2791,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":2,"endColumn":3056,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":2807,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":2831,"fix":{"range":[2827,2830],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":2853,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":2873,"fix":{"range":[2873,2876],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"complexity","severity":1,"message":"Function 'T' has a complexity of 7. Maximum allowed is 2.","line":2,"column":3056,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":2,"endColumn":3220,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":3124,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":3155,"fix":{"range":[3144,3147],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"complexity","severity":1,"message":"Function 'X' has a complexity of 18. Maximum allowed is 2.","line":2,"column":3220,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":2,"endColumn":4215,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":3235,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":3394,"fix":{"range":[3255,3258],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":3394,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":3404,"fix":{"range":[3414,3417],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":3404,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":3414,"fix":{"range":[3424,3427],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":3414,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":3433,"fix":{"range":[3434,3437],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":3437,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":3463,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":3476,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":3490,"fix":{"range":[3496,3499],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":3532,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":3546,"fix":{"range":[3552,3555],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":3546,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":3553,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":3858,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":3868,"fix":{"range":[3878,3881],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":3868,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":3885,"fix":{"range":[3888,3891],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":3889,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":3897,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":3917,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":3931,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":3999,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":4012,"fix":{"range":[4019,4022],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":4057,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":4065,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":4085,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":4099,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"complexity","severity":1,"message":"Function 'W' has a complexity of 23. Maximum allowed is 2.","line":2,"column":4215,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":2,"endColumn":5198,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":4230,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":4426,"fix":{"range":[4250,4253],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":4426,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":4443,"fix":{"range":[4446,4449],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":4443,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":4453,"fix":{"range":[4463,4466],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":4457,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":4470,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":4483,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":4497,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":4544,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":4568,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":4600,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":4608,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":4661,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":4674,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":4687,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":4701,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":4785,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":4809,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":4850,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":4863,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":4945,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":4953,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":4966,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":4980,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":4980,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":5000,"fix":{"range":[5000,5003],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":5102,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":5126,"fix":{"range":[5122,5125],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":5198,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":5208,"fix":{"range":[5218,5221],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":5212,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":5230,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":5240,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":5252,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"complexity","severity":1,"message":"Function 'a' has a complexity of 4. Maximum allowed is 2.","line":2,"column":5372,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":2,"endColumn":6109,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":5386,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":5417,"fix":{"range":[5406,5409],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":5417,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":5426,"fix":{"range":[5437,5440],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":5426,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":5434,"fix":{"range":[5446,5449],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":5434,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":5443,"fix":{"range":[5454,5457],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":5443,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":5451,"fix":{"range":[5463,5466],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":5451,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":5457,"fix":{"range":[5471,5474],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":5618,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":5652,"fix":{"range":[5638,5641],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"complexity","severity":1,"message":"Function 'aa' has a complexity of 10. Maximum allowed is 2.","line":2,"column":5652,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":2,"endColumn":6047,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":5731,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":5751,"fix":{"range":[5751,5754],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":5781,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":5800,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":5884,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":5904,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":6143,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":6174,"fix":{"range":[6163,6166],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":6209,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":6220,"fix":{"range":[6229,6232],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"complexity","severity":1,"message":"Function 'o' has a complexity of 7. Maximum allowed is 2.","line":2,"column":6220,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":2,"endColumn":6388,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":6234,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":6250,"fix":{"range":[6254,6257],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":6254,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":6272,"fix":{"range":[6274,6277],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":6292,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":6309,"fix":{"range":[6312,6315],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":6404,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":6413,"fix":{"range":[6424,6427],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":6413,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":6419,"fix":{"range":[6433,6436],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"complexity","severity":1,"message":"Function has a complexity of 5. Maximum allowed is 2.","line":2,"column":6420,"nodeType":"FunctionExpression","messageId":"complex","endLine":2,"endColumn":6697,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":6431,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":6450,"fix":{"range":[6451,6454],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":6450,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":6460,"fix":{"range":[6470,6473],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":6460,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":6470,"fix":{"range":[6480,6483],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":6474,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":6494,"fix":{"range":[6494,6497],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":6506,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":6519,"fix":{"range":[6526,6529],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":6519,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":6531,"fix":{"range":[6539,6542],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":6542,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":6558,"fix":{"range":[6562,6565],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":6589,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":6601,"fix":{"range":[6609,6612],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":6601,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":6614,"fix":{"range":[6621,6624],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":6701,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":6716,"fix":{"range":[6721,6724],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":6716,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":7512,"fix":{"range":[6736,6739],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"complexity","severity":1,"message":"Function has a complexity of 15. Maximum allowed is 2.","line":2,"column":6722,"nodeType":"FunctionExpression","messageId":"complex","endLine":2,"endColumn":7511,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":6735,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":6768,"fix":{"range":[6755,6758],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":6768,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":6781,"fix":{"range":[6788,6791],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":6781,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":6790,"fix":{"range":[6801,6804],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":6790,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":6812,"fix":{"range":[6810,6813],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":6812,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":6822,"fix":{"range":[6832,6835],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":6826,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":6847,"fix":{"range":[6846,6849],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":6860,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":6874,"fix":{"range":[6880,6883],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":6874,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":6888,"fix":{"range":[6894,6897],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":6888,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":6902,"fix":{"range":[6908,6911],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":6902,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":6909,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":6948,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":6971,"fix":{"range":[6968,6971],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":7015,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":7023,"fix":{"range":[7035,7038],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":7217,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":7227,"fix":{"range":[7237,7240],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":7271,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":7284,"fix":{"range":[7291,7294],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":7284,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":7306,"fix":{"range":[7304,7307],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":7306,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":7326,"fix":{"range":[7326,7329],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":7378,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":7401,"fix":{"range":[7398,7401],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"complexity","severity":1,"message":"Function 'i' has a complexity of 11. Maximum allowed is 2.","line":2,"column":7521,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":2,"endColumn":9272,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":7535,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":7549,"fix":{"range":[7555,7558],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":8105,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":8126,"fix":{"range":[8125,8128],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":8592,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":8696,"fix":{"range":[8612,8615],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":8747,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":8761,"fix":{"range":[8767,8770],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":8781,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":8824,"fix":{"range":[8801,8804],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":9272,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":9373,"fix":{"range":[9292,9295],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"complexity","severity":1,"message":"Function 'Q' has a complexity of 10. Maximum allowed is 2.","line":2,"column":9373,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":2,"endColumn":10970,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":9390,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":9421,"fix":{"range":[9410,9413],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":9421,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":9439,"fix":{"range":[9441,9444],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":9439,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":9462,"fix":{"range":[9459,9462],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":9462,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":9468,"fix":{"range":[9482,9485],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":9623,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":9657,"fix":{"range":[9643,9646],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":9657,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":9687,"fix":{"range":[9677,9680],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":9736,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":9747,"fix":{"range":[9756,9759],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"complexity","severity":1,"message":"Function 'ae' has a complexity of 12. Maximum allowed is 2.","line":2,"column":9747,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":2,"endColumn":10260,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":9909,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":9929,"fix":{"range":[9929,9932],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":9986,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":10006,"fix":{"range":[10006,10009],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":10006,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":10026,"fix":{"range":[10026,10029],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":10033,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":10065,"fix":{"range":[10053,10056],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":10081,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":10124,"fix":{"range":[10101,10104],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":10131,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":10152,"fix":{"range":[10151,10154],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"complexity","severity":1,"message":"Function 'ad' has a complexity of 5. Maximum allowed is 2.","line":2,"column":10260,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":2,"endColumn":10635,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"complexity","severity":1,"message":"Function 'ai' has a complexity of 4. Maximum allowed is 2.","line":2,"column":10332,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":2,"endColumn":10541,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":10351,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":10384,"fix":{"range":[10371,10374],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":10384,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":10405,"fix":{"range":[10404,10407],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":10412,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":10428,"fix":{"range":[10432,10435],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":10428,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":10450,"fix":{"range":[10448,10451],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":10473,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":10482,"fix":{"range":[10493,10496],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":10541,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":10569,"fix":{"range":[10561,10564],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":10573,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":10579,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":10639,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":10646,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":10718,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":10748,"fix":{"range":[10738,10741],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":10772,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":10804,"fix":{"range":[10792,10795],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":10808,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":10826,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"complexity","severity":1,"message":"Function 'D' has a complexity of 15. Maximum allowed is 2.","line":2,"column":10970,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":2,"endColumn":11894,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":10985,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":11029,"fix":{"range":[11005,11008],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":11029,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":11042,"fix":{"range":[11049,11052],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":11042,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":11063,"fix":{"range":[11062,11065],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":11063,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":11080,"fix":{"range":[11083,11086],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":11080,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":11088,"fix":{"range":[11100,11103],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":11088,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":11104,"fix":{"range":[11108,11111],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":11104,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":11120,"fix":{"range":[11124,11127],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":11120,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":11129,"fix":{"range":[11140,11143],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":11129,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":11150,"fix":{"range":[11149,11152],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":11150,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":11165,"fix":{"range":[11170,11173],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":11165,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":11173,"fix":{"range":[11185,11188],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":11181,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":11191,"fix":{"range":[11201,11204],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":11298,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":11311,"fix":{"range":[11318,11321],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":11311,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":11326,"fix":{"range":[11331,11334],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":11326,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":11337,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":11410,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":11422,"fix":{"range":[11430,11433],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":1,"message":"'ae' is assigned a value but never used.","line":2,"column":11414,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":11416,"suggestions":[{"messageId":"removeVar","data":{"varName":"ae"},"fix":{"range":[11430,11442],"text":""},"desc":"Remove unused variable 'ae'."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":11434,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":11448,"fix":{"range":[11454,11457],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":1,"message":"'af' is assigned a value but never used.","line":2,"column":11438,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":11440,"suggestions":[{"messageId":"removeVar","data":{"varName":"af"},"fix":{"range":[11454,11468],"text":""},"desc":"Remove unused variable 'af'."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":11448,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":11467,"fix":{"range":[11468,11471],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":11467,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":11479,"fix":{"range":[11487,11490],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":1,"message":"'ag' is assigned a value but never used.","line":2,"column":11471,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":11473,"suggestions":[{"messageId":"removeVar","data":{"varName":"ag"},"fix":{"range":[11487,11499],"text":""},"desc":"Remove unused variable 'ag'."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":11479,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":11497,"fix":{"range":[11499,11502],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":11497,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":11518,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":11518,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":11534,"fix":{"range":[11538,11541],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":11534,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":11540,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":11626,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":11650,"fix":{"range":[11646,11649],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":11650,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":11682,"fix":{"range":[11670,11673],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":11702,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":11723,"fix":{"range":[11722,11725],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":11894,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":11903,"fix":{"range":[11914,11917],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"complexity","severity":1,"message":"Function 'c' has a complexity of 4. Maximum allowed is 2.","line":2,"column":11903,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":2,"endColumn":12071,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":11923,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":11937,"fix":{"range":[11943,11946],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":11947,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":11958,"fix":{"range":[11967,11970],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"complexity","severity":1,"message":"Function 'q' has a complexity of 4. Maximum allowed is 2.","line":2,"column":12071,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":2,"endColumn":12179,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"complexity","severity":1,"message":"Function 'd' has a complexity of 5. Maximum allowed is 2.","line":2,"column":14061,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":2,"endColumn":14269,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":14075,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":14097,"fix":{"range":[14095,14098],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":14101,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":14123,"fix":{"range":[14121,14124],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":14123,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":14142,"fix":{"range":[14143,14146],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":14287,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":14323,"fix":{"range":[14307,14310],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":14350,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":14401,"fix":{"range":[14370,14373],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"complexity","severity":1,"message":"Function 'b' has a complexity of 4. Maximum allowed is 2.","line":2,"column":14425,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":2,"endColumn":15491,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":14496,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":14533,"fix":{"range":[14516,14519],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":14533,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":14542,"fix":{"range":[14553,14556],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":14546,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":14554,"fix":{"range":[14566,14569],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":14578,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":14601,"fix":{"range":[14598,14601],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":14638,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":14649,"fix":{"range":[14658,14661],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":14699,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":14707,"fix":{"range":[14719,14722],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":14707,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":14713,"fix":{"range":[14727,14730],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":14713,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":14753,"fix":{"range":[14733,14736],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":14753,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":14778,"fix":{"range":[14773,14776],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":1,"message":"'ae' is assigned a value but never used.","line":2,"column":14757,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":14759,"suggestions":[{"messageId":"removeVar","data":{"varName":"ae"},"fix":{"range":[14773,14798],"text":""},"desc":"Remove unused variable 'ae'."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"complexity","severity":1,"message":"Function 'U' has a complexity of 22. Maximum allowed is 2.","line":2,"column":14778,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":2,"endColumn":15487,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":14791,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":14855,"fix":{"range":[14811,14814],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":14888,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":14900,"fix":{"range":[14908,14911],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":14900,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":14920,"fix":{"range":[14920,14923],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":14953,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":14973,"fix":{"range":[14973,14976],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":14973,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":14980,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":15063,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":15076,"fix":{"range":[15083,15086],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":15080,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":15100,"fix":{"range":[15100,15103],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":15265,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":15318,"fix":{"range":[15285,15288],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-multi-spaces","replacedBy":["@stylistic/js/no-multi-spaces"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multi-spaces","url":"https://eslint.style/rules/js/no-multi-spaces"}}]}}]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/reports/coverage/lcov-report/sorter.js","messages":[],"suppressedMessages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":1,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":194,"endColumn":6,"fix":{"range":[21,24],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":4,"column":5,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":8,"endColumn":11,"fix":{"range":[74,77],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"complexity","severity":1,"message":"Function 'onFilterInput' has a complexity of 3. Maximum allowed is 2.","line":27,"column":5,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":42,"endColumn":6,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":46,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":46,"endColumn":66,"fix":{"range":[1343,1346],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":47,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":47,"endColumn":62,"fix":{"range":[1409,1412],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"complexity","severity":1,"message":"Function 'loadColumns' has a complexity of 4. Maximum allowed is 2.","line":53,"column":5,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":75,"endColumn":6,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":54,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":58,"endColumn":15,"fix":{"range":[1667,1670],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"complexity","severity":1,"message":"Function 'loadRowData' has a complexity of 3. Maximum allowed is 2.","line":78,"column":5,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":95,"endColumn":6,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":79,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":84,"endColumn":17,"fix":{"range":[2544,2547],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":98,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":99,"endColumn":15,"fix":{"range":[3075,3078],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"complexity","severity":1,"message":"Function 'sortByIndex' has a complexity of 4. Maximum allowed is 2.","line":106,"column":5,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":135,"endColumn":6,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":107,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":117,"endColumn":15,"fix":{"range":[3358,3361],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"complexity","severity":1,"message":"Function has a complexity of 3. Maximum allowed is 2.","line":108,"column":22,"nodeType":"FunctionExpression","messageId":"complex","endLine":112,"endColumn":14,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":138,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":139,"endColumn":33,"fix":{"range":[4286,4289],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"complexity","severity":1,"message":"Function 'enableUI' has a complexity of 4. Maximum allowed is 2.","line":151,"column":5,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":182,"endColumn":6,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":152,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":169,"endColumn":15,"fix":{"range":[4780,4783],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":155,"column":17,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":155,"endColumn":35,"fix":{"range":[4867,4870],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":158,"column":21,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":158,"endColumn":52,"fix":{"range":[4943,4946],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-multi-spaces","replacedBy":["@stylistic/js/no-multi-spaces"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multi-spaces","url":"https://eslint.style/rules/js/no-multi-spaces"}}]}}]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/src/browser/audio-controls.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-multi-spaces","replacedBy":["@stylistic/js/no-multi-spaces"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multi-spaces","url":"https://eslint.style/rules/js/no-multi-spaces"}}]}}]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/src/browser/data.js","messages":[{"ruleId":"complexity","severity":1,"message":"Function 'isInvalidState' has a complexity of 3. Maximum allowed is 2.","line":95,"column":1,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":98,"endColumn":2},{"ruleId":"curly","severity":1,"message":"Expected { after 'if' condition.","line":96,"column":44,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":96,"endColumn":56,"fix":{"range":[2907,2919],"text":"{return true;}"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"const INTERNAL_STATE_KEYS = ['blogStatus', 'blogError', 'blogFetchPromise'];\n\nconst BLOG_STATUS = {\n  IDLE: 'idle',\n  LOADING: 'loading',\n  LOADED: 'loaded',\n  ERROR: 'error'\n};\n\nfunction getBlogState(globalState) {\n  return {\n    status: globalState.blogStatus,\n    error: globalState.blogError,\n    fetchPromise: globalState.blogFetchPromise,\n    data: globalState.blog,\n  };\n}\n\nfunction isFetchInProgress(globalState) {\n  const { status, fetchPromise } = getBlogState(globalState);\n  return status === BLOG_STATUS.LOADING && fetchPromise;\n}\n\nexport function shouldUseExistingFetch(globalState, logFn) {\n  if (isFetchInProgress(globalState)) {\n    logFn('Blog data fetch already in progress.');\n    return true;\n  }\n  return false;\n} \n\n/**\n * Fetches blog data and updates the global state.\n * Ensures only one fetch happens at a time.\n * @param {object} globalState - The global state object.\n * @param {function} fetchFn - The fetch function to use.\n * @param {function} logFn - The logging function to use.\n * @param {function} errorFn - The error logging function to use.\n */\nexport function fetchAndCacheBlogData(globalState, fetchFn, logFn, errorFn) {\n  // Prevent multiple simultaneous fetches\n  if (isFetchInProgress(globalState)) {\n    logFn('Blog data fetch already in progress.');\n    return globalState.blogFetchPromise; \n  }\n  \n  logFn('Starting to fetch blog data...');\n  globalState.blogStatus = BLOG_STATUS.LOADING;\n  globalState.blogError = null;\n  \n  globalState.blogFetchPromise = fetchFn('./blog.json') \n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return response.json();\n    })\n    .then(data => {\n      globalState.blog = data; // Update the blog property\n      globalState.blogStatus = BLOG_STATUS.LOADED;\n      logFn('Blog data loaded successfully:', data);\n    })\n    .catch(err => {\n      globalState.blogStatus = BLOG_STATUS.ERROR;\n      globalState.blogError = err;\n      errorFn('Error fetching blog data:', err);\n    })\n    .finally(() => {\n      globalState.blogFetchPromise = null; // Clear the promise tracking\n    });\n  \n  return globalState.blogFetchPromise; // Return the promise for potential chaining\n}\n\n// Helper function needed by getData\nexport const getDeepStateCopy = (globalState) => JSON.parse(JSON.stringify(globalState));\n\nfunction stripInternalFields(stateCopy) {\n  for (const key of INTERNAL_STATE_KEYS) {\n    delete stateCopy[key];\n  }\n}\n\nfunction restoreBlogState(globalState, blogState) {\n  globalState.blogStatus = blogState.status;\n  globalState.blogError = blogState.error;\n  globalState.blogFetchPromise = blogState.fetchPromise;\n  globalState.blog = blogState.data;\n}\n\nfunction shouldCopyStateForFetch(status) {\n  return status === BLOG_STATUS.IDLE || status === BLOG_STATUS.ERROR;\n}\n\nfunction isInvalidState(value) {\n  if (!value || typeof value !== 'object') return true;\n  return !Object.prototype.hasOwnProperty.call(value, 'temporary');\n}\n\nfunction validateIncomingState(incomingState, errorFn) {\n  if (isInvalidState(incomingState)) {\n    errorFn('setData received invalid data structure:', incomingState);\n    throw new Error(\"setData requires an object with at least a 'temporary' property.\");\n  }\n}\n\nfunction tryFetchingBlog(status, globalState, fetchFn, logFn, errorFn) {\n  if (status === BLOG_STATUS.IDLE) {\n    fetchAndCacheBlogData(globalState, fetchFn, logFn, errorFn);\n  }\n}\n\nfunction maybeLogFetchError(status, error, warnFn) {\n  if (status === BLOG_STATUS.ERROR) {\n    warnFn(\"Blog data previously failed to load:\", error);\n  }\n}\n\nfunction handleBlogFetchState(status, error, globalState, fetchFn, logFn, errorFn, warnFn) {\n  tryFetchingBlog(status, globalState, fetchFn, logFn, errorFn);\n  maybeLogFetchError(status, error, warnFn);\n}\n\n/**\n * Gets a deep copy of the current global state, suitable for passing to toys.\n * It also handles initiating the blog data fetch if needed.\n * @param {object} globalState - The main application state.\n * @param {function} fetchFn - The fetch function.\n * @param {function} logFn - The logging function.\n * @param {function} errorFn - The error logging function.\n * @param {function} warnFn - The warning logging function.\n * @returns {object} A deep copy of the relevant state for the toy.\n */\nexport const getData = (globalState, fetchFn, logFn, errorFn, warnFn) => {\n  const { status, error } = getBlogState(globalState);\n  const stateCopy = shouldCopyStateForFetch(status) ? getDeepStateCopy(globalState) : globalState;\n\n  handleBlogFetchState(status, error, globalState, fetchFn, logFn, errorFn, warnFn);\n\n  stripInternalFields(stateCopy);\n  return stateCopy;\n};\n\n/**\n * Updates the global state, preserving internal fetch/blog properties.\n * @param {object} incomingState - The new state object (must have 'temporary').\n * @param {object} globalState - The current global state to modify.\n * @param {function} logFn - The logging function.\n * @param {function} errorFn - The error logging function.\n */\nexport const setData = (incomingState, globalState, logFn, errorFn) => {\n  // Replace the entire global state, but validate basic structure\n  validateIncomingState(incomingState, errorFn);\n  const oldBlogState = getBlogState(globalState);\n  Object.assign(globalState, incomingState);\n  restoreBlogState(globalState, oldBlogState);\n  \n  logFn('Global state updated:', globalState);\n};\n","usedDeprecatedRules":[{"ruleId":"no-multi-spaces","replacedBy":["@stylistic/js/no-multi-spaces"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multi-spaces","url":"https://eslint.style/rules/js/no-multi-spaces"}}]}}]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/src/browser/document.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-multi-spaces","replacedBy":["@stylistic/js/no-multi-spaces"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multi-spaces","url":"https://eslint.style/rules/js/no-multi-spaces"}}]}}]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/src/browser/main.js","messages":[{"ruleId":"prefer-const","severity":1,"message":"'globalState' is never reassigned. Use 'const' instead.","line":1,"column":5,"nodeType":"Identifier","messageId":"useConst","endLine":1,"endColumn":16,"fix":{"range":[0,307],"text":"const globalState = {\n  blog: null, // Holds the fetched blog data\n  blogStatus: 'idle', // 'idle', 'loading', 'loaded', 'error'\n  blogError: null, // Stores any error during fetch\n  blogFetchPromise: null, // Tracks the ongoing fetch promise\n  temporary: {} // Holds data managed by toys like setTemporary\n};"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":59,"column":3,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":59,"endColumn":46,"fix":{"range":[1596,1599],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":63,"column":3,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":63,"endColumn":47,"fix":{"range":[1730,1733],"text":"let"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":3,"source":"let globalState = {\n  blog: null, // Holds the fetched blog data\n  blogStatus: 'idle', // 'idle', 'loading', 'loaded', 'error'\n  blogError: null, // Stores any error during fetch\n  blogFetchPromise: null, // Tracks the ongoing fetch promise\n  temporary: {} // Holds data managed by toys like setTemporary\n};\n\nimport { setupAudio } from './audio-controls.js';\nimport { initializeVisibleComponents, handleModuleError, initialiseModule } from './toys.js';\nimport { hideArticlesByClass, toggleHideLink } from './tags.js';\nimport { fetchAndCacheBlogData, getData, setData } from './data.js';\nimport {\n  getElementById,\n  getAudioElements,\n  querySelector,\n  removeControlsAttribute,\n  createElement,\n  createTextNode,\n  stopDefault,\n  playAudio,\n  pauseAudio,\n  addEventListener,\n  appendChild,\n  insertBefore,\n  log,\n  warn,\n  error,\n  addWarning,\n  getRandomNumber,\n  getCurrentTime,\n  hasNextSiblingClass,\n  removeNextSibling,\n  setTextContent\n} from './document.js';\n\n/**\n * Imports a module dynamically with success and error handling\n * @param {string} modulePath - Path to the module to import\n * @param {Function} onSuccess - Function to call when import succeeds\n * @param {Function} onError - Function to call when import fails\n */\nfunction importModule(modulePath, onSuccess, onError) {\n  import(modulePath).then(onSuccess).catch(onError);\n}\n\nconst createHandleClick = (link, className) => event => {\n  stopDefault(event);\n  toggleHideLink(\n    link,\n    className,\n    hasNextSiblingClass,\n    removeNextSibling,\n    createHideSpan\n  );\n};\n\nconst createHideSpan = (link, className) => {\n  var span = createElement(document, 'span');\n  span.classList.add('hide-span');\n  appendChild(span, document.createTextNode(\" (\"));\n\n  var hideLink = createElement(document, 'a');\n  hideLink.textContent = \"hide\";\n  addEventListener(hideLink, 'click', function(event) {\n    stopDefault(event);\n    hideArticlesByClass(\n      className,\n      tagName => document.getElementsByTagName(tagName),\n      (element, cls) => element.classList.contains(cls),\n      element => element.style.display = 'none'\n    );\n  });\n\n  appendChild(span, hideLink);\n  appendChild(span, document.createTextNode(\")\"));\n  insertBefore(link.parentNode, span, link.nextSibling);\n};\n\nfunction createEnv() {\n  return new Map([\n    [\"getRandomNumber\", getRandomNumber],\n    [\"getCurrentTime\", getCurrentTime],\n    [\"getData\", () => getData(globalState, fetch, log, error, warn)],\n    [\"setData\", (newData) => setData(newData, globalState, log, error)]\n  ]);\n}\n\nfunction createIntersectionObserver(article, modulePath, functionName) {\n  return new IntersectionObserver((entries, observer) =>\n    handleIntersectionEntries(entries, observer, modulePath, article, functionName), {\n    root: null,\n    threshold: 0.1\n  });\n}\n\nfunction handleIntersection(entry, observer, modulePath, article, functionName) {\n  if (entry.isIntersecting) {\n    const dom = { createElement, setTextContent, stopDefault, addWarning, addEventListener, querySelector };\n    importModule(\n      modulePath,\n      initialiseModule(article, functionName, globalState, createEnv, error, fetch, dom),\n      handleModuleError(modulePath, error)\n    );\n    observer.disconnect();\n  }\n}\n\nfunction handleIntersectionEntries(entries, observer, modulePath, article, functionName) {\n  entries.forEach(entry => handleIntersection(entry, observer, modulePath, article, functionName));\n}\n\n// Interactive components functionality\ninitializeVisibleComponents(\n  window, \n  document, \n  log, \n  warn, \n  getElementById, \n  createIntersectionObserver // Pass the function defined in main.js\n);\n\n// Tag filtering functionality\n\nconst handleTagLinks = () => {\n  const handleLink = link => {\n    const handleClassName = className => {\n      if (className.indexOf('tag-') === 0) {\n        const handleClick = createHandleClick(link, className);\n        addEventListener(link, 'click', handleClick);\n        return; // exit after first tag- match\n      }\n    };\n\n    Array.from(link.classList).forEach(handleClassName);\n  };\n\n  Array.from(document.getElementsByTagName('a')).forEach(handleLink);\n};\n\nhandleTagLinks();\n\n// Initial fetch of blog data when the script loads\nfetchAndCacheBlogData(globalState, fetch, log, error);\n\nsetupAudio(\n  document,\n  getAudioElements,\n  removeControlsAttribute,\n  createElement,\n  createTextNode,\n  stopDefault,\n  playAudio,\n  pauseAudio,\n  addEventListener,\n  appendChild,\n  insertBefore\n);","usedDeprecatedRules":[{"ruleId":"no-multi-spaces","replacedBy":["@stylistic/js/no-multi-spaces"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multi-spaces","url":"https://eslint.style/rules/js/no-multi-spaces"}}]}}]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/src/browser/tags.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-multi-spaces","replacedBy":["@stylistic/js/no-multi-spaces"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multi-spaces","url":"https://eslint.style/rules/js/no-multi-spaces"}}]}}]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/src/browser/toys.js","messages":[{"ruleId":"complexity","severity":1,"message":"Function 'handleParsedResult' has a complexity of 5. Maximum allowed is 2.","line":65,"column":1,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":70,"endColumn":2},{"ruleId":"curly","severity":1,"message":"Expected { after 'if' condition.","line":66,"column":46,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":66,"endColumn":59,"fix":{"range":[2416,2429],"text":"{return false;}"}},{"ruleId":"curly","severity":1,"message":"Expected { after 'if' condition.","line":67,"column":66,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":67,"endColumn":79,"fix":{"range":[2495,2508],"text":"{return false;}"}},{"ruleId":"complexity","severity":1,"message":"Function 'handleInputProcessing' has a complexity of 3. Maximum allowed is 2.","line":107,"column":1,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":119,"endColumn":2},{"ruleId":"complexity","severity":1,"message":"Function 'initializeVisibleComponents' has a complexity of 3. Maximum allowed is 2.","line":194,"column":8,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":209,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":2,"source":"/**\n * Creates an error handler for module loading errors\n * @param {string} modulePath - Path to the module that failed to load\n * @param {Function} errorFn - Error logging function\n * @returns {Function} Error handler function\n */\nexport function handleModuleError(modulePath, errorFn) {\n  return (e) => {\n    errorFn('Error loading module ' + modulePath + ':', e);\n  };\n}\n\n/**\n * Creates a module initializer function that will be called when a dynamic import completes\n * @param {HTMLElement} article - The article element containing the toy\n * @param {string} functionName - The name of the exported function to use from the module\n * @param {object} globalState - The shared application state\n * @param {Function} createEnv - Function to create the environment map for the toy\n * @param {Function} error - Function for logging errors\n * @param {Function} fetch - Function for making HTTP requests\n * @param {object} dom - Object containing DOM functions\n * @returns {Function} A function that takes a module and initializes the interactive component\n */\nexport function initialiseModule(article, functionName, globalState, createEnv, error, fetch, dom) {\n  return (module) => {\n    const processingFunction = module[functionName];\n    initializeInteractiveComponent(\n      article,\n      processingFunction,\n      globalState,\n      createEnv,\n      error,\n      fetch,\n      dom\n    );\n  };\n}\n\n/**\n * Enable controls and update status message for an interactive component\n * @param {HTMLInputElement} inputElement\n * @param {HTMLButtonElement} submitButton\n * @param {HTMLElement} outputElement\n */\nexport function enableInteractiveControls(inputElement, submitButton, outputElement) {\n  inputElement.disabled = false;\n  submitButton.disabled = false;\n  outputElement.textContent = 'Ready for input';\n  outputElement.parentElement.classList.remove('warning');\n}\n\nfunction handleRequestResponse(url, outputElement, errorFn, fetchFn, dom) {\n  fetchFn(url)\n    .then(response => response.text())\n    .then(body => {\n      dom.setTextContent(outputElement, body);\n    })\n    .catch(fetchError => {\n      errorFn('Error fetching request URL:', fetchError);\n      dom.setTextContent(outputElement, 'Error fetching URL: ' + fetchError.message);\n      dom.addWarningFn(outputElement);\n    });\n}\n\nfunction handleParsedResult(parsed, outputElement, errorFn, fetchFn, dom) {\n  if (!parsed || typeof parsed !== 'object') return false;\n  if (!parsed.request || typeof parsed.request.url !== 'string') return false;\n  handleRequestResponse(parsed.request.url, outputElement, errorFn, fetchFn, dom);\n  return true;\n}\n\n/**\n * Parses the JSON result and returns the parsed object or null if parsing fails.\n * @param {string} result - The JSON string to parse.\n * @returns {object|null} The parsed object or null.\n */\nfunction parseJSONResult(result) {\n  try {\n    return JSON.parse(result);\n  } catch {\n    return null;\n  }\n}\n\n/**\n * Creates a submit handler function for an interactive toy.\n * @param {HTMLInputElement} inputElement - The input field.\n * @param {HTMLElement} outputElement - The element to display output/errors.\n * @param {HTMLElement} outputParent - The parent element of the output element.\n * @param {object} globalState - The shared application state.\n * @param {Function} processingFunction - The toy's core logic function.\n * @param {Function} stopDefault - Function to prevent default event action.\n * @param {Function} createEnv - Function to create the environment map for the toy.\n * @param {Function} errorFn - Function for logging errors.\n * @param {Function} addWarningFn - Function to add a warning style to the output.\n * @param {Function} fetchFn - Function to fetch data from a URL.\n * @param {Function} createElement - Function to create an element.\n * @param {Function} setTextContent - Function to set the text content of an element.\n * @returns {Function} An event handler function.\n */\nfunction handleInputError(outputElement, errorFn, dom, e) {\n  errorFn('Error processing input:', e);\n  dom.setTextContent(outputElement, 'Error: ' + e.message);\n  dom.addWarningFn(outputElement);\n}\n\nfunction handleInputProcessing(inputElement, outputElement, globalState, processingFunction, createEnv, errorFn, fetchFn, dom) {\n  const inputValue = inputElement.value;\n  try {\n    const env = createEnv(globalState);\n    const result = processingFunction(inputValue, env);\n    const parsed = parseJSONResult(result);\n    if (!handleParsedResult(parsed, outputElement, errorFn, fetchFn, dom)) {\n      dom.setTextContent(outputElement, result);\n    }\n  } catch (e) {\n    handleInputError(outputElement, errorFn, dom, e);\n  }\n}\n\nexport const createHandleSubmit = (inputElement, outputElement, outputParent, globalState, processingFunction, createEnv, errorFn, fetchFn, dom) => (event) => {\n  if (event) {\n    dom.stopDefault(event);\n  }\n  handleInputProcessing(inputElement, outputElement, globalState, processingFunction, createEnv, errorFn, fetchFn, dom);\n};\n\n/**\n * Initializes the interactive elements (input, button, output) within a toy's article element.\n * Sets up event listeners and initial state.\n * @param {HTMLElement} article - The article element containing the toy.\n * @param {Function} processingFunction - The toy's core logic function.\n * @param {object} globalState - The shared application state.\n * @param {Function} createEnvFn - Function to create the environment map for the toy.\n * @param {Function} errorFn - Function for logging errors.\n * @param {Function} fetchFn - Function for making HTTP requests.\n * @param {object} dom - Object containing DOM functions.\n */\nfunction disableInputAndButton(inputElement, submitButton) {\n  inputElement.disabled = true;\n  submitButton.disabled = true;\n}\n\nexport function initializeInteractiveComponent(article, processingFunction, globalState, createEnvFn, errorFn, fetchFn, dom) {\n  // Get the elements within the article\n  const inputElement = dom.querySelector(article, 'input');\n  const submitButton = dom.querySelector(article, 'button');\n  const outputElement = dom.querySelector(article, 'p.output');\n  const outputParent = dom.querySelector(article, 'div.output'); // Get the parent element\n  \n  // Disable input and submit during initialization\n  disableInputAndButton(inputElement, submitButton);\n  \n  // Update message to show JS is running\n  outputElement.textContent = 'Initialising...';\n\n  // Create the submit handler using the function from this module\n  const handleSubmit = createHandleSubmit(inputElement, outputElement, outputParent, globalState, processingFunction, createEnvFn, errorFn, fetchFn, dom);\n\n  // Add event listener to the submit button\n  dom.addEventListener(submitButton, 'click', handleSubmit);\n  \n  // Add event listener for Enter key in the input field\n  dom.addEventListener(inputElement, 'keypress', createHandleKeyPress(handleSubmit));\n\n  // Enable controls when initialization is complete using the function from this module\n  enableInteractiveControls(inputElement, submitButton, outputElement);\n}\n\n/**\n * Returns a keypress event handler that triggers submit on Enter key.\n * @param {Function} handleSubmit - The submit handler function to call on Enter key.\n * @returns {Function} Keypress event handler.\n */\nfunction createHandleKeyPress(handleSubmit) {\n  return (event) => {\n    if (event.key === 'Enter') {\n      handleSubmit(event);\n    }\n  };\n}\n\n/**\n * Finds all interactive components registered on the window and sets up\n * IntersectionObservers (via the provided creator function) to lazy-load\n * and initialize them when they enter the viewport.\n * @param {Window} win - The window object.\n * @param {Document} doc - The document object.\n * @param {Function} logFn - Logging function.\n * @param {Function} warnFn - Warning function.\n * @param {Function} getElementByIdFn - Function to get element by ID.\n * @param {Function} createIntersectionObserverFn - Function that creates an IntersectionObserver for a given article, module path, and function name.\n */\nexport function initializeVisibleComponents(win, doc, logFn, warnFn, getElementByIdFn, createIntersectionObserverFn) {\n  if (!win.interactiveComponents || win.interactiveComponents.length === 0) {\n    warnFn('No interactive components found to initialize');\n    return;\n  }\n  logFn('Initializing', win.interactiveComponents.length, 'interactive components via IntersectionObserver');\n  win.interactiveComponents.forEach(component => {\n    const article = getElementByIdFn(doc, component.id);\n    if (!article) {\n      warnFn(`Could not find article element with ID: ${component.id} for component initialization.`);\n      return;\n    }\n    const observer = createIntersectionObserverFn(article, component.modulePath, component.functionName);\n    observer.observe(article);\n  });\n}\n\n/**\n * Helper function needed by getData\n */\nexport const getDeepStateCopy = (globalState) => JSON.parse(JSON.stringify(globalState));\n","usedDeprecatedRules":[{"ruleId":"no-multi-spaces","replacedBy":["@stylistic/js/no-multi-spaces"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multi-spaces","url":"https://eslint.style/rules/js/no-multi-spaces"}}]}}]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/src/generator/copy.js","messages":[{"ruleId":"complexity","severity":1,"message":"Function 'findJsFiles' has a complexity of 6. Maximum allowed is 2.","line":26,"column":1,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":38,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env node\n\nimport fs from 'fs';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\n// Get __dirname equivalent in ES module scope\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// Define base directories\nconst projectRoot = path.resolve(__dirname, '../..'); // Adjust based on script location\nconst srcDir = path.resolve(projectRoot, 'src');\nconst publicDir = path.resolve(projectRoot, 'public');\nconst srcToysDir = path.resolve(srcDir, 'toys');\nconst srcBrowserDir = path.resolve(srcDir, 'browser');\n\n// Ensure public directory exists\nif (!fs.existsSync(publicDir)) {\n  fs.mkdirSync(publicDir, { recursive: true });\n}\n\n// --- Copy Toy Files --- \n\n// Function to recursively find JS files in the toys directory\nfunction findJsFiles(dir) {\n  let jsFiles = [];\n  const entries = fs.readdirSync(dir, { withFileTypes: true });\n  for (const entry of entries) {\n    const fullPath = path.join(dir, entry.name);\n    if (entry.isDirectory()) {\n      jsFiles = jsFiles.concat(findJsFiles(fullPath));\n    } else if (entry.isFile() && entry.name.endsWith('.js') && !entry.name.endsWith('.test.js')) {\n      jsFiles.push(fullPath);\n    }\n  }\n  return jsFiles;\n}\n\n// Find all JS files in src/toys\nconst toyFiles = findJsFiles(srcToysDir);\n\n// Copy each toy file to the corresponding path in public\ntoyFiles.forEach(filePath => {\n  const relativePath = path.relative(srcToysDir, filePath);\n  const destPath = path.join(publicDir, relativePath);\n  const destDir = path.dirname(destPath);\n\n  // Ensure the destination directory exists\n  if (!fs.existsSync(destDir)) {\n    fs.mkdirSync(destDir, { recursive: true });\n  }\n\n  // Copy the file\n  fs.copyFileSync(filePath, destPath);\n  console.log(`Copied: ${filePath} -> ${destPath}`);\n});\n\nconsole.log('Toy files copied successfully!');\n\n// --- Copy Specific Assets --- \n\nconst assetsToCopy = [\n  { src: path.join(srcDir, 'blog.json'), dest: path.join(publicDir, 'blog.json') },\n  { src: path.join(srcBrowserDir, 'data.js'), dest: path.join(publicDir, 'data.js') },\n  { src: path.join(srcBrowserDir, 'main.js'), dest: path.join(publicDir, 'main.js') },\n  { src: path.join(srcBrowserDir, 'toys.js'), dest: path.join(publicDir, 'toys.js') },\n  { src: path.join(srcBrowserDir, 'audio-controls.js'), dest: path.join(publicDir, 'audio-controls.js') },\n  { src: path.join(srcBrowserDir, 'document.js'), dest: path.join(publicDir, 'document.js') },\n  { src: path.join(srcBrowserDir, 'tags.js'), dest: path.join(publicDir, 'tags.js') }\n];\n\nassetsToCopy.forEach(asset => {\n  if (fs.existsSync(asset.src)) {\n    fs.copyFileSync(asset.src, asset.dest);\n    console.log(`Copied: ${asset.src} -> ${asset.dest}`);\n  } else {\n    console.warn(`Warning: Asset not found, skipping copy: ${asset.src}`);\n  }\n});\n\nconsole.log('Specific assets copied successfully!');\n","usedDeprecatedRules":[{"ruleId":"no-multi-spaces","replacedBy":["@stylistic/js/no-multi-spaces"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multi-spaces","url":"https://eslint.style/rules/js/no-multi-spaces"}}]}}]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/src/generator/full-width.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-multi-spaces","replacedBy":["@stylistic/js/no-multi-spaces"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multi-spaces","url":"https://eslint.style/rules/js/no-multi-spaces"}}]}}]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/src/generator/generator.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-multi-spaces","replacedBy":["@stylistic/js/no-multi-spaces"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multi-spaces","url":"https://eslint.style/rules/js/no-multi-spaces"}}]}}]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/src/generator/head.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-multi-spaces","replacedBy":["@stylistic/js/no-multi-spaces"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multi-spaces","url":"https://eslint.style/rules/js/no-multi-spaces"}}]}}]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/src/generator/html.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-multi-spaces","replacedBy":["@stylistic/js/no-multi-spaces"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multi-spaces","url":"https://eslint.style/rules/js/no-multi-spaces"}}]}}]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/src/generator/interactive.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-multi-spaces","replacedBy":["@stylistic/js/no-multi-spaces"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multi-spaces","url":"https://eslint.style/rules/js/no-multi-spaces"}}]}}]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/src/generator/styles.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-multi-spaces","replacedBy":["@stylistic/js/no-multi-spaces"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multi-spaces","url":"https://eslint.style/rules/js/no-multi-spaces"}}]}}]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/src/generator/title.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-multi-spaces","replacedBy":["@stylistic/js/no-multi-spaces"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multi-spaces","url":"https://eslint.style/rules/js/no-multi-spaces"}}]}}]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/src/presenters/paragraph.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-multi-spaces","replacedBy":["@stylistic/js/no-multi-spaces"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multi-spaces","url":"https://eslint.style/rules/js/no-multi-spaces"}}]}}]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/src/test/toys/2025-04-06/ticTacToe.test.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-multi-spaces","replacedBy":["@stylistic/js/no-multi-spaces"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multi-spaces","url":"https://eslint.style/rules/js/no-multi-spaces"}}]}}]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/src/toys/2024-10-02/hello.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-multi-spaces","replacedBy":["@stylistic/js/no-multi-spaces"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multi-spaces","url":"https://eslint.style/rules/js/no-multi-spaces"}}]}}]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/src/toys/2025-03-19/identity.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-multi-spaces","replacedBy":["@stylistic/js/no-multi-spaces"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multi-spaces","url":"https://eslint.style/rules/js/no-multi-spaces"}}]}}]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/src/toys/2025-03-21/booleanCoercer.js","messages":[{"ruleId":"curly","severity":1,"message":"Expected { after 'if' condition.","line":2,"column":35,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":2,"endColumn":48,"fix":{"range":[71,84],"text":"{return input;}"}},{"ruleId":"curly","severity":1,"message":"Expected { after 'if' condition.","line":20,"column":34,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":20,"endColumn":51,"fix":{"range":[745,762],"text":"{return undefined;}"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"function tryBooleanCoercion(input) {\n  if (typeof input === 'boolean') return input;\n  return normalizeBooleanString(input);\n}\n\n/**\n * Coerces input to a boolean value if possible.\n * Returns a string representation of an object with a 'value' property if coercion is successful,\n * or a string representation of an empty object if coercion fails.\n *\n * @param {any} input - The value to coerce to boolean\n * @returns {string} - String representation of object with 'value' property if coercion successful, '{}' if not\n */\nexport function coerceToBoolean(input) {\n  const value = tryBooleanCoercion(input);\n  return value !== undefined ? `{ value: ${value} }` : '{}';\n}\n\nfunction normalizeBooleanString(input) {\n  if (typeof input !== 'string') return undefined;\n\n  return parseBooleanString(input.toLowerCase());\n}\n\nfunction parseBooleanString(str) {\n  return { true: true, false: false }[str];\n}","usedDeprecatedRules":[{"ruleId":"no-multi-spaces","replacedBy":["@stylistic/js/no-multi-spaces"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multi-spaces","url":"https://eslint.style/rules/js/no-multi-spaces"}}]}}]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/src/toys/2025-03-21/italics.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-multi-spaces","replacedBy":["@stylistic/js/no-multi-spaces"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multi-spaces","url":"https://eslint.style/rules/js/no-multi-spaces"}}]}}]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/src/toys/2025-03-26/prettyFloat.js","messages":[{"ruleId":"curly","severity":1,"message":"Expected { after 'if' condition.","line":4,"column":23,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":4,"endColumn":33,"fix":{"range":[143,153],"text":"{return \"\";}"}},{"ruleId":"curly","severity":1,"message":"Expected { after 'if' condition.","line":11,"column":24,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":11,"endColumn":38,"fix":{"range":[343,357],"text":"{return simple;}"}},{"ruleId":"curly","severity":1,"message":"Expected { after 'if' condition.","line":22,"column":33,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":22,"endColumn":45,"fix":{"range":[625,637],"text":"{return null;}"}},{"ruleId":"complexity","severity":1,"message":"Function 'handleSimpleCases' has a complexity of 3. Maximum allowed is 2.","line":39,"column":1,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":44,"endColumn":2},{"ruleId":"curly","severity":1,"message":"Expected { after 'if' condition.","line":40,"column":30,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":40,"endColumn":40,"fix":{"range":[1069,1079],"text":"{return \"\";}"}},{"ruleId":"curly","severity":1,"message":"Expected { after 'if' condition.","line":42,"column":20,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":42,"endColumn":39,"fix":{"range":[1146,1165],"text":"{return zeroVariant;}"}},{"ruleId":"prefer-const","severity":1,"message":"'A' is never reassigned. Use 'const' instead.","line":67,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":67,"endColumn":8,"fix":{"range":[1618,1646],"text":"const A = num.toPrecision(17);"}},{"ruleId":"curly","severity":1,"message":"Expected { after 'if' condition.","line":88,"column":32,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":88,"endColumn":42,"fix":{"range":[2238,2248],"text":"{return {};}"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":7,"source":"function buildDecomposedResult(num) {\n  const A = formatDecimal(num);\n  const decomposition = getIEEEDecomposition(num);\n  if (!decomposition) return \"\";\n  return formatFloatDecomposition(A, decomposition);\n}\n\nexport function decomposeFloat(input) {\n  const num = Number(input);\n  const simple = handleSimpleCases(num);\n  if (simple !== null) return simple;\n  return buildDecomposedResult(num);\n}\n\nfunction getZeroVariantResult(num) {\n  const result = isZeroVariant(num);\n  return result !== null ? result : null;\n}\n\nfunction getIEEEDecomposition(num) {\n  const parts = decomposeIEEE754(num);\n  if (!isValidIEEEParts(parts)) return null;\n  return getSignificandAndExponent(parts);\n}\n\nfunction formatFloatDecomposition(decimal, { B, C }) {\n  return `${decimal} (${B.toString()} × 2^${C.toString()})`;\n}\n\nfunction getZeroVariantString(num) {\n  return getZeroVariantResult(num);\n}\n\nfunction resolveZeroVariant(num) {\n  const zeroResult = getZeroVariantString(num);\n  return zeroResult ? zeroResult : null;\n}\n\nfunction handleSimpleCases(num) {\n  if (!Number.isFinite(num)) return \"\";\n  const zeroVariant = resolveZeroVariant(num);\n  if (zeroVariant) return zeroVariant;\n  return null;\n}\n\nfunction isPositiveZero(n) {\n  return Object.is(n, 0);\n}\n\nfunction isNegativeZero(n) {\n  return Object.is(n, -0);\n}\n\nfunction isPositiveZeroResult(num) {\n  return isPositiveZero(num) ? \"0 (0 × 2^0)\" : null;\n}\n\nfunction isNegativeZeroResult(num) {\n  return isNegativeZero(num) ? \"0 (-0 × 2^0)\" : null;\n}\n\nfunction isZeroVariant(num) {\n  return isPositiveZeroResult(num) || isNegativeZeroResult(num);\n}\n\nfunction formatDecimal(num) {\n  let A = num.toPrecision(17);\n  return A.includes('.') ? A.replace(/\\.?0+$/, '') : A;\n}\n\nfunction hasIEEEFields(parts) {\n  return ['sign', 'mantissa', 'exponent'].every(key => key in parts);\n}\n\nfunction isValidIEEEParts(parts) {\n  return Boolean(parts) && hasIEEEFields(parts);\n}\n\nfunction getSignificandAndExponent({ sign, mantissa, exponent }) {\n  const signValue = sign === 0 ? 1n : -1n;\n  const fullSignificand = (1n << 52n) | BigInt(mantissa);\n  const B = signValue * fullSignificand;\n  const C = BigInt(exponent - 1023) - 52n;\n  return { B, C };\n}\n\nfunction decomposeIEEE754(value) {\n  if (!Number.isFinite(value)) return {};\n\n  const bits = getFloat64Bits(value);\n  return extractIEEEComponents(bits);\n}\n\nfunction getFloat64Bits(value) {\n  const buffer = new ArrayBuffer(8);\n  const floatView = new Float64Array(buffer);\n  const byteView = new Uint8Array(buffer);\n\n  floatView[0] = value;\n\n  let bits = 0n;\n  for (let i = 7; i >= 0; i--) {\n    bits = (bits << 8n) | BigInt(byteView[i]);\n  }\n\n  return bits;\n}\n\nfunction extractIEEEComponents(bits) {\n  const sign = Number((bits >> 63n) & 1n);\n  const exponentBits = (bits >> 52n) & 0x7FFn;\n  const mantissaBits = bits & 0xFFFFFFFFFFFFFn;\n\n  if (exponentBits === 0n) {\n    return {};\n  }\n\n  return {\n    sign,\n    mantissa: Number(mantissaBits),\n    exponent: Number(exponentBits),\n  };\n}","usedDeprecatedRules":[{"ruleId":"no-multi-spaces","replacedBy":["@stylistic/js/no-multi-spaces"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multi-spaces","url":"https://eslint.style/rules/js/no-multi-spaces"}}]}}]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/src/toys/2025-03-28/rand.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-multi-spaces","replacedBy":["@stylistic/js/no-multi-spaces"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multi-spaces","url":"https://eslint.style/rules/js/no-multi-spaces"}}]}}]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/src/toys/2025-03-29/fishingGame.js","messages":[{"ruleId":"complexity","severity":1,"message":"Function 'getBaitData' has a complexity of 3. Maximum allowed is 2.","line":24,"column":1,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":30,"endColumn":2},{"ruleId":"curly","severity":1,"message":"Expected { after 'if' condition.","line":26,"column":47,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":26,"endColumn":94,"fix":{"range":[719,766],"text":"{return getRecognizedBait(baitKey, baitOptions);}"}},{"ruleId":"curly","severity":1,"message":"Expected { after 'if' condition.","line":41,"column":15,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":41,"endColumn":61,"fix":{"range":[1246,1292],"text":"{throw new Error(`Unrecognized hour: ${hour}`);}"}},{"ruleId":"curly","severity":1,"message":"Expected { after 'if' condition.","line":53,"column":15,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":53,"endColumn":63,"fix":{"range":[1629,1677],"text":"{throw new Error(`Unrecognized month: ${month}`);}"}},{"ruleId":"curly","severity":1,"message":"Expected { after 'if' condition.","line":144,"column":32,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":144,"endColumn":63,"fix":{"range":[4657,4688],"text":"{return baitDataOrError.message;}"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":4,"source":"function isRecognizedBait(baitKey, baitOptions) {\n  return baitKey in baitOptions;\n}\n\nfunction isEmptyBait(baitKey) {\n  return baitKey.length === 0;\n}\n\nfunction getDefaultBaitResponse(moodDescription) {\n  return {\n    isError: true,\n    message: `You cast your line with nothing but hesitation. Without any bait, the waters remain undisturbed in their ${moodDescription}.`\n  };\n}\n\nfunction getRecognizedBait(baitKey, baitOptions) {\n  return baitOptions[baitKey];\n}\n\nfunction getUnrecognizedBait() {\n  return { modifier: 0, description: \"an unconventional bait\" };\n}\n\nfunction getBaitData(input, baitOptions, moodDescription) {\n  const baitKey = input.trim().toLowerCase();\n  if (isRecognizedBait(baitKey, baitOptions)) return getRecognizedBait(baitKey, baitOptions);\n  return isEmptyBait(baitKey)\n    ? getDefaultBaitResponse(moodDescription)\n    : getUnrecognizedBait();\n}\n\nfunction getTimeOfDay(hour) {\n  const ranges = [\n    { start: 5, end: 12, label: \"morning\" },\n    { start: 12, end: 17, label: \"afternoon\" },\n    { start: 17, end: 21, label: \"evening\" },\n    { start: 21, end: 24, label: \"night\" },\n    { start: 0, end: 5, label: \"night\" },\n  ];\n  const match = ranges.find(({ start, end }) => hour >= start && hour < end);\n  if (!match) throw new Error(`Unrecognized hour: ${hour}`);\n  return match.label;\n}\n\nfunction getSeason(month) {\n  const ranges = [\n    { months: [11, 0, 1], label: \"winter\" },\n    { months: [2, 3, 4], label: \"spring\" },\n    { months: [5, 6, 7], label: \"summer\" },\n    { months: [8, 9, 10], label: \"fall\" },\n  ];\n  const match = ranges.find(({ months }) => months.includes(month));\n  if (!match) throw new Error(`Unrecognized month: ${month}`);\n  return match.label;\n}\n\nfunction getMoodDescription(season, timeOfDay) {\n  const seasonDescriptions = {\n    winter: \"crisp, icy waters\",\n    spring: \"bubbling, fresh currents\",\n    summer: \"warm, shimmering waves\",\n    fall: \"cool, reflective ponds\",\n  };\n  const timeDescriptions = {\n    morning: \"as dawn breaks with promise\",\n    afternoon: \"under a vibrant sun\",\n    evening: \"in the glow of twilight\",\n    night: \"beneath a silent, starry sky\",\n  };\n  return `${seasonDescriptions[season]} ${timeDescriptions[timeOfDay]}`;\n}\n\nfunction isSilentCatch(chance) {\n  return chance < 0.3;\n}\n\nfunction isCommonCatch(chance) {\n  return chance < 0.6;\n}\n\nfunction isTroutCatch(chance) {\n  return chance < 0.85;\n}\n\nconst fishingOutcomes = [\n  {\n    check: isSilentCatch,\n    describe: (bait, mood) =>\n      `the water stays silent. Despite your use of ${bait}, no fish disturb the ${mood}.`,\n  },\n  {\n    check: isCommonCatch,\n    describe: (bait, mood) =>\n      `a common carp surfaces gently, a modest reward for your effort with ${bait}, set against ${mood}.`,\n  },\n  {\n    check: isTroutCatch,\n    describe: (bait, mood) =>\n      `a glimmering trout appears briefly, its shimmer echoing the beauty of ${mood}. Your choice of ${bait} worked well.`,\n  },\n  {\n    check: () => true,\n    describe: (bait, mood) =>\n      `in a burst of brilliance, a legendary golden fish leaps forth—its radiance matching the splendor of ${mood}. Your ${bait} has yielded a prize.`,\n  },\n];\n\nfunction getFishingOutcome(effectiveChance, baitDescription, moodDescription) {\n  return fishingOutcomes.find(({ check }) => check(effectiveChance)).describe(baitDescription, moodDescription);\n}\n\nfunction getBaitOptions() {\n  return {\n    \"worm\": { modifier: 0.0, description: \"a wriggling worm\" },\n    \"insect\": { modifier: 0.05, description: \"a lively insect\" },\n    \"bread\": { modifier: -0.05, description: \"a slice of bread\" },\n    \"cheese\": { modifier: 0.1, description: \"a pungent piece of cheese\" },\n    \"shiny bait\": { modifier: 0.15, description: \"a glittering lure\" },\n    \"doughnut\": { modifier: 0.2, description: \"a tempting doughnut\" },\n    \"grub\": { modifier: 0.05, description: \"a succulent grub\" },\n    \"minnow\": { modifier: 0.1, description: \"a darting minnow\" },\n    \"sausage\": { modifier: 0.2, description: \"a savory sausage\" },\n    \"maggot\": { modifier: -0.1, description: \"a squirming maggot\" },\n  };\n}\n\nfunction getTimeContext(getCurrentTime) {\n  const date = new Date(getCurrentTime());\n  const month = date.getMonth();\n  const hour = date.getHours();\n  const season = getSeason(month);\n  const timeOfDay = getTimeOfDay(hour);\n  return { season, timeOfDay };\n}\n\nfunction fishingGame(input, env) {\n  const { season, timeOfDay } = getTimeContext(env.get(\"getCurrentTime\"));\n\n  const moodDescription = getMoodDescription(season, timeOfDay);\n\n  const baitOptions = getBaitOptions();\n\n  const baitDataOrError = getBaitData(input, baitOptions, moodDescription);\n  if (baitDataOrError.isError) return baitDataOrError.message;\n  const baitData = baitDataOrError;\n\n  const getRandomNumber = env.get(\"getRandomNumber\");\n  const baseChance = getRandomNumber();\n  const effectiveChance = Math.min(1, Math.max(0, baseChance + baitData.modifier));\n\n  const outcome = getFishingOutcome(effectiveChance, baitData.description, moodDescription);\n\n  return `Casting your line with ${baitData.description}, you await a catch. ${outcome}`;\n}\n\nexport { fishingGame };","usedDeprecatedRules":[{"ruleId":"no-multi-spaces","replacedBy":["@stylistic/js/no-multi-spaces"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multi-spaces","url":"https://eslint.style/rules/js/no-multi-spaces"}}]}}]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/src/toys/2025-03-29/get.js","messages":[{"ruleId":"complexity","severity":1,"message":"Function 'get' has a complexity of 16. Maximum allowed is 2.","line":7,"column":8,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":55,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Retrieves a value from data provided by the environment using the input as a path.\n * @param {string} input - The path (e.g., 'key1.key2.0.key3') to look up in the data.\n * @param {Map<string, Function>} env - Environment map containing dependencies. Expected: 'getData'.\n * @returns {string} The JSON stringified value found at the path, or an error message.\n */\nexport function get(input, env) {\n  if (!env || typeof env.get !== 'function') {\n    return \"Error: 'env' Map with 'get' method is required.\";\n  }\n  const getData = env.get('getData');\n  if (typeof getData !== 'function') {\n    return \"Error: 'getData' function not found in env.\";\n  }\n\n  try {\n    const data = getData();\n    if (input.trim() === '') {\n      return JSON.stringify(data);\n    }\n    // Basic check if initial data is an object or array\n    if (data === null || (typeof data !== 'object' && !Array.isArray(data))) {\n        return \"Error: 'getData' did not return a valid object or array.\";\n    }\n\n    // Split the input path by dots\n    const pathSegments = input.split('.');\n    let currentValue = data;\n    let currentPath = '';\n\n    // Traverse the path\n    for (const segment of pathSegments) {\n      currentPath = currentPath ? `${currentPath}.${segment}` : segment;\n      if (currentValue === null || typeof currentValue !== 'object') {\n        return `Error: Cannot access property '${segment}' on non-object value at path '${currentPath.substring(0, currentPath.lastIndexOf('.') !== -1 ? currentPath.lastIndexOf('.') : 0)}'. Value is: ${JSON.stringify(currentValue)}`;\n      }\n\n      if (Object.prototype.hasOwnProperty.call(currentValue, segment)) {\n        currentValue = currentValue[segment];\n      } else {\n        return `Error: Path segment '${segment}' not found at '${currentPath}'. Available keys/indices: ${Object.keys(currentValue).join(', ')}`;\n      }\n    }\n\n    // Return a string representation of the final value\n    try {\n      return JSON.stringify(currentValue);\n    } catch (stringifyError) {\n        return `Error stringifying final value at path \"${input}\": ${stringifyError.message}`;\n    }\n  } catch (error) {\n      // Catch errors from getData() execution or other unexpected issues\n      return `Error during data retrieval or path traversal for \"${input}\": ${error.message}`;\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-multi-spaces","replacedBy":["@stylistic/js/no-multi-spaces"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multi-spaces","url":"https://eslint.style/rules/js/no-multi-spaces"}}]}}]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/src/toys/2025-03-29/setTemporary.js","messages":[{"ruleId":"complexity","severity":1,"message":"Function 'isObject' has a complexity of 3. Maximum allowed is 2.","line":6,"column":1,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":8,"endColumn":2},{"ruleId":"complexity","severity":1,"message":"Function 'deepMerge' has a complexity of 4. Maximum allowed is 2.","line":19,"column":1,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":43,"endColumn":2},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 3. Maximum allowed is 2.","line":22,"column":33,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":34,"endColumn":6},{"ruleId":"complexity","severity":1,"message":"Function 'setTemporary' has a complexity of 10. Maximum allowed is 2.","line":52,"column":8,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":102,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Checks if an item is a plain object (not an array or null).\n * @param {*} item - The item to check.\n * @returns {boolean}\n */\nfunction isObject(item) {\n  return (item && typeof item === 'object' && !Array.isArray(item));\n}\n\n/**\n * Deeply merges two objects. Creates a new object with merged properties.\n * Properties in source will overwrite properties in target, unless both\n * properties are plain objects, in which case they are recursively merged.\n * Arrays and other types are overwritten, not merged.\n * @param {object} target - The target object.\n * @param {object} source - The source object.\n * @returns {object} A new object representing the merged result.\n */\nfunction deepMerge(target, source) {\n  const output = { ...target }; // Start with a shallow copy of the target\n  if (isObject(target) && isObject(source)) {\n    Object.keys(source).forEach(key => {\n      const targetValue = target[key];\n      const sourceValue = source[key];\n      if (isObject(targetValue) && isObject(sourceValue)) {\n        // If both target and source values are objects, recursively merge\n        output[key] = deepMerge(targetValue, sourceValue);\n      } else {\n        // Otherwise, overwrite with the source value\n        // (If sourceValue is an object, this assignment handles the case\n        // where target[key] wasn't an object or didn't exist)\n        output[key] = sourceValue;\n      }\n    });\n  } else if (isObject(source)) {\n      // If target is not an object but source is, return a shallow copy of source\n      // (or deep copy if required, but shallow should suffice here as we merge onto it)\n      return { ...source };\n  }\n  // If source is not an object, the initial shallow copy of target is returned\n  // or target itself if it wasn't an object either (though initial checks prevent this)\n  return output;\n}\n\n/**\n * Parses input as JSON, deep merges it into the 'temporary' object obtained via env.getData(),\n * and then passes the entire modified data structure back to env.setData().\n * @param {string} input - A JSON string to parse and merge.\n * @param {Map<string, Function>} env - Environment map. Expected: 'getData()', 'setData(data)'.\n * @returns {string} A confirmation message or an error message.\n */\nexport function setTemporary(input, env) {\n  let inputJson;\n  try {\n    inputJson = JSON.parse(input);\n  } catch (parseError) {\n    return `Error: Invalid JSON input. ${parseError.message}`;\n  }\n\n  if (!isObject(inputJson)) { // Use the helper\n      return \"Error: Input JSON must be a plain object.\";\n  }\n\n  if (!env || typeof env.get !== 'function') {\n    return \"Error: 'env' Map with 'get' method is required.\";\n  }\n  const getData = env.get('getData');\n  const setData = env.get('setData');\n  if (typeof getData !== 'function') {\n    return \"Error: 'getData' function not found in env.\";\n  }\n  if (typeof setData !== 'function') {\n      return \"Error: 'setData' function not found in env.\";\n  }\n\n  try {\n    const currentData = getData(); \n\n    if (!isObject(currentData)) { // Use the helper\n        return \"Error: 'getData' did not return a valid object.\";\n    }\n\n    // Deep clone currentData to create newData - JSON method is simple but has limitations (e.g., with Dates, Functions)\n    // For this use case, it should be acceptable.\n    const newData = JSON.parse(JSON.stringify(currentData));\n\n    // Ensure the 'temporary' key exists and is an object in the new copy\n    if (!isObject(newData.temporary)) {\n        newData.temporary = {}; \n    }\n\n    // Perform the deep merge\n    newData.temporary = deepMerge(newData.temporary, inputJson);\n\n    setData(newData);\n\n    return `Success: Temporary data deep merged.`; \n\n  } catch (error) {\n    return `Error updating temporary data: ${error.message}`;\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-multi-spaces","replacedBy":["@stylistic/js/no-multi-spaces"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multi-spaces","url":"https://eslint.style/rules/js/no-multi-spaces"}}]}}]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/src/toys/2025-03-30/cyberpunkAdventure.js","messages":[{"ruleId":"complexity","severity":1,"message":"Function 'handleHub' has a complexity of 4. Maximum allowed is 2.","line":19,"column":1,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":41,"endColumn":2},{"ruleId":"complexity","severity":1,"message":"Function 'handleTransportTrade' has a complexity of 3. Maximum allowed is 2.","line":50,"column":1,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":69,"endColumn":2},{"ruleId":"complexity","severity":1,"message":"Function 'cyberpunkAdventure' has a complexity of 18. Maximum allowed is 2.","line":93,"column":8,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":164,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"function handleHackerDoor(lowerInput, nextInventory, nextVisited) {\n  if (lowerInput.includes(\"zero\")) {\n    const output = `> Password accepted. Inside, a rogue AI offers you a cracked implant.`;\n    nextInventory.push(\"cracked implant\");\n    nextVisited.add(\"hacker\");\n    return { output, nextState: \"hub\", nextInventory, nextVisited };\n  } else {\n    return { output: `> Hint: the password is a number and a name...`, nextState: \"hacker:door\", nextInventory, nextVisited };\n  }\n}\n\nfunction handleIntro({ name, time }) {\n  return {\n    output: `> ${time}\\n> ${name}, you're in the Neon Market. Lights hum. Faces blur.\\n> You see paths to: Hacker Den, Transport Hub, and Back Alley.\\n> Where do you go? (hacker / transport / alley)`,\n    nextState: \"hub\"\n  };\n}\n\nfunction handleHub({ lowerInput }) {\n  if (lowerInput.includes(\"hacker\")) {\n    return {\n      output: `> You approach the Hacker Den. The door requires a password.`,\n      nextState: \"hacker:door\"\n    };\n  } else if (lowerInput.includes(\"transport\")) {\n    return {\n      output: `> You head to the Transport Hub. Trains screech overhead.`,\n      nextState: \"transport:platform\"\n    };\n  } else if (lowerInput.includes(\"alley\")) {\n    return {\n      output: `> You slip into the Back Alley. The shadows move with you.`,\n      nextState: \"alley:stealth\"\n    };\n  } else {\n    return {\n      output: `> Unclear direction. Options: hacker / transport / alley`,\n      nextState: \"hub\"\n    };\n  }\n}\n\nfunction handleTransportPlatform() {\n  return {\n    output: `> A vendor offers you a neural ticket in exchange for your datapad.`,\n    nextState: \"transport:trade\"\n  };\n}\n\nfunction handleTransportTrade({ nextInventory, nextVisited, lowerInput }) {\n  if (nextInventory.includes(\"datapad\") && lowerInput.includes(\"trade\")) {\n    const newInventory = nextInventory.filter(item => item !== \"datapad\");\n    newInventory.push(\"neural ticket\");\n    nextVisited.add(\"transport\");\n    return {\n      output: `> You hand over the datapad. The vendor grins and slips you the neural ticket.`,\n      nextState: \"hub\",\n      nextInventory: newInventory,\n      nextVisited\n    };\n  } else {\n    return {\n      output: `> Do you want to trade? Type 'trade datapad'.`,\n      nextState: \"transport:trade\",\n      nextInventory,\n      nextVisited\n    };\n  }\n}\n\nfunction handleAlleyStealth({ getRandomNumber, nextInventory, nextVisited }) {\n  const stealthCheck = getRandomNumber();\n  const success = stealthCheck > 0.3;\n  if (success) {\n    nextInventory.push(\"stimpack\");\n    nextVisited.add(\"alley\");\n    return {\n      output: `> You dodge the shadows and find a hidden stash: a stimpack.`,\n      nextState: \"hub\",\n      nextInventory,\n      nextVisited\n    };\n  } else {\n    return {\n      output: `> You trip a wire. Sirens start up. You sprint back to the Market.`,\n      nextState: \"hub\",\n      nextInventory,\n      nextVisited\n    };\n  }\n}\n\nexport function cyberpunkAdventure(input, env) {\n  try {\n    const getRandomNumber = env.get(\"getRandomNumber\");\n    const getCurrentTime = env.get(\"getCurrentTime\");\n    const getData = env.get(\"getData\");\n    const setTemporaryData = env.get(\"setData\");\n    const { temporary } = getData();\n    const scoped = temporary.CYBE1 || {};\n\n    const name = scoped.name || input.trim() || \"Stray\";\n    const state = scoped.state || \"intro\";\n    const inventory = scoped.inventory || [];\n    const visited = new Set(scoped.visited || []);\n\n    const lowerInput = input.trim().toLowerCase();\n    const time = getCurrentTime();\n\n    let output = \"\";\n    let nextState = state;\n    let nextInventory = [...inventory];\n    let nextVisited = new Set(visited);\n\n    if (!scoped.name) {\n      setTemporaryData({ temporary: { CYBE1: { name } } });\n      return `> Welcome, ${name}. Your story begins now.\\n> Type 'start' to continue.`;\n    }\n\n    let result;\n    switch (state) {\n      case \"intro\":\n        result = handleIntro({ name, time });\n        break;\n      case \"hub\":\n        result = handleHub({ lowerInput });\n        break;\n      case \"hacker:door\":\n        result = handleHackerDoor(lowerInput, nextInventory, nextVisited);\n        break;\n      case \"transport:platform\":\n        result = handleTransportPlatform();\n        break;\n      case \"transport:trade\":\n        result = handleTransportTrade({ nextInventory, nextVisited, lowerInput });\n        break;\n      case \"alley:stealth\":\n        result = handleAlleyStealth({ getRandomNumber, nextInventory, nextVisited });\n        break;\n      default:\n        result = { output: `> Glitch in the grid. Resetting...`, nextState: \"intro\" };\n    }\n\n    output = result.output;\n    nextState = result.nextState || nextState;\n    nextInventory = result.nextInventory || nextInventory;\n    nextVisited = result.nextVisited || nextVisited;\n\n    setTemporaryData({\n      temporary: {\n        CYBE1: {\n          name,\n          state: nextState,\n          inventory: nextInventory,\n          visited: [...nextVisited]\n        }\n      }\n    });\n\n    return output;\n  } catch {\n    return `> SYSTEM ERROR: neural link failure`;\n  }\n}","usedDeprecatedRules":[{"ruleId":"no-multi-spaces","replacedBy":["@stylistic/js/no-multi-spaces"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multi-spaces","url":"https://eslint.style/rules/js/no-multi-spaces"}}]}}]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/src/toys/2025-04-05/httpRequest.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-multi-spaces","replacedBy":["@stylistic/js/no-multi-spaces"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multi-spaces","url":"https://eslint.style/rules/js/no-multi-spaces"}}]}}]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/src/toys/2025-04-06/ticTacToe.js","messages":[{"ruleId":"complexity","severity":1,"message":"Function 'validateParsedMoves' has a complexity of 4. Maximum allowed is 2.","line":17,"column":1,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":21,"endColumn":2},{"ruleId":"complexity","severity":1,"message":"Function 'buildMoveResponse' has a complexity of 3. Maximum allowed is 2.","line":32,"column":1,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":35,"endColumn":2},{"ruleId":"complexity","severity":1,"message":"Function 'ticTacToeMove' has a complexity of 4. Maximum allowed is 2.","line":37,"column":8,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":50,"endColumn":2},{"ruleId":"curly","severity":1,"message":"Expected { after 'if' condition.","line":39,"column":15,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":39,"endColumn":49,"fix":{"range":[901,935],"text":"{return returnInitialOptimalMove();}"}},{"ruleId":"curly","severity":1,"message":"Expected { after 'if' condition.","line":42,"column":16,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":42,"endColumn":50,"fix":{"range":[999,1033],"text":"{return returnInitialOptimalMove();}"}},{"ruleId":"curly","severity":1,"message":"Expected { after 'if' condition.","line":44,"column":40,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":44,"endColumn":72,"fix":{"range":[1111,1143],"text":"{return buildMoveResponse(moves);}"}},{"ruleId":"complexity","severity":1,"message":"Function 'processMove' has a complexity of 3. Maximum allowed is 2.","line":58,"column":1,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":62,"endColumn":2},{"ruleId":"curly","severity":1,"message":"Expected { after 'if' condition.","line":59,"column":41,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":59,"endColumn":54,"fix":{"range":[1619,1632],"text":"{return false;}"}},{"ruleId":"curly","severity":1,"message":"Expected { after 'if' condition.","line":60,"column":45,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":60,"endColumn":58,"fix":{"range":[1677,1690],"text":"{return false;}"}},{"ruleId":"complexity","severity":1,"message":"Function 'applyMovesSequentially' has a complexity of 4. Maximum allowed is 2.","line":64,"column":1,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":71,"endColumn":2},{"ruleId":"curly","severity":1,"message":"Expected { after 'if' condition.","line":67,"column":52,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":67,"endColumn":76,"fix":{"range":[1884,1908],"text":"{return { valid: false };}"}},{"ruleId":"curly","severity":1,"message":"Expected { after 'if' condition.","line":68,"column":31,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":68,"endColumn":70,"fix":{"range":[1939,1978],"text":"{return { valid: true, earlyWin: true };}"}},{"ruleId":"complexity","severity":1,"message":"Function 'validateAndApplyMoves' has a complexity of 4. Maximum allowed is 2.","line":73,"column":1,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":81,"endColumn":2},{"ruleId":"curly","severity":1,"message":"Expected { after 'if' condition.","line":74,"column":50,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":74,"endColumn":62,"fix":{"range":[2118,2130],"text":"{return null;}"}},{"ruleId":"curly","severity":1,"message":"Expected { after 'if' condition.","line":78,"column":22,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":78,"endColumn":34,"fix":{"range":[2266,2278],"text":"{return null;}"}},{"ruleId":"complexity","severity":1,"message":"Function 'findBestMove' has a complexity of 5. Maximum allowed is 2.","line":90,"column":1,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":107,"endColumn":2},{"ruleId":"curly","severity":1,"message":"Expected { after 'if' condition.","line":110,"column":27,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":110,"endColumn":38,"fix":{"range":[2967,2978],"text":"{return \"X\";}"}},{"ruleId":"complexity","severity":1,"message":"Function 'checkRows' has a complexity of 5. Maximum allowed is 2.","line":114,"column":1,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":121,"endColumn":2},{"ruleId":"complexity","severity":1,"message":"Function 'checkColumns' has a complexity of 5. Maximum allowed is 2.","line":123,"column":1,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":130,"endColumn":2},{"ruleId":"complexity","severity":1,"message":"Function 'checkDiagonals' has a complexity of 6. Maximum allowed is 2.","line":132,"column":1,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":137,"endColumn":2},{"ruleId":"curly","severity":1,"message":"Expected { after 'if' condition.","line":148,"column":22,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":148,"endColumn":35,"fix":{"range":[3928,3941],"text":"{return false;}"}},{"ruleId":"complexity","severity":1,"message":"Function 'evaluateTerminalState' has a complexity of 4. Maximum allowed is 2.","line":155,"column":1,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":160,"endColumn":2},{"ruleId":"curly","severity":1,"message":"Expected { after 'if' condition.","line":156,"column":29,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":156,"endColumn":47,"fix":{"range":[4109,4127],"text":"{return 10 - depth;}"}},{"ruleId":"curly","severity":1,"message":"Expected { after 'if' condition.","line":157,"column":31,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":157,"endColumn":49,"fix":{"range":[4158,4176],"text":"{return depth - 10;}"}},{"ruleId":"curly","severity":1,"message":"Expected { after 'if' condition.","line":158,"column":35,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":158,"endColumn":44,"fix":{"range":[4211,4220],"text":"{return 0;}"}},{"ruleId":"complexity","severity":1,"message":"Function 'getAvailableMoves' has a complexity of 4. Maximum allowed is 2.","line":162,"column":1,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":170,"endColumn":2},{"ruleId":"curly","severity":1,"message":"Expected { after 'if' condition.","line":166,"column":25,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":166,"endColumn":44,"fix":{"range":[4385,4404],"text":"{moves.push([r, c]);}"}},{"ruleId":"complexity","severity":1,"message":"Function 'simulateMoves' has a complexity of 3. Maximum allowed is 2.","line":172,"column":1,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":181,"endColumn":2},{"ruleId":"complexity","severity":1,"message":"Function 'minimax' has a complexity of 3. Maximum allowed is 2.","line":183,"column":1,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":190,"endColumn":2},{"ruleId":"curly","severity":1,"message":"Expected { after 'if' condition.","line":186,"column":31,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":186,"endColumn":52,"fix":{"range":[4978,4999],"text":"{return terminalScore;}"}},{"ruleId":"complexity","severity":1,"message":"Function 'hasValidPosition' has a complexity of 4. Maximum allowed is 2.","line":196,"column":1,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":200,"endColumn":2},{"ruleId":"curly","severity":1,"message":"Expected { after 'if' condition.","line":197,"column":50,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":197,"endColumn":63,"fix":{"range":[5294,5307],"text":"{return false;}"}},{"ruleId":"complexity","severity":1,"message":"Function 'isValidMove' has a complexity of 6. Maximum allowed is 2.","line":202,"column":1,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":212,"endColumn":2},{"ruleId":"curly","severity":1,"message":"Expected { after 'if' condition.","line":203,"column":42,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":203,"endColumn":55,"fix":{"range":[5495,5508],"text":"{return false;}"}},{"ruleId":"curly","severity":1,"message":"Expected { after 'if' condition.","line":206,"column":32,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":206,"endColumn":45,"fix":{"range":[5578,5591],"text":"{return false;}"}},{"ruleId":"curly","severity":1,"message":"Expected { after 'if' condition.","line":207,"column":36,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":207,"endColumn":49,"fix":{"range":[5627,5640],"text":"{return false;}"}},{"ruleId":"curly","severity":1,"message":"Expected { after 'if' condition.","line":209,"column":49,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":209,"endColumn":62,"fix":{"range":[5690,5703],"text":"{return false;}"}},{"ruleId":"complexity","severity":1,"message":"Function 'isWin' has a complexity of 3. Maximum allowed is 2.","line":214,"column":1,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":216,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":38,"fixableErrorCount":0,"fixableWarningCount":21,"source":"function getOpponent(player) {\n  return player === \"X\" ? \"O\" : \"X\";\n}\n\nfunction tryParseJSON(input) {\n  try {\n    return JSON.parse(input);\n  } catch {\n    return null;\n  }\n}\n\nfunction respectsTurnOrder(index, player, moves) {\n  return index === 0 || player !== moves[index - 1].player;\n}\n\nfunction validateParsedMoves(parsed) {\n  return parsed && typeof parsed === \"object\" && Array.isArray(parsed.moves)\n    ? parsed.moves\n    : null;\n}\n\nfunction parseInputSafely(input) {\n  const parsed = tryParseJSON(input);\n  return validateParsedMoves(parsed);\n}\n\nfunction shouldSkipMove(earlyWin, moves) {\n  return earlyWin || moves.length >= 9;\n}\n\nfunction buildMoveResponse(moves, newMove = null) {\n  const updatedMoves = newMove ? [...moves, newMove] : moves;\n  return JSON.stringify({ moves: updatedMoves });\n}\n\nexport function ticTacToeMove(input) {\n  const moves = parseInputSafely(input);\n  if (!moves) return returnInitialOptimalMove();\n\n  const result = validateAndApplyMoves(moves);\n  if (!result) return returnInitialOptimalMove();\n  const { board, earlyWin } = result;\n  if (shouldSkipMove(earlyWin, moves)) return buildMoveResponse(moves);\n\n  const nextPlayer = determineNextPlayer(moves);\n  const bestMove = findBestMove(board, nextPlayer, moves);\n  const newMove = { player: nextPlayer, position: bestMove };\n  return buildMoveResponse(moves, newMove);\n}\n\nfunction initializeBoardAndSeen() {\n  const board = Array.from({ length: 3 }, () => Array(3).fill(null));\n  const seen = new Set();\n  return { board, seen };\n}\n\nfunction processMove(move, index, moves, board, seen) {\n  if (!isValidMove(move, index, moves)) return false;\n  if (!applyMoveToBoard(board, move, seen)) return false;\n  return true;\n}\n\nfunction applyMovesSequentially(moves, board, seen) {\n  for (let i = 0; i < moves.length; i++) {\n    const move = moves[i];\n    if (!processMove(move, i, moves, board, seen)) return { valid: false };\n    if (checkEarlyWin(board)) return { valid: true, earlyWin: true };\n  }\n  return { valid: true, earlyWin: false };\n}\n\nfunction validateAndApplyMoves(moves) {\n  if (!Array.isArray(moves) || moves.length > 9) return null;\n\n  const { board, seen } = initializeBoardAndSeen();\n  const result = applyMovesSequentially(moves, board, seen);\n  if (!result.valid) return null;\n\n  return { board, earlyWin: result.earlyWin };\n}\n\nfunction scoreMove(board, r, c, player, moves) {\n  board[r][c] = player;\n  const score = minimax(board, 0, false, player, moves);\n  board[r][c] = null;\n  return score;\n}\n\nfunction findBestMove(board, nextPlayer, moves) {\n  let best = -Infinity;\n  let bestMove = null;\n\n  for (let r = 0; r < 3; r++) {\n    for (let c = 0; c < 3; c++) {\n      if (!board[r][c]) {\n        const score = scoreMove(board, r, c, nextPlayer, moves);\n        if (score > best) {\n          best = score;\n          bestMove = { row: r, column: c };\n        }\n      }\n    }\n  }\n\n  return bestMove;\n}\n\nfunction determineNextPlayer(moves) {\n  if (moves.length === 0) return \"X\";\n  return getOpponent(moves[moves.length - 1].player);\n}\n\nfunction checkRows(board, player) {\n  for (let i = 0; i < 3; i++) {\n    if (board[i][0] === player && board[i][1] === player && board[i][2] === player) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction checkColumns(board, player) {\n  for (let i = 0; i < 3; i++) {\n    if (board[0][i] === player && board[1][i] === player && board[2][i] === player) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction checkDiagonals(board, player) {\n  return (\n    (board[0][0] === player && board[1][1] === player && board[2][2] === player) ||\n    (board[0][2] === player && board[1][1] === player && board[2][0] === player)\n  );\n}\n\nfunction checkEarlyWin(board) {\n  return isWin(board, \"X\") || isWin(board, \"O\");\n}\n\nfunction applyMoveToBoard(board, move, seen) {\n  const { player, position } = move;\n  const { row, column } = position;\n\n  const key = `${row},${column}`;\n  if (seen.has(key)) return false;\n  seen.add(key);\n\n  board[row][column] = player;\n  return true;\n}\n\nfunction evaluateTerminalState(board, player, opponent, depth, moves) {\n  if (isWin(board, player)) return 10 - depth;\n  if (isWin(board, opponent)) return depth - 10;\n  if (depth + moves.length === 9) return 0;\n  return null;\n}\n\nfunction getAvailableMoves(board) {\n  const moves = [];\n  for (let r = 0; r < 3; r++) {\n    for (let c = 0; c < 3; c++) {\n      if (!board[r][c]) moves.push([r, c]);\n    }\n  }\n  return moves;\n}\n\nfunction simulateMoves(board, depth, isMax, player, moves) {\n  const scores = [];\n  const opponent = getOpponent(player);\n  for (const [r, c] of getAvailableMoves(board)) {\n    board[r][c] = isMax ? player : opponent;\n    scores.push(minimax(board, depth + 1, !isMax, player, moves));\n    board[r][c] = null;\n  }\n  return scores;\n}\n\nfunction minimax(board, depth, isMax, player, moves) {\n  const opponent = getOpponent(player);\n  const terminalScore = evaluateTerminalState(board, player, opponent, depth, moves);\n  if (terminalScore !== null) return terminalScore;\n\n  const scores = simulateMoves(board, depth, isMax, player, moves);\n  return isMax ? Math.max(...scores) : Math.min(...scores);\n}\n\nfunction hasValidPlayer(player) {\n  return [\"X\", \"O\"].includes(player);\n}\n\nfunction hasValidPosition(position) {\n  if (!position || typeof position !== \"object\") return false;\n  const { row, column } = position;\n  return [0, 1, 2].includes(row) && [0, 1, 2].includes(column);\n}\n\nfunction isValidMove(move, index, moves) {\n  if (!move || typeof move !== \"object\") return false;\n\n  const { player, position } = move;\n  if (!hasValidPlayer(player)) return false;\n  if (!hasValidPosition(position)) return false;\n\n  if (!respectsTurnOrder(index, player, moves)) return false;\n\n  return true;\n}\n\nfunction isWin(board, player) {\n  return checkRows(board, player) || checkColumns(board, player) || checkDiagonals(board, player);\n}\n\nfunction returnInitialOptimalMove() {\n  // In an empty board, the optimal first move is the center\n  const optimal = { player: \"X\", position: { row: 1, column: 1 } };\n  return JSON.stringify({ moves: [optimal] });\n}\n","usedDeprecatedRules":[{"ruleId":"no-multi-spaces","replacedBy":["@stylistic/js/no-multi-spaces"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multi-spaces","url":"https://eslint.style/rules/js/no-multi-spaces"}}]}}]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/stryker.config.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-multi-spaces","replacedBy":["@stylistic/js/no-multi-spaces"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multi-spaces","url":"https://eslint.style/rules/js/no-multi-spaces"}}]}}]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/test/browser/audio-controls.test.js","messages":[{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 3. Maximum allowed is 2.","line":96,"column":38,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":100,"endColumn":6},{"ruleId":"curly","severity":1,"message":"Expected { after 'if' condition.","line":97,"column":33,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":97,"endColumn":54,"fix":{"range":[3212,3233],"text":"{return audioElements;}"}},{"ruleId":"curly","severity":1,"message":"Expected { after 'if' condition.","line":98,"column":34,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":98,"endColumn":49,"fix":{"range":[3267,3282],"text":"{return buttons;}"}},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 3. Maximum allowed is 2.","line":126,"column":38,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":130,"endColumn":6},{"ruleId":"curly","severity":1,"message":"Expected { after 'if' condition.","line":127,"column":33,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":127,"endColumn":54,"fix":{"range":[4023,4044],"text":"{return audioElements;}"}},{"ruleId":"curly","severity":1,"message":"Expected { after 'if' condition.","line":128,"column":34,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":128,"endColumn":49,"fix":{"range":[4078,4093],"text":"{return buttons;}"}},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 3. Maximum allowed is 2.","line":161,"column":38,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":165,"endColumn":6},{"ruleId":"curly","severity":1,"message":"Expected { after 'if' condition.","line":162,"column":33,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":162,"endColumn":54,"fix":{"range":[5060,5081],"text":"{return audioElements;}"}},{"ruleId":"curly","severity":1,"message":"Expected { after 'if' condition.","line":163,"column":34,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":163,"endColumn":49,"fix":{"range":[5115,5130],"text":"{return buttons;}"}},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 3. Maximum allowed is 2.","line":198,"column":38,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":202,"endColumn":6},{"ruleId":"curly","severity":1,"message":"Expected { after 'if' condition.","line":199,"column":33,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":199,"endColumn":54,"fix":{"range":[6204,6225],"text":"{return audioElements;}"}},{"ruleId":"curly","severity":1,"message":"Expected { after 'if' condition.","line":200,"column":34,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":200,"endColumn":49,"fix":{"range":[6259,6274],"text":"{return buttons;}"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":8,"source":"import { jest } from '@jest/globals';\nimport { createPlayClickHandler } from '../../src/browser/audio-controls.js';\nimport { createStopClickHandler } from '../../src/browser/audio-controls.js';\n\ndescribe('createPlayClickHandler', () => {\n  it('calls stopDefault and playAudio with the correct arguments', () => {\n    const audio = {};\n    const stopDefault = jest.fn();\n    const playAudio = jest.fn();\n    const event = { type: 'click' };\n\n    const handler = createPlayClickHandler(audio, stopDefault, playAudio);\n    handler(event);\n\n    expect(stopDefault).toHaveBeenCalledWith(event);\n    expect(playAudio).toHaveBeenCalledWith(audio);\n  });\n});\n\nimport { createPauseClickHandler } from '../../src/browser/audio-controls.js';\n\ndescribe('createPauseClickHandler', () => {\n  it('calls stopDefault and pauseAudio with the correct arguments', () => {\n    const audio = {};\n    const stopDefault = jest.fn();\n    const pauseAudio = jest.fn();\n    const event = { type: 'click' };\n\n    const handler = createPauseClickHandler(audio, stopDefault, pauseAudio);\n    handler(event);\n\n    expect(stopDefault).toHaveBeenCalledWith(event);\n    expect(pauseAudio).toHaveBeenCalledWith(audio);\n  });\n});\n\ndescribe('createStopClickHandler', () => {\n  it('calls stopDefault, pauseAudio, and resets audio.currentTime', () => {\n    const audio = { currentTime: 123 };\n    const stopDefault = jest.fn();\n    const pauseAudio = jest.fn();\n    const event = { type: 'click' };\n\n    const handler = createStopClickHandler(audio, stopDefault, pauseAudio);\n    handler(event);\n\n    expect(stopDefault).toHaveBeenCalledWith(event);\n    expect(pauseAudio).toHaveBeenCalledWith(audio);\n    expect(audio.currentTime).toBe(0);\n  });\n});\n\nimport { createUpdateTimeDisplay } from '../../src/browser/audio-controls.js';\n\ndescribe('createUpdateTimeDisplay', () => {\n  it('updates the time display with the current time of the audio', () => {\n    const audio = { currentTime: 42 };\n    const display = { textContent: '' };\n\n    const updateTimeDisplay = createUpdateTimeDisplay(audio, display);\n    updateTimeDisplay();\n\n    expect(display.textContent).toContain('42');\n  });\n\n  it('handles when audio currentTime is 0', () => {\n    const audio = { currentTime: 0 };\n    const display = { textContent: '' };\n\n    const updateTimeDisplay = createUpdateTimeDisplay(audio, display);\n    updateTimeDisplay();\n\n    expect(display.textContent).toContain('0');\n  });\n\n  it('displays minutes and seconds when currentTime is 60', () => {\n    const audio = { currentTime: 60 };\n    const display = { textContent: '' };\n\n    const updateTimeDisplay = createUpdateTimeDisplay(audio, display);\n    updateTimeDisplay();\n\n    expect(display.textContent).toBe(\"1:00\");\n  });\n});\n\nimport { setupAudio } from '../../src/browser/audio-controls.js';\n\ndescribe('setupAudio', () => {\n  it('assigns a default id to audio elements without an id', () => {\n    const audioElements = [\n      { id: '', parentNode: { insertBefore: jest.fn() }, addEventListener: jest.fn() },\n      { parentNode: { insertBefore: jest.fn() }, addEventListener: jest.fn() }\n    ];\n    const buttons = [];\n    const querySelectorAll = jest.fn((selector) => {\n      if (selector === 'audio') return audioElements;\n      if (selector === 'button') return buttons;\n      return [];\n    });\n    const container = { querySelectorAll };\n\n    setupAudio(\n      container,\n      () => audioElements,\n      () => {},\n      () => ({ className: '', id: '', textContent: '', href: '' }),\n      () => '',\n      () => {},\n      () => {},\n      () => {},\n      () => {},\n      () => {},\n      () => {}\n    );\n\n    expect(audioElements[0].id).toBe('audio-0');\n    expect(audioElements[1].id).toBe('audio-1');\n  });\n\n  it('does not overwrite existing audio element ids', () => {\n    const audioElements = [\n      { id: 'custom-id', parentNode: { insertBefore: jest.fn() }, addEventListener: jest.fn() }\n    ];\n    const buttons = [];\n    const querySelectorAll = jest.fn((selector) => {\n      if (selector === 'audio') return audioElements;\n      if (selector === 'button') return buttons;\n      return [];\n    });\n    const container = { querySelectorAll };\n\n    setupAudio(\n      container,\n      () => audioElements,\n      () => {},\n      () => ({ className: '', id: '', textContent: '', href: '' }),\n      () => '',\n      () => {},\n      () => {},\n      () => {},\n      () => {},\n      () => {},\n      () => {}\n    );\n\n    expect(audioElements[0].id).toBe('custom-id');\n  });\n\n  it('adds audio-controls class and sets correct text on control buttons', () => {\n    const audioElements = [\n      { id: '', parentNode: { insertBefore: jest.fn() }, addEventListener: jest.fn() }\n    ];\n    const buttons = [];\n    const createdElements = [];\n    const createElement = () => {\n      const element = { className: '', id: '', textContent: '', href: '', addEventListener: jest.fn(), appendChild: jest.fn() };\n      createdElements.push(element);\n      return element;\n    };\n    const querySelectorAll = jest.fn((selector) => {\n      if (selector === 'audio') return audioElements;\n      if (selector === 'button') return buttons;\n      return [];\n    });\n    const container = { querySelectorAll };\n\n    setupAudio(\n      container,\n      () => audioElements,\n      () => {},\n      createElement,\n      () => '',\n      () => {},\n      () => {},\n      () => {},\n      () => {},\n      () => {},\n      () => {}\n    );\n\n    expect(createdElements[0].className).toBe('audio-controls');\n    const texts = createdElements.map(el => el.textContent).filter(Boolean);\n    expect(texts).toEqual(expect.arrayContaining(['PLAY', 'PAUSE', 'STOP']));\n  });\n\n  it('adds a time display element with class \"audio-time\"', () => {\n    const audioElements = [\n      { id: '', parentNode: { insertBefore: jest.fn() }, addEventListener: jest.fn() }\n    ];\n    const buttons = [];\n    const createdElements = [];\n    const createElement = () => {\n      const element = { className: '', id: '', textContent: '', href: '', addEventListener: jest.fn(), appendChild: jest.fn() };\n      createdElements.push(element);\n      return element;\n    };\n    const querySelectorAll = jest.fn((selector) => {\n      if (selector === 'audio') return audioElements;\n      if (selector === 'button') return buttons;\n      return [];\n    });\n    const container = { querySelectorAll };\n\n    setupAudio(\n      container,\n      () => audioElements,\n      () => {},\n      createElement,\n      () => '',\n      () => {},\n      () => {},\n      () => {},\n      () => {},\n      () => {},\n      () => {}\n    );\n\n    const timeElements = createdElements.filter(el => el.className === 'audio-time');\n    expect(timeElements.length).toBeGreaterThan(0);\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-multi-spaces","replacedBy":["@stylistic/js/no-multi-spaces"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multi-spaces","url":"https://eslint.style/rules/js/no-multi-spaces"}}]}}]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/test/browser/data.test.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":177,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":177,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, beforeEach, jest } from '@jest/globals';\nimport { fetchAndCacheBlogData } from '../../src/browser/data.js'; // Adjust path as needed\n\ndescribe('fetchAndCacheBlogData', () => {\n  let state;\n  let mockFetch;\n  let mockLog;\n  let mockError;\n\n  beforeEach(() => {\n    state = {\n      blog: null,\n      blogStatus: null,\n      blogError: null,\n      blogFetchPromise: null,\n    };\n    mockLog = jest.fn();\n    mockError = jest.fn();\n  });\n\n  it('should prevent multiple simultaneous fetches', async () => {\n    const promise = Promise.resolve({ ok: true, json: () => Promise.resolve({}) });\n    state.blogStatus = 'loading';\n    state.blogFetchPromise = promise;\n\n    const result = fetchAndCacheBlogData(state, mockFetch, mockLog, mockError);\n    expect(result).toBe(promise);\n    expect(mockLog).toHaveBeenCalledWith('Blog data fetch already in progress.');\n  });\n\n  it('should start fetching blog data and update state on success', async () => {\n    const blogData = { title: 'Test Blog' };\n    mockFetch = jest.fn(() =>\n      Promise.resolve({ ok: true, json: () => Promise.resolve(blogData) })\n    );\n\n    const promise = fetchAndCacheBlogData(state, mockFetch, mockLog, mockError);\n    expect(state.blogStatus).toBe('loading');\n    expect(state.blogError).toBeNull();\n\n    await promise;\n\n    expect(state.blog).toEqual(blogData);\n    expect(state.blogStatus).toBe('loaded');\n    expect(state.blogFetchPromise).toBeNull();\n    expect(mockLog).toHaveBeenCalledWith('Blog data loaded successfully:', blogData);\n  });\n\n  it('should handle HTTP errors properly', async () => {\n    mockFetch = jest.fn(() => Promise.resolve({ ok: false, status: 500 }));\n\n    const promise = fetchAndCacheBlogData(state, mockFetch, mockLog, mockError);\n    await promise;\n\n    expect(state.blogStatus).toBe('error');\n    expect(state.blog).toBeNull();\n    expect(state.blogFetchPromise).toBeNull();\n    expect(state.blogError).toBeInstanceOf(Error);\n    expect(mockError).toHaveBeenCalledWith(\n      'Error fetching blog data:',\n      expect.any(Error)\n    );\n  });\n\n  it('should handle fetch exceptions', async () => {\n    const error = new Error('Network failure');\n    mockFetch = jest.fn(() => Promise.reject(error));\n\n    const promise = fetchAndCacheBlogData(state, mockFetch, mockLog, mockError);\n    await promise;\n\n    expect(state.blogStatus).toBe('error');\n    expect(state.blog).toBeNull();\n    expect(state.blogFetchPromise).toBeNull();\n    expect(state.blogError).toBe(error);\n    expect(mockError).toHaveBeenCalledWith('Error fetching blog data:', error);\n  });\n\n  it('calls fetch with the correct URL and logs starting message', async () => {\n    mockFetch = jest.fn(() =>\n      Promise.resolve({ ok: true, json: () => Promise.resolve({}) })\n    );\n \n    await fetchAndCacheBlogData(state, mockFetch, mockLog, mockError);\n \n    expect(mockFetch).toHaveBeenCalledWith('./blog.json');\n    expect(mockLog).toHaveBeenCalledWith('Starting to fetch blog data...');\n  });\n\n  it('throws specific error when response is not ok', async () => {\n    mockFetch = jest.fn(() => Promise.resolve({ ok: false, status: 418 }));\n \n    const promise = fetchAndCacheBlogData(state, mockFetch, mockLog, mockError);\n    await promise;\n \n    expect(state.blogStatus).toBe('error');\n    expect(mockError).toHaveBeenCalledWith(\n      'Error fetching blog data:',\n      expect.objectContaining({ message: 'HTTP error! status: 418' })\n    );\n  });\n});\n\nimport { getData, setData, getDeepStateCopy, shouldUseExistingFetch } from '../../src/browser/data.js';\n\ndescribe('getData, setData, and getDeepStateCopy', () => {\n  let state;\n  let logFn;\n  let errorFn;\n  let warnFn;\n  let fetchFn;\n\n  beforeEach(() => {\n    state = {\n      blog: null,\n      blogStatus: 'idle',\n      blogError: null,\n      blogFetchPromise: null,\n    };\n    logFn = jest.fn();\n    errorFn = jest.fn();\n    warnFn = jest.fn();\n    fetchFn = jest.fn(() => Promise.resolve({ ok: true, json: () => Promise.resolve({ blog: 'content' }) }));\n  });\n\n  it('getDeepStateCopy returns a deep copy', () => {\n    const original = { blog: { content: 'x' } };\n    const copy = getDeepStateCopy(original);\n    expect(copy).toEqual(original);\n    expect(copy).not.toBe(original);\n    expect(copy.blog).not.toBe(original.blog);\n  });\n\n  it('getData triggers fetch if status is idle', () => {\n    getData(state, fetchFn, logFn, errorFn, warnFn);\n    expect(fetchFn).toHaveBeenCalled();\n  });\n\n  it('getData logs warning on error state', () => {\n    state.blogStatus = 'error';\n    getData(state, fetchFn, logFn, errorFn, warnFn);\n    expect(warnFn).toHaveBeenCalledWith('Blog data previously failed to load:', state.blogError);\n  });\n\n  it('getData does nothing when status is loaded', () => {\n    state.blogStatus = 'loaded';\n    getData(state, fetchFn, logFn, errorFn, warnFn);\n    expect(fetchFn).not.toHaveBeenCalled();\n    expect(warnFn).not.toHaveBeenCalled();\n  });\n\n  it('getData omits internal state fields', async () => {\n    state.blog = { title: 'x' };\n    state.blogStatus = 'loaded';\n    const result = getData(state, fetchFn, logFn, errorFn, warnFn);\n    expect(result.blog).toEqual({ title: 'x' });\n    expect(result).not.toHaveProperty('blogStatus');\n    expect(result).not.toHaveProperty('blogError');\n    expect(result).not.toHaveProperty('blogFetchPromise');\n  });\n\n  it('setData preserves existing blog if incoming state omits it', () => {\n    state.blog = { title: 'preserved' };\n    const incomingState = { temporary: true }; // no blog field\n    setData(incomingState, state, logFn, errorFn);\n    expect(state.blog).toEqual({ title: 'preserved' }); // blog should be preserved\n  });\n\n  it('setData throws and logs error if blog missing', () => {\n    expect(() => setData({}, state, logFn, errorFn)).toThrow();\n    expect(errorFn).toHaveBeenCalled();\n  });\n  \n  it('setData logs specific error message when blog is missing', () => {\n    try {\n      setData({}, state, logFn, errorFn);\n    } catch (e) {\n      // expected to throw\n    }\n    expect(errorFn).toHaveBeenCalledWith(\n      'setData received invalid data structure:',\n      {}\n    );\n  });\n\n  it('shouldUseExistingFetch returns true and logs when loading and promise exists', () => {\n    const state = {\n      blogStatus: 'loading',\n      blogFetchPromise: Promise.resolve(),\n    };\n    const logFn = jest.fn();\n    const result = shouldUseExistingFetch(state, logFn);\n    expect(result).toBe(true);\n    expect(logFn).toHaveBeenCalledWith('Blog data fetch already in progress.');\n  });\n\n  it('shouldUseExistingFetch returns false if status is not loading', () => {\n    const state = {\n      blogStatus: 'idle',\n      blogFetchPromise: Promise.resolve(),\n    };\n    const logFn = jest.fn();\n    const result = shouldUseExistingFetch(state, logFn);\n    expect(result).toBe(false);\n    expect(logFn).not.toHaveBeenCalled();\n  });\n\n  it('shouldUseExistingFetch returns false if status is loading but no fetchPromise exists', () => {\n    const state = {\n      blogStatus: 'loading',\n      blogFetchPromise: null,\n    };\n    const logFn = jest.fn();\n    const result = shouldUseExistingFetch(state, logFn);\n    expect(result).toBe(false);\n    expect(logFn).not.toHaveBeenCalled();\n  });\n\n  it('getData returns cached blog data when already loaded', () => {\n    const blog = { title: 'Cached' };\n    state.blog = blog;\n    state.blogStatus = 'loaded';\n\n    const result = getData(state, fetchFn, logFn, errorFn, warnFn);\n\n    expect(result.blog).toEqual(blog);\n    expect(fetchFn).not.toHaveBeenCalled();\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-multi-spaces","replacedBy":["@stylistic/js/no-multi-spaces"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multi-spaces","url":"https://eslint.style/rules/js/no-multi-spaces"}}]}}]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/test/browser/main.test.js","messages":[{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 4. Maximum allowed is 2.","line":57,"column":39,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":61,"endColumn":6},{"ruleId":"curly","severity":1,"message":"Expected { after 'if' condition.","line":58,"column":26,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":58,"endColumn":55,"fix":{"range":[1447,1476],"text":"{return mockControlsContainer;}"}},{"ruleId":"curly","severity":1,"message":"Expected { after 'if' condition.","line":59,"column":24,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":59,"endColumn":46,"fix":{"range":[1500,1522],"text":"{return mockPlayButton;}"}},{"ruleId":"curly","severity":1,"message":"Expected { after 'if' condition.","line":60,"column":27,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":60,"endColumn":50,"fix":{"range":[1549,1572],"text":"{return mockTimeDisplay;}"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":3,"source":"import { setupAudio } from '../../src/browser/audio-controls.js';\nimport { describe, test, jest } from '@jest/globals';\n\n// Mock DOM elements and functions\ndescribe('setupAudio', () => {\n  let mockDoc;\n  let mockAudio;\n  let mockAudioElements;\n  let mockControlsContainer;\n  let mockPlayButton;\n  let mockTimeDisplay;\n\n  beforeEach(() => {\n    // Mock document\n    mockDoc = {\n      querySelectorAll: jest.fn(),\n      createElement: jest.fn(),\n      createTextNode: jest.fn()\n    };\n\n    // Mock audio elements\n    mockAudio = {\n      id: '',\n      removeAttribute: jest.fn(),\n      play: jest.fn(),\n      pause: jest.fn(),\n      currentTime: 0\n    };\n\n    mockAudioElements = [mockAudio];\n    mockDoc.querySelectorAll.mockReturnValue(mockAudioElements);\n\n    // Mock DOM elements\n    mockControlsContainer = {\n      className: '',\n      id: '',\n      appendChild: jest.fn()\n    };\n    mockDoc.createElement.mockReturnValue(mockControlsContainer);\n\n    mockPlayButton = {\n      href: '#',\n      textContent: '',\n      addEventListener: jest.fn()\n    };\n    mockTimeDisplay = {\n      className: '',\n      textContent: '',\n      addEventListener: jest.fn()\n    };\n  });\n\n  test('sets up audio controls correctly', () => {\n    // Mock utility functions\n    const mockGetAudioElements = jest.fn(() => mockAudioElements);\n    const mockRemoveControlsAttribute = jest.fn();\n    const mockCreateElement = jest.fn((doc, tag) => {\n      if (tag === 'div') return mockControlsContainer;\n      if (tag === 'a') return mockPlayButton;\n      if (tag === 'span') return mockTimeDisplay;\n    });\n    const mockCreateTextNode = jest.fn();\n    const mockStopDefault = jest.fn();\n    const mockPlayAudio = jest.fn();\n    const mockPauseAudio = jest.fn();\n    const mockAddEventListener = jest.fn(() => {\n      // Event listener setup\n    });\n    const mockAppendChild = jest.fn();\n    const mockInsertBefore = jest.fn();\n\n    // Call setupAudio\n    setupAudio(\n      mockDoc,\n      mockGetAudioElements,\n      mockRemoveControlsAttribute,\n      mockCreateElement,\n      mockCreateTextNode,\n      mockStopDefault,\n      mockPlayAudio,\n      mockPauseAudio,\n      mockAddEventListener,\n      mockAppendChild,\n      mockInsertBefore\n    );\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-multi-spaces","replacedBy":["@stylistic/js/no-multi-spaces"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multi-spaces","url":"https://eslint.style/rules/js/no-multi-spaces"}}]}}]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/test/browser/tags.test.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-multi-spaces","replacedBy":["@stylistic/js/no-multi-spaces"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multi-spaces","url":"https://eslint.style/rules/js/no-multi-spaces"}}]}}]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/test/browser/toys.test.js","messages":[{"ruleId":"complexity","severity":1,"message":"Method 'querySelector' has a complexity of 5. Maximum allowed is 2.","line":78,"column":22,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":83,"endColumn":8},{"ruleId":"curly","severity":1,"message":"Expected { after 'if' condition.","line":79,"column":60,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":79,"endColumn":70,"fix":{"range":[2761,2771],"text":"{return {};}"}},{"ruleId":"curly","severity":1,"message":"Expected { after 'if' condition.","line":80,"column":38,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":80,"endColumn":59,"fix":{"range":[2809,2830],"text":"{return outputElement;}"}},{"ruleId":"curly","severity":1,"message":"Expected { after 'if' condition.","line":81,"column":40,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":81,"endColumn":75,"fix":{"range":[2870,2905],"text":"{return outputElement.parentElement;}"}},{"ruleId":"no-unused-vars","severity":1,"message":"'handleSubmit' is assigned a value but never used.","line":126,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":126,"endColumn":19},{"ruleId":"no-unused-vars","severity":1,"message":"'input' is defined but never used.","line":149,"column":41,"nodeType":"Identifier","messageId":"unusedVar","endLine":149,"endColumn":46,"suggestions":[{"messageId":"removeVar","data":{"varName":"input"},"fix":{"range":[4842,4847],"text":""},"desc":"Remove unused variable 'input'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'addWarningFn' is assigned a value but never used.","line":259,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":259,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"addWarningFn"},"fix":{"range":[8050,8081],"text":""},"desc":"Remove unused variable 'addWarningFn'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'createElement' is assigned a value but never used.","line":262,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":262,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"createElement"},"fix":{"range":[8187,8219],"text":""},"desc":"Remove unused variable 'createElement'."}]},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 5. Maximum allowed is 2.","line":296,"column":35,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":301,"endColumn":6},{"ruleId":"curly","severity":1,"message":"Expected { after 'if' condition.","line":297,"column":33,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":297,"endColumn":53,"fix":{"range":[9383,9403],"text":"{return inputElement;}"}},{"ruleId":"curly","severity":1,"message":"Expected { after 'if' condition.","line":298,"column":34,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":298,"endColumn":54,"fix":{"range":[9437,9457],"text":"{return submitButton;}"}},{"ruleId":"curly","severity":1,"message":"Expected { after 'if' condition.","line":299,"column":36,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":299,"endColumn":57,"fix":{"range":[9493,9514],"text":"{return outputElement;}"}},{"ruleId":"curly","severity":1,"message":"Expected { after 'if' condition.","line":300,"column":38,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":300,"endColumn":73,"fix":{"range":[9552,9587],"text":"{return outputElement.parentElement;}"}},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 5. Maximum allowed is 2.","line":313,"column":38,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":320,"endColumn":6},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 5. Maximum allowed is 2.","line":350,"column":35,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":355,"endColumn":6},{"ruleId":"curly","severity":1,"message":"Expected { after 'if' condition.","line":351,"column":33,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":351,"endColumn":53,"fix":{"range":[11383,11403],"text":"{return inputElement;}"}},{"ruleId":"curly","severity":1,"message":"Expected { after 'if' condition.","line":352,"column":34,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":352,"endColumn":54,"fix":{"range":[11437,11457],"text":"{return submitButton;}"}},{"ruleId":"curly","severity":1,"message":"Expected { after 'if' condition.","line":353,"column":36,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":353,"endColumn":57,"fix":{"range":[11493,11514],"text":"{return outputElement;}"}},{"ruleId":"curly","severity":1,"message":"Expected { after 'if' condition.","line":354,"column":38,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":354,"endColumn":73,"fix":{"range":[11552,11587],"text":"{return outputElement.parentElement;}"}},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 3. Maximum allowed is 2.","line":368,"column":38,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":372,"endColumn":6}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":11,"source":"import { describe, it, expect, beforeEach, jest } from '@jest/globals';\nimport { initialiseModule } from '../../src/browser/toys.js';\nimport { enableInteractiveControls } from '../../src/browser/toys.js'; // Adjust path as needed\n\ndescribe('enableInteractiveControls', () => {\n  let inputElement;\n  let submitButton;\n  let outputElement;\n  let parentElement;\n  let mockParentClassList;\n\n  beforeEach(() => {\n    // Mock input element\n    inputElement = { disabled: true };\n\n    // Mock submit button\n    submitButton = { disabled: true };\n\n    // Mock parent element with classList mock\n    mockParentClassList = {\n      containsWarning: true, // Simple state to track the class\n      add: jest.fn(), // Not strictly needed for this test, but good practice\n      remove: jest.fn((className) => {\n        if (className === 'warning') {\n          mockParentClassList.containsWarning = false;\n        }\n      }),\n      contains: jest.fn((className) => {\n        return className === 'warning' && mockParentClassList.containsWarning;\n      })\n    };\n    parentElement = { \n      classList: mockParentClassList,\n      appendChild: jest.fn() // Not needed, but completes the mock\n    };\n\n    // Mock output element and link its parent\n    outputElement = { \n      textContent: '',\n      parentElement: parentElement\n    };\n    \n  });\n\n  it('enables input and submit button', () => {\n    enableInteractiveControls(inputElement, submitButton, outputElement);\n    expect(inputElement.disabled).toBe(false);\n    expect(submitButton.disabled).toBe(false);\n  });\n\n  it('sets output textContent to \"Ready for input\"', () => {\n    enableInteractiveControls(inputElement, submitButton, outputElement);\n    expect(outputElement.textContent).toBe('Ready for input');\n  });\n\n  it('removes \"warning\" class from parent element', () => {\n    // Check initial state using the mock\n    expect(parentElement.classList.contains('warning')).toBe(true);\n    enableInteractiveControls(inputElement, submitButton, outputElement);\n    // Check that remove was called\n    expect(parentElement.classList.remove).toHaveBeenCalledWith('warning');\n    // Check final state using the mock\n    expect(parentElement.classList.contains('warning')).toBe(false);\n  });\n});\n\ndescribe('initialiseModule', () => {\n  it('can be invoked with minimal arguments', () => {\n    const article = {};\n    const functionName = 'process';\n    const globalState = {};\n    const createEnv = () => ({});\n    const error = () => {};\n    const fetch = () => {};\n    const mockClassList = { remove: jest.fn() };\n    const outputElement = { textContent: '', parentElement: { classList: mockClassList } };\n    const dom = {\n      querySelector: (el, selector) => {\n        if (selector === 'input' || selector === 'button') return {};\n        if (selector === 'p.output') return outputElement;\n        if (selector === 'div.output') return outputElement.parentElement;\n        return {};\n      },\n      addEventListener: jest.fn()\n    };\n\n    const result = initialiseModule(article, functionName, globalState, createEnv, error, fetch, dom);\n    const module = { process: () => 'ok' };\n    const response = result(module);\n\n    expect(response).toBeUndefined();\n  });\n});\n\nimport { getDeepStateCopy } from '../../src/browser/toys.js';\n\ndescribe('getDeepStateCopy', () => {\n  it('returns a deep copy of the global state object', () => {\n    const globalState = {\n      level1: {\n        level2: {\n          value: 'original'\n        }\n      }\n    };\n\n    const copy = getDeepStateCopy(globalState);\n\n    expect(copy).toEqual(globalState);\n    expect(copy).not.toBe(globalState);\n    expect(copy.level1).not.toBe(globalState.level1);\n    expect(copy.level1.level2).not.toBe(globalState.level1.level2);\n\n    // Modify copy to ensure it's a deep copy\n    copy.level1.level2.value = 'modified';\n    expect(globalState.level1.level2.value).toBe('original');\n  });\n});\n\nimport { createHandleSubmit, initializeInteractiveComponent, initializeVisibleComponents, handleModuleError } from '../../src/browser/toys.js';\n\ndescribe('createHandleSubmit', () => {\n  let mockFetch;\n  let inputElement;\n  let outputElement;\n  let handleSubmit;\n  let processingFunction;\n  let parentElement;\n  let setTextContent;\n  let dom;\n  let createEnv;\n  let errorFn;\n  let addWarningFn;\n  let createElement;\n  let stopDefault;\n\n  beforeEach(() => {\n    inputElement = { value: 'hello', disabled: false };\n    outputElement = { textContent: '', parentElement: { classList: { add: jest.fn(), remove: jest.fn() } } };\n    setTextContent = jest.fn();\n    stopDefault = jest.fn();\n    addWarningFn = jest.fn();\n    createElement = jest.fn();\n    dom = { createElement, setTextContent, stopDefault, addWarningFn };\n    mockFetch = jest.fn();\n    global.fetch = mockFetch;\n\n    const globalState = {};\n    processingFunction = jest.fn(async (input) => 'transformed');\n    createEnv = () => ({});\n    errorFn = jest.fn();\n\n    handleSubmit = createHandleSubmit(\n      inputElement,\n      outputElement,\n      parentElement, // Pass the mock parent element\n      globalState,\n      processingFunction,\n      stopDefault,\n      createEnv,\n      errorFn,\n      addWarningFn,\n      mockFetch,\n      createElement,\n      setTextContent,\n      dom\n    );\n  });\n\n  it('fetches from URL if processingFunction returns a request object', async () => {\n    const mockFetchFn = jest.fn(() =>\n      Promise.resolve({ text: () => Promise.resolve('fetched content') })\n    );\n\n    processingFunction = jest.fn(() =>\n      JSON.stringify({ request: { url: 'https://example.com/data' } })\n    );\n\n    const handleSubmitWithFetch = createHandleSubmit(\n      inputElement,\n      outputElement,\n      parentElement,\n      {},\n      processingFunction,\n      createEnv,\n      errorFn,\n      mockFetchFn,\n      dom\n    );\n\n    await handleSubmitWithFetch(new Event('submit'));\n\n    expect(mockFetchFn).toHaveBeenCalledWith('https://example.com/data');\n    await new Promise(resolve => setTimeout(resolve, 0));\n    expect(setTextContent).toHaveBeenCalledWith(outputElement, 'fetched content');\n  });\n\n  it('handles fetch failure if request URL is unreachable', async () => {\n    const mockFetchFn = jest.fn(() =>\n      Promise.reject(new Error('Network failure'))\n    );\n\n    processingFunction = jest.fn(() =>\n      JSON.stringify({ request: { url: 'https://example.com/fail' } })\n    );\n\n    const handleSubmitWithFailingFetch = createHandleSubmit(\n      inputElement,\n      outputElement,\n      parentElement,\n      {},\n      processingFunction,\n      createEnv,\n      errorFn,\n      mockFetchFn,\n      dom\n    );\n\n    await handleSubmitWithFailingFetch(new Event('submit'));\n\n    await new Promise(resolve => setTimeout(resolve, 0));\n    expect(mockFetchFn).toHaveBeenCalledWith('https://example.com/fail');\n    expect(errorFn).toHaveBeenCalledWith('Error fetching request URL:', expect.any(Error));\n    expect(setTextContent).toHaveBeenCalledWith(outputElement, expect.stringMatching(/Error fetching URL: Network failure/));\n    expect(addWarningFn).toHaveBeenCalledWith(outputElement);\n  });\n\n  it('handles error thrown by processingFunction', async () => {\n    const mockFetchFn = jest.fn(); // Should not be called\n\n    processingFunction = jest.fn(() => {\n      throw new Error('processing error');\n    });\n\n    const handleSubmitThrowing = createHandleSubmit(\n      inputElement,\n      outputElement,\n      parentElement,\n      {},\n      processingFunction,\n      createEnv,\n      errorFn,\n      mockFetchFn,\n      dom\n    );\n\n    await handleSubmitThrowing(new Event('submit'));\n\n    expect(mockFetchFn).not.toHaveBeenCalled();\n    expect(errorFn).toHaveBeenCalledWith('Error processing input:', expect.any(Error));\n    expect(setTextContent).toHaveBeenCalledWith(outputElement, expect.stringMatching(/Error: processing error/));\n    expect(addWarningFn).toHaveBeenCalledWith(outputElement);\n  });\n\n  it('handles being called without an event', async () => {\n    const stopDefault = jest.fn();\n    const createEnv = () => ({});\n    const errorFn = jest.fn();\n    const addWarningFn = jest.fn();\n    const fetchFn = jest.fn();\n    const processingFunction = jest.fn(() => 'result from no-event');\n    const createElement = jest.fn();\n\n    const input = { value: 'input without event' };\n    const output = { textContent: '', parentElement: { classList: { add: jest.fn(), remove: jest.fn() } } };\n\n    const handleSubmitNoEvent = createHandleSubmit(\n      input,\n      output,\n      parentElement,\n      {},\n      processingFunction,\n      createEnv,\n      errorFn,\n      fetchFn,\n      dom\n    );\n\n    await handleSubmitNoEvent(); // no event passed\n\n    await new Promise(resolve => setTimeout(resolve, 0));\n    \n    expect(stopDefault).not.toHaveBeenCalled();\n    expect(processingFunction).toHaveBeenCalledWith('input without event', expect.any(Object));\n    expect(setTextContent).toHaveBeenCalledWith(output, 'result from no-event');\n  });\n});\n\ndescribe('initializeInteractiveComponent', () => {\n  it('attaches click and keypress listeners with expected arguments', () => {\n    const article = {};\n    const inputElement = { value: 'test', disabled: false };\n    const submitButton = { disabled: false };\n    const outputElement = { textContent: '', parentElement: { classList: { remove: jest.fn() } } };\n\n    const querySelector = jest.fn((el, selector) => {\n      if (selector === 'input') return inputElement;\n      if (selector === 'button') return submitButton;\n      if (selector === 'p.output') return outputElement;\n      if (selector === 'div.output') return outputElement.parentElement; // Return the parent element when asked for output container\n    });\n\n    const globalState = {};\n    const createEnvFn = () => ({});\n    const errorFn = jest.fn();\n    const fetchFn = jest.fn();\n    const createElement = jest.fn();\n    const setTextContent = jest.fn();\n    const stopDefault = jest.fn();\n    const addWarning = jest.fn();\n    const listeners = {};\n\n    const addEventListener = jest.fn((element, event, handler) => {\n      if (element === inputElement && event === 'keypress') {\n        listeners.keypress = handler;\n      }\n      if (element === submitButton && event === 'click') {\n        listeners.click = handler;\n      }\n    });\n    const dom = { createElement, setTextContent, stopDefault, addWarning, addEventListener, querySelector };\n\n    const processingFunction = jest.fn(() => 'processed result');\n\n    initializeInteractiveComponent(\n      article,\n      processingFunction,\n      globalState,\n      createEnvFn,\n      errorFn,\n      fetchFn,\n      dom\n    );\n\n    expect(addEventListener).toHaveBeenCalledTimes(2);\n    expect(addEventListener).toHaveBeenCalledWith(submitButton, 'click', expect.any(Function));\n    expect(addEventListener).toHaveBeenCalledWith(inputElement, 'keypress', expect.any(Function));\n\n    listeners.keypress({ key: 'Enter', preventDefault: jest.fn() });\n\n    expect(processingFunction).toHaveBeenCalledWith('test', expect.any(Object));\n  });\n\n  it('does not call handleSubmit when a non-Enter key is pressed', () => {\n    const article = {};\n    const inputElement = { value: 'test', disabled: false };\n    const submitButton = { disabled: false };\n    const outputElement = { textContent: '', parentElement: { classList: { remove: jest.fn() } } };\n\n    const querySelector = jest.fn((el, selector) => {\n      if (selector === 'input') return inputElement;\n      if (selector === 'button') return submitButton;\n      if (selector === 'p.output') return outputElement;\n      if (selector === 'div.output') return outputElement.parentElement; // Return the parent element when asked for output container\n    });\n\n    const globalState = {};\n    const stopDefaultFn = jest.fn();\n    const createEnvFn = () => ({});\n    const errorFn = jest.fn();\n    const addWarningFn = jest.fn();\n    const fetchFn = jest.fn();\n    const processingFunction = jest.fn(() => 'processed result');\n    const listeners = {};\n    const createElement = jest.fn();\n    const setTextContent = jest.fn();\n\n    const addEventListener = jest.fn((element, event, handler) => {\n      if (element === inputElement && event === 'keypress') {\n        listeners.keypress = handler;\n      }\n    });\n    const dom = { createElement, setTextContent, stopDefaultFn, addWarningFn, addEventListener, querySelector };\n\n    initializeInteractiveComponent(\n      article,\n      processingFunction,\n      globalState,\n      createEnvFn,\n      errorFn,\n      fetchFn,\n      dom\n    );\n\n    listeners.keypress({ key: 'a', preventDefault: jest.fn() });\n\n    expect(processingFunction).not.toHaveBeenCalled();\n  });\n});\n\ndescribe('initializeVisibleComponents', () => {\n  it('warns if there are no interactive components', () => {\n    const win = { interactiveComponents: [] };\n    const doc = {};\n    const logFn = jest.fn();\n    const warnFn = jest.fn();\n    const getElementByIdFn = jest.fn();\n    const createIntersectionObserverFn = jest.fn();\n\n    initializeVisibleComponents(win, doc, logFn, warnFn, getElementByIdFn, createIntersectionObserverFn);\n\n    expect(warnFn).toHaveBeenCalledWith('No interactive components found to initialize');\n  });\n\n  it('initializes and observes a valid interactive component', () => {\n    const mockArticle = {};\n    const mockObserver = { observe: jest.fn() };\n\n    const win = {\n      interactiveComponents: [\n        { id: 'test-id', modulePath: 'path/to/module', functionName: 'initFunction' }\n      ]\n    };\n    const doc = {};\n    const logFn = jest.fn();\n    const warnFn = jest.fn();\n    const getElementByIdFn = jest.fn(() => mockArticle);\n    const createIntersectionObserverFn = jest.fn(() => mockObserver);\n\n    initializeVisibleComponents(win, doc, logFn, warnFn, getElementByIdFn, createIntersectionObserverFn);\n\n    expect(logFn).toHaveBeenCalledWith(\n      'Initializing',\n      1,\n      'interactive components via IntersectionObserver'\n    );\n    expect(getElementByIdFn).toHaveBeenCalledWith(doc, 'test-id');\n    expect(createIntersectionObserverFn).toHaveBeenCalledWith(mockArticle, 'path/to/module', 'initFunction');\n    expect(mockObserver.observe).toHaveBeenCalledWith(mockArticle);\n  });\n\n  it('warns when article element is missing for a component', () => {\n    const win = {\n      interactiveComponents: [\n        { id: 'missing-id', modulePath: 'path/to/module', functionName: 'initFunction' }\n      ]\n    };\n    const doc = {};\n    const logFn = jest.fn();\n    const warnFn = jest.fn();\n    const getElementByIdFn = jest.fn(() => null);\n    const createIntersectionObserverFn = jest.fn();\n\n    initializeVisibleComponents(win, doc, logFn, warnFn, getElementByIdFn, createIntersectionObserverFn);\n\n    expect(getElementByIdFn).toHaveBeenCalledWith(doc, 'missing-id');\n    expect(createIntersectionObserverFn).not.toHaveBeenCalled();\n    expect(warnFn).toHaveBeenCalledWith(\n      'Could not find article element with ID: missing-id for component initialization.'\n    );\n  });\n\n  it('attempts to initialize all interactive components, regardless of missing fields', () => {\n    const win = {\n      interactiveComponents: [\n        { id: 'a', modulePath: 'valid/path', functionName: '' },\n        { id: 'b', modulePath: '', functionName: 'fn' },\n        { id: 'c', modulePath: null, functionName: 'fn' },\n        { id: 'd', modulePath: 'valid', functionName: 'fn' }\n      ]\n    };\n    const doc = {};\n    const logFn = jest.fn();\n    const warnFn = jest.fn();\n    const getElementByIdFn = jest.fn(() => ({}));\n    const createIntersectionObserverFn = jest.fn(() => ({ observe: jest.fn() }));\n\n    initializeVisibleComponents(win, doc, logFn, warnFn, getElementByIdFn, createIntersectionObserverFn);\n\n    expect(createIntersectionObserverFn).toHaveBeenCalledTimes(4);\n  });\n});\n\ndescribe('handleModuleError', () => {\n  it('calls the error function with the correct message and error object', () => {\n    const errorFn = jest.fn();\n    const error = new Error('dynamic import failed');\n    const handler = handleModuleError('some/module/path.js', errorFn);\n    handler(error);\n    expect(errorFn).toHaveBeenCalledWith('Error loading module some/module/path.js:', error);\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-multi-spaces","replacedBy":["@stylistic/js/no-multi-spaces"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multi-spaces","url":"https://eslint.style/rules/js/no-multi-spaces"}}]}}]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/test/generator/generator.test.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-multi-spaces","replacedBy":["@stylistic/js/no-multi-spaces"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multi-spaces","url":"https://eslint.style/rules/js/no-multi-spaces"}}]}}]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/test/presenters/paragraph.test.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'jest' is defined but never used.","line":2,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":28,"suggestions":[{"messageId":"removeVar","data":{"varName":"jest"},"fix":{"range":[42,48],"text":""},"desc":"Remove unused variable 'jest'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// paragraph.test.js\nimport { describe, it, jest, expect } from '@jest/globals';\nimport { createParagraphElement } from '../../src/presenters/paragraph';\n\ndescribe('createParagraphElement', () => {\n  it('creates a <p> element with the correct text content', () => {\n    const mockElement = { textContent: '' };\n    const dom = {\n      createElement: () => mockElement,\n      setTextContent: (el, text) => { el.textContent = text; }\n    };\n\n    const result = createParagraphElement('Hello world', dom);\n\n    expect(result).toBe(mockElement);\n    expect(result.textContent).toBe('Hello world');\n  });\n\n  it('works with different input strings', () => {\n    const mockElement = { textContent: '' };\n    const dom = {\n      createElement: () => mockElement,\n      setTextContent: (el, text) => { el.textContent = text; }\n    };\n\n    const result = createParagraphElement('Another test string', dom);\n\n    expect(result.textContent).toBe('Another test string');\n  });\n});","usedDeprecatedRules":[{"ruleId":"no-multi-spaces","replacedBy":["@stylistic/js/no-multi-spaces"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multi-spaces","url":"https://eslint.style/rules/js/no-multi-spaces"}}]}}]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/test/toys/2024-10-02/hello.test.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-multi-spaces","replacedBy":["@stylistic/js/no-multi-spaces"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multi-spaces","url":"https://eslint.style/rules/js/no-multi-spaces"}}]}}]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/test/toys/2025-03-19/identity.test.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-multi-spaces","replacedBy":["@stylistic/js/no-multi-spaces"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multi-spaces","url":"https://eslint.style/rules/js/no-multi-spaces"}}]}}]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/test/toys/2025-03-21/booleanCoercer.test.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-multi-spaces","replacedBy":["@stylistic/js/no-multi-spaces"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multi-spaces","url":"https://eslint.style/rules/js/no-multi-spaces"}}]}}]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/test/toys/2025-03-21/italics.test.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-multi-spaces","replacedBy":["@stylistic/js/no-multi-spaces"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multi-spaces","url":"https://eslint.style/rules/js/no-multi-spaces"}}]}}]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/test/toys/2025-03-26/prettyFloat.test.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-multi-spaces","replacedBy":["@stylistic/js/no-multi-spaces"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multi-spaces","url":"https://eslint.style/rules/js/no-multi-spaces"}}]}}]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/test/toys/2025-03-28/rand.test.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-multi-spaces","replacedBy":["@stylistic/js/no-multi-spaces"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multi-spaces","url":"https://eslint.style/rules/js/no-multi-spaces"}}]}}]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/test/toys/2025-03-29/fishingGame.test.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-multi-spaces","replacedBy":["@stylistic/js/no-multi-spaces"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multi-spaces","url":"https://eslint.style/rules/js/no-multi-spaces"}}]}}]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/test/toys/2025-03-29/get.test.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-multi-spaces","replacedBy":["@stylistic/js/no-multi-spaces"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multi-spaces","url":"https://eslint.style/rules/js/no-multi-spaces"}}]}}]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/test/toys/2025-03-29/setTemporary.test.js","messages":[{"ruleId":"prefer-const","severity":1,"message":"'input' is never reassigned. Use 'const' instead.","line":114,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":114,"endColumn":14,"fix":{"range":[5069,5107],"text":"const input = JSON.stringify([1, 2, 3]);"}},{"ruleId":"no-multi-spaces","severity":1,"message":"Multiple spaces found before '// This should...'.","line":165,"column":13,"nodeType":"Line","messageId":"multipleSpaces","endLine":165,"endColumn":21,"fix":{"range":[7326,7334],"text":" "}},{"ruleId":"no-multi-spaces","severity":1,"message":"Multiple spaces found before '// Preserved f...'.","line":174,"column":16,"nodeType":"Line","messageId":"multipleSpaces","endLine":174,"endColumn":23,"fix":{"range":[7560,7567],"text":" "}},{"ruleId":"no-multi-spaces","severity":1,"message":"Multiple spaces found before '// Added'.","line":176,"column":15,"nodeType":"Line","messageId":"multipleSpaces","endLine":176,"endColumn":23,"fix":{"range":[7646,7654],"text":" "}},{"ruleId":"no-multi-spaces","severity":1,"message":"Multiple spaces found before '// Overwrite s...'.","line":206,"column":12,"nodeType":"Line","messageId":"multipleSpaces","endLine":206,"endColumn":27,"fix":{"range":[9076,9091],"text":" "}},{"ruleId":"no-multi-spaces","severity":1,"message":"Multiple spaces found before '// Overwrite a...'.","line":207,"column":18,"nodeType":"Line","messageId":"multipleSpaces","endLine":207,"endColumn":27,"fix":{"range":[9140,9149],"text":" "}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":6,"source":"import { describe, test, expect, beforeEach, jest } from '@jest/globals';\nimport { setTemporary } from '../../../src/toys/2025-03-29/setTemporary.js';\n\ndescribe('setTemporary function (getData -> merge -> setData)', () => {\n  let mockGetData;\n  let mockSetData;\n  let initialData; // The object returned by mockGetData\n  let env;\n\n  beforeEach(() => {\n    // Start with fresh, potentially immutable data for getData\n    initialData = Object.freeze({\n      existing: 'value',\n      // 'temporary' might exist or not initially\n    });\n    mockGetData = jest.fn().mockReturnValue(initialData);\n    mockSetData = jest.fn(); // Mock for setData\n    env = new Map([\n      ['getData', mockGetData],\n      ['setData', mockSetData] // Add setData mock to env\n    ]);\n  });\n\n  test('should call setData with merged JSON when temporary exists', () => {\n    // Modify initialData for this test case before freezing (or create a new one)\n    initialData = Object.freeze({\n        existing: 'value',\n        temporary: { initial: 'data' }\n    });\n    mockGetData.mockReturnValue(initialData);\n\n    const inputJson = JSON.stringify({ newKey: 'newValue', initial: 'overwritten' });\n    const expectedFinalData = {\n      existing: 'value',\n      temporary: { initial: 'overwritten', newKey: 'newValue' }\n    };\n    \n    const result = setTemporary(inputJson, env);\n\n    expect(result).toBe('Success: Temporary data deep merged.'); // Updated message\n    expect(mockGetData).toHaveBeenCalledTimes(1);\n    expect(mockSetData).toHaveBeenCalledTimes(1);\n    // Use expect.objectContaining or toEqual for deep comparison\n    expect(mockSetData).toHaveBeenCalledWith(expect.objectContaining(expectedFinalData));\n    // Ensure the object passed to setData is not the same ref as initialData\n    expect(mockSetData.mock.calls[0][0]).not.toBe(initialData);\n    // Ensure the temporary object within is also a new reference\n    if(initialData.temporary) {\n        expect(mockSetData.mock.calls[0][0].temporary).not.toBe(initialData.temporary);\n    }\n  });\n\n  test('should call setData creating temporary if it does not exist', () => {\n    // initialData already lacks temporary from beforeEach\n    const inputJson = JSON.stringify({ firstKey: 123 });\n    const expectedFinalData = {\n        existing: 'value',\n        temporary: { firstKey: 123 }\n    };\n\n    const result = setTemporary(inputJson, env);\n\n    expect(result).toBe('Success: Temporary data deep merged.'); // Updated message\n    expect(mockGetData).toHaveBeenCalledTimes(1);\n    expect(mockSetData).toHaveBeenCalledTimes(1);\n    expect(mockSetData).toHaveBeenCalledWith(expect.objectContaining(expectedFinalData));\n    expect(mockSetData.mock.calls[0][0]).not.toBe(initialData);\n  });\n\n  test('should call setData creating temporary if it exists but is not a valid object', () => {\n    initialData = Object.freeze({ existing: 'value', temporary: 'a string' });\n    mockGetData.mockReturnValue(initialData);\n    const inputJson = JSON.stringify({ key: 'val' });\n    const expectedFinalData = { existing: 'value', temporary: { key: 'val' } };\n\n    const result = setTemporary(inputJson, env);\n    expect(result).toBe('Success: Temporary data deep merged.'); // Updated message\n    expect(mockSetData).toHaveBeenCalledWith(expect.objectContaining(expectedFinalData));\n    expect(mockSetData.mock.calls[0][0]).not.toBe(initialData);\n\n    // Try with null\n    initialData = Object.freeze({ existing: 'value', temporary: null });\n    mockGetData.mockReturnValue(initialData);\n    const inputJson2 = JSON.stringify({ another: true });\n    const expectedFinalData2 = { existing: 'value', temporary: { another: true } };\n    const result2 = setTemporary(inputJson2, env);\n    expect(result2).toBe('Success: Temporary data deep merged.'); // Updated message\n    expect(mockSetData).toHaveBeenCalledWith(expect.objectContaining(expectedFinalData2));\n    expect(mockSetData.mock.calls[1][0]).not.toBe(initialData);\n    \n    // Try with array\n    initialData = Object.freeze({ existing: 'value', temporary: [1,2] });\n    mockGetData.mockReturnValue(initialData);\n    const inputJson3 = JSON.stringify({ third: 3 });\n    const expectedFinalData3 = { existing: 'value', temporary: { third: 3 } };\n    const result3 = setTemporary(inputJson3, env);\n    expect(result3).toBe('Success: Temporary data deep merged.'); // Updated message\n    expect(mockSetData).toHaveBeenCalledWith(expect.objectContaining(expectedFinalData3));\n    expect(mockSetData.mock.calls[2][0]).not.toBe(initialData);\n    \n    expect(mockGetData).toHaveBeenCalledTimes(3);\n    expect(mockSetData).toHaveBeenCalledTimes(3);\n  });\n\n  test('should return error for invalid JSON input and not call setData', () => {\n    const input = 'not json';\n    const result = setTemporary(input, env);\n    expect(result).toMatch(/^Error: Invalid JSON input./);\n    expect(mockGetData).not.toHaveBeenCalled();\n    expect(mockSetData).not.toHaveBeenCalled(); // Verify setData not called\n  });\n\n  test('should return error if input JSON is not a plain object and not call setData', () => {\n    let input = JSON.stringify([1, 2, 3]); // Array\n    expect(setTemporary(input, env)).toBe(\"Error: Input JSON must be a plain object.\");\n    expect(mockGetData).not.toHaveBeenCalled();\n    expect(mockSetData).not.toHaveBeenCalled();\n  });\n\n  test('should return error if getData or setData function is missing in env', () => {\n    env.delete('getData');\n    expect(setTemporary('{}', env)).toBe(\"Error: 'getData' function not found in env.\");\n    env.set('getData', mockGetData).delete('setData'); // Restore getData, remove setData\n    expect(setTemporary('{}', env)).toBe(\"Error: 'setData' function not found in env.\");\n  });\n\n  test('should return error if getData does not return an object and not call setData', () => {\n    mockGetData.mockReturnValue('not an object');\n    expect(setTemporary('{}', env)).toBe(\"Error: 'getData' did not return a valid object.\");\n    expect(mockSetData).not.toHaveBeenCalled();\n  });\n\n  test('should return error if getData throws an error and not call setData', () => {\n    const errorMessage = 'Failed to retrieve data';\n    mockGetData.mockImplementation(() => { throw new Error(errorMessage); });\n    expect(setTemporary('{ \"a\": 1 }', env)).toBe(`Error updating temporary data: ${errorMessage}`);\n    expect(mockSetData).not.toHaveBeenCalled();\n  });\n\n  test('should return error if setData throws an error', () => {\n      const errorMessage = 'Failed to save data';\n      mockSetData.mockImplementation(() => { throw new Error(errorMessage); });\n      const inputJson = JSON.stringify({ key: 'value' });\n      expect(setTemporary(inputJson, env)).toBe(`Error updating temporary data: ${errorMessage}`);\n      expect(mockGetData).toHaveBeenCalledTimes(1); // getData was called\n      expect(mockSetData).toHaveBeenCalledTimes(1); // setData was called (and threw)\n  });\n\n  test('should deep merge nested objects within temporary', () => {\n    initialData = Object.freeze({\n      existing: 'value',\n      temporary: {\n        level1: {\n          a: 1,\n          b: { c: 2 }\n        },\n        other: 'abc'\n      }\n    });\n    mockGetData.mockReturnValue(initialData);\n\n    const inputJson = JSON.stringify({\n      level1: {\n        b: { d: 3 }, // This should merge with existing level1.b, not replace it\n        e: 4        // This should be added to level1\n      },\n      newProp: true // Add a new top-level prop to temporary\n    });\n    \n    const expectedFinalData = {\n      existing: 'value',\n      temporary: {\n        level1: {\n          a: 1,       // Preserved from initial\n          b: { c: 2, d: 3 }, // Merged\n          e: 4        // Added\n        },\n        other: 'abc', // Preserved from initial\n        newProp: true // Added\n      }\n    };\n\n    const result = setTemporary(inputJson, env);\n\n    expect(result).toBe('Success: Temporary data deep merged.'); // Updated message\n    expect(mockGetData).toHaveBeenCalledTimes(1);\n    expect(mockSetData).toHaveBeenCalledTimes(1);\n    // Use toEqual for deep comparison of the final object structure\n    expect(mockSetData).toHaveBeenCalledWith(expect.objectContaining(expectedFinalData)); // Check overall structure\n    expect(mockSetData.mock.calls[0][0].temporary).toEqual(expectedFinalData.temporary); // Deep check temporary specifically\n    // Check that references were changed (deep clone + merge creates new objects)\n    expect(mockSetData.mock.calls[0][0]).not.toBe(initialData);\n    expect(mockSetData.mock.calls[0][0].temporary).not.toBe(initialData.temporary);\n    expect(mockSetData.mock.calls[0][0].temporary.level1).not.toBe(initialData.temporary.level1);\n    expect(mockSetData.mock.calls[0][0].temporary.level1.b).not.toBe(initialData.temporary.level1.b);\n  });\n\n  test('should overwrite non-object properties during deep merge', () => {\n    initialData = Object.freeze({\n      temporary: { a: 1, b: 'string', c: [1, 2] }\n    });\n    mockGetData.mockReturnValue(initialData);\n\n    const inputJson = JSON.stringify({\n      a: { nested: true }, // Overwrite number with object\n      b: 2,               // Overwrite string with number\n      c: { d: 3 }         // Overwrite array with object\n    });\n    \n    const expectedTemporary = {\n      a: { nested: true },\n      b: 2,\n      c: { d: 3 }\n    };\n\n    setTemporary(inputJson, env);\n    expect(mockSetData).toHaveBeenCalledWith(expect.objectContaining({ temporary: expectedTemporary }));\n  });\n\n  test('should handle merging onto an empty initial temporary object', () => {\n      initialData = Object.freeze({ existing: 'value', temporary: {} });\n      mockGetData.mockReturnValue(initialData);\n      const inputJson = JSON.stringify({ level1: { a: 1 } });\n      const expectedTemporary = { level1: { a: 1 } };\n\n      setTemporary(inputJson, env);\n      expect(mockSetData).toHaveBeenCalledWith(expect.objectContaining({ temporary: expectedTemporary }));\n  });\n\n  test('should handle merging onto a non-existent initial temporary object', () => {\n      initialData = Object.freeze({ existing: 'value' }); // No temporary key\n      mockGetData.mockReturnValue(initialData);\n      const inputJson = JSON.stringify({ level1: { a: 1 } });\n      const expectedTemporary = { level1: { a: 1 } };\n\n      setTemporary(inputJson, env);\n      expect(mockSetData).toHaveBeenCalledWith(expect.objectContaining({ temporary: expectedTemporary }));\n  });\n\n  test('should preserve existing temporary data if source is not object', () => {\n    initialData = Object.freeze({ existing: 'value', temporary: { key: 'val' } });\n    mockGetData.mockReturnValue(initialData);\n\n    const inputJson = JSON.stringify(null); // Valid JSON but not an object\n\n    const result = setTemporary(inputJson, env);\n    expect(result).toBe(\"Error: Input JSON must be a plain object.\");\n    expect(mockSetData).not.toHaveBeenCalled();\n  });\n\n  test('should overwrite non-object temporary with object from input', () => {\n    initialData = Object.freeze({ existing: 'value', temporary: 42 });\n    mockGetData.mockReturnValue(initialData);\n    const inputJson = JSON.stringify({ newKey: 'newVal' });\n\n    const expected = { existing: 'value', temporary: { newKey: 'newVal' } };\n    const result = setTemporary(inputJson, env);\n    expect(result).toBe(\"Success: Temporary data deep merged.\");\n    expect(mockSetData).toHaveBeenCalledWith(expect.objectContaining(expected));\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-multi-spaces","replacedBy":["@stylistic/js/no-multi-spaces"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multi-spaces","url":"https://eslint.style/rules/js/no-multi-spaces"}}]}}]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/test/toys/2025-03-30/cyberpunkAdventure.test.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-multi-spaces","replacedBy":["@stylistic/js/no-multi-spaces"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multi-spaces","url":"https://eslint.style/rules/js/no-multi-spaces"}}]}}]},{"filePath":"/Users/matthew.heard/Code/Matt/dadeto/test/toys/2025-04-05/httpRequest.test.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-multi-spaces","replacedBy":["@stylistic/js/no-multi-spaces"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multi-spaces","url":"https://eslint.style/rules/js/no-multi-spaces"}}]}}]}]