[32m21:05:08 (1038) INFO ProjectReader[39m Found 43 of 390 file(s) to be mutated.
[32m21:05:09 (1038) INFO Instrumenter[39m Instrumented 43 source file(s) with 3139 mutant(s)
[32m21:05:09 (1038) INFO ConcurrencyTokenProvider[39m Creating 7 test runner process(es).
[32m21:05:09 (1038) INFO DryRunExecutor[39m Starting initial test run (jest test runner with "perTest" coverage analysis). This may take a while.
[32m21:05:21 (1038) INFO DryRunExecutor[39m Initial test run succeeded. Ran 383 tests in 11 seconds (net 6013 ms, overhead 5913 ms).
[33m21:05:21 (1038) WARN MutantTestPlanner[39m Detected 253 static mutants (8% of total) that are estimated to take 54% of the time running the tests!
  You might want to enable "ignoreStatic" to ignore these static mutants for your next run. 
  For more information about static mutants visit: https://stryker-mutator.io/docs/mutation-testing-elements/static-mutants
  (disable "warnings.slow" to ignore this warning)

All tests
  browser
    audio-controls.test.js
      ✓ createPlayClickHandler invokes stopDefault when the play button is clicked [line 31] (killed 2)
      ~ createPlayClickHandler invokes playAudio to start playback when the play button is clicked [line 39] (covered 2)
      ✓ createPauseClickHandler invokes stopDefault when the pause button is clicked [line 64] (killed 2)
      ~ createPauseClickHandler invokes pauseAudio to pause playback when the pause button is clicked [line 72] (covered 2)
      ✓ createStopClickHandler calls stopDefault when the stop button is clicked [line 96] (killed 2)
      ~ createStopClickHandler calls pauseAudio to pause playback when the stop button is clicked [line 104] (covered 2)
      ~ createStopClickHandler resets audio.currentTime to 0 when the stop button is clicked [line 112] (covered 2)
      ✓ createUpdateTimeDisplay updates the time display with the current time of the audio [line 129] (killed 4)
      ~ createUpdateTimeDisplay handles when audio currentTime is 0 [line 141] (covered 7)
      ✓ createUpdateTimeDisplay displays minutes and seconds when currentTime is 60 [line 153] (killed 3)
      ✓ setupAudio assigns a default id to an audio element with an empty id [line 192] (killed 6)
      ~ setupAudio assigns a default id to an audio element with undefined id [line 218] (covered 33)
      ✓ setupAudio does not overwrite existing audio element ids [line 243] (killed 1)
      ✓ setupAudio adds audio-controls class to the created control element [line 269] (killed 1)
      ✓ setupAudio sets correct text on control buttons [line 295] (killed 3)
      ✓ setupAudio adds a time display element with class "audio-time" [line 322] (killed 1)
    clearDisposers.test.js
      ✓ clearDisposers calls all functions in the disposers array [line 9] (killed 2)
      ~ clearDisposers clears the disposers array after calling all functions [line 23] (covered 2)
      ~ clearDisposers handles an empty array without throwing [line 37] (covered 2)
      ~ clearDisposers calls functions in the order they appear in the array [line 46] (covered 2)
    data.test.js
      ✓ shouldCopyStateForFetch returns true for idle [line 5] (killed 7)
      ✓ shouldCopyStateForFetch returns true for error [line 8] (killed 3)
      ✓ shouldCopyStateForFetch returns false for loaded [line 11] (killed 1)
      ~ shouldCopyStateForFetch returns false for loading [line 14] (covered 8)
      ✓ deepMerge should use the if branch when shouldDeepMerge is true (deep merge plain objects) [line 20] (killed 11)
      ✓ fetchAndCacheBlogData should prevent multiple simultaneous fetches [line 47] (killed 9)
      ✓ fetchAndCacheBlogData should start fetching blog data and update state on success [line 57] (killed 9)
      ✓ fetchAndCacheBlogData should handle HTTP errors properly [line 75] (killed 2)
      ~ fetchAndCacheBlogData should handle fetch exceptions [line 91] (covered 16)
      ✓ fetchAndCacheBlogData calls fetch with the correct URL and logs starting message [line 105] (killed 2)
      ✓ fetchAndCacheBlogData throws specific error when response is not ok [line 116] (killed 3)
      ✓ getData, setData, and getDeepStateCopy getDeepStateCopy returns a deep copy [line 152] (killed 1)
      ✓ getData, setData, and getDeepStateCopy getData triggers fetch if status is idle [line 160] (killed 9)
      ✓ getData, setData, and getDeepStateCopy getData logs warning on error state [line 166] (killed 15)
      ✓ getData, setData, and getDeepStateCopy getData does nothing when status is loaded [line 173] (killed 1)
      ✓ getData, setData, and getDeepStateCopy getData omits internal state fields [line 181] (killed 6)
      ✓ getData, setData, and getDeepStateCopy setData preserves existing blog if incoming state omits it [line 192] (killed 5)
      ✓ getData, setData, and getDeepStateCopy setData logs specific error message when blog is missing [line 199] (killed 4)
      ~ getData, setData, and getDeepStateCopy setData throws and logs error if incoming state is object but lacks temporary property [line 212] (covered 22)
      ✓ getData, setData, and getDeepStateCopy setData throws and logs error if incoming state is null [line 224] (killed 1)
      ~ getData, setData, and getDeepStateCopy setData throws and logs error if incoming state is undefined [line 235] (covered 16)
      ~ getData, setData, and getDeepStateCopy setData throws and logs error if incoming state is an object with no prototype and no properties [line 246] (covered 22)
      ✓ getData, setData, and getDeepStateCopy shouldUseExistingFetch returns true and logs when loading and promise exists [line 258] (killed 1)
      ✓ getData, setData, and getDeepStateCopy shouldUseExistingFetch returns false if status is not loading [line 269] (killed 3)
      ~ getData, setData, and getDeepStateCopy shouldUseExistingFetch returns false if status is loading but no fetchPromise exists [line 280] (covered 12)
      ~ getData, setData, and getDeepStateCopy getData returns cached blog data when already loaded [line 291] (covered 31)
      ✓ getData, setData, and getDeepStateCopy getEncodeBase64 returns a function that encodes to base64 using provided helpers [line 303] (killed 2)
    setOutput.test.js
      ✓ setOutput returns an error for invalid JSON [line 5] (killed 4)
      ✓ setOutput returns an error for non-object input [line 10] (killed 3)
      ✓ setOutput returns an error if merging throws [line 15] (killed 5)
      ✓ setOutput resets newData.output if it is not an object [line 25] (killed 8)
      ✓ setOutput merges output data and calls setData [line 40] (killed 3)
    tags.createHandleClick.test.js
      ✓ createHandleClick calls stopDefault and toggleHideLink with correct arguments [line 5] (killed 2)
    tags.handleTagLinks.test.js
      ✓ handleTagLinks applies makeHandleLink(dom) to each <a> element [line 5] (killed 3)
    tags.makeHandleHideClick.test.js
      ✓ makeHandleHideClick calls stopDefault and hides only articles with the given class [line 5] (killed 2)
    tags.test.js
      ~ hideArticlesByClass does not throw when given a class and no matching elements [line 6] (covered 2)
      ✓ hideArticlesByClass hides articles with the given class [line 18] (killed 6)
      ✓ toggleHideLink removes the next sibling when it has the hide-span class [line 37] (killed 3)
      ✓ toggleHideLink creates a hide span when there is no next sibling with the hide-span class [line 51] (killed 2)
      ✓ makeHandleClassName returns a function when called with no arguments [line 67] (killed 5)
      ✓ makeHandleClassName calls addEventListener when className starts with tag- [line 73] (killed 7)
      ✓ makeHandleLink invokes the returned function with a mock dom and asserts its value is undefined [line 84] (killed 1)
      ✓ makeHandleHideSpan invokes makeHandleHideSpan and its returned function with minimal mock dom [line 93] (killed 1)
    toys.convertArrayToKeyValueObject.test.js
      ✓ convertArrayToKeyValueObject should convert an array of key-value objects to a single object [line 5] (killed 7)
      ✓ convertArrayToKeyValueObject should handle undefined or null values by converting them to empty strings [line 19] (killed 1)
      ~ convertArrayToKeyValueObject should skip objects without a key property [line 33] (covered 16)
      ~ convertArrayToKeyValueObject should return an empty object for an empty array [line 47] (covered 4)
      ✓ convertArrayToKeyValueObject should handle non-array inputs by returning an empty object [line 51] (killed 1)
    toys.createDispose.test.js
      ~ createDispose can be called and disposed [line 5] (covered 3)
    toys.createDropdownInitializer.test.js
      ✓ createDropdownInitializer should handle empty NodeList when querySelectorAll returns no elements [line 5] (killed 4)
    toys.createHandleSubmit.test.js
      ✘ createHandleSubmit should handle being called without arguments [line 5] (covered 0)
    toys.createKeyInputHandler.test.js
      ~ createKeyInputHandler should sync hidden field when key does not change [line 39] (covered 7)
      ✓ createKeyInputHandler should update rows with new key when key is unique and non-empty [line 52] (killed 1)
      ✓ createKeyInputHandler should not update rows when new key is empty [line 71] (killed 3)
      ~ createKeyInputHandler should not update rows when new key already exists [line 89] (covered 13)
    toys.createKeyValueRow.test.js
      ✓ createKeyValueRow creates a row with key and value inputs [line 72] (killed 6)
      ✓ createKeyValueRow creates a remove button for non-last rows [line 101] (killed 5)
      ~ createKeyValueRow creates an add button for the last row [line 117] (covered 32)
      ✓ createKeyValueRow adds event listeners for key and value changes [line 133] (killed 5)
      ~ createKeyValueRow adds cleanup functions to disposers array [line 158] (covered 32)
      ~ createKeyValueRow handles cleanup when disposers are called [line 174] (covered 35)
    toys.createNumberInput.test.js
      ✓ createNumberInput creates a number input element with the correct type [line 34] (killed 1)
      ✓ createNumberInput sets the initial value when provided [line 45] (killed 2)
      ✓ createNumberInput does not set a value when none is provided [line 53] (killed 1)
      ✓ createNumberInput sets up input event listeners [line 61] (killed 1)
      ~ createNumberInput calls the onChange handler when the input changes [line 73] (covered 10)
    toys.createOnAddHandler.test.js
      ~ createOnAddHandler adds an empty key-value pair when no empty key exists [line 16] (covered 9)
      ~ createOnAddHandler does not add a new empty key if one already exists [line 31] (covered 6)
      ~ createOnAddHandler preserves existing non-empty keys when adding an empty key [line 45] (covered 9)
      ~ createOnAddHandler does not add an empty key if one exists, even with other keys [line 64] (covered 6)
    toys.createOnRemove.test.js
      ✓ createOnRemove removes the specified key from the rows object [line 26] (killed 2)
      ~ createOnRemove calls preventDefault on the event [line 41] (covered 1)
      ~ createOnRemove calls the render function after removing the key [line 49] (covered 1)
      ~ createOnRemove does nothing if the key does not exist [line 57] (covered 1)
      ~ createOnRemove works with empty rows object [line 76] (covered 1)
      ~ createOnRemove can remove the last remaining key [line 89] (covered 1)
    toys.createOutputDropdownHandler.test.js
      ✓ createOutputDropdownHandler should create a handler that calls handleDropdownChange with correct arguments [line 5] (killed 1)
      ~ createOutputDropdownHandler should work with different event targets [line 32] (covered 1)
      ~ createOutputDropdownHandler should pass through the event target and dom utilities to handleDropdownChange [line 55] (covered 1)
    toys.createUpdateTextInputValue.test.js
      ✓ createUpdateTextInputValue creates a function that updates the text input value from an event [line 31] (killed 1)
      ~ createUpdateTextInputValue handles empty string values correctly [line 45] (covered 1)
      ~ createUpdateTextInputValue handles numeric values without converting them to strings [line 59] (covered 1)
      ~ createUpdateTextInputValue handles null or undefined values by passing them through [line 73] (covered 1)
      ~ createUpdateTextInputValue can be used as an event handler for input events [line 90] (covered 1)
    toys.createValueElement.test.js
      ✓ createValueElement creates a value input element with the correct initial properties [line 35] (killed 4)
      ~ createValueElement updates the rows object and syncs when value is changed [line 60] (covered 9)
      ✓ createValueElement cleans up event listeners when disposer is called [line 88] (killed 2)
    toys.createValueInputHandler.test.js
      ✓ createValueInputHandler should update the value for an existing key and sync hidden field [line 41] (killed 1)
      ~ createValueInputHandler should handle updating a different key [line 57] (covered 3)
      ~ createValueInputHandler should handle empty string values [line 74] (covered 3)
      ~ createValueInputHandler should update the value even if the key is not in rows [line 91] (covered 3)
    toys.ensureNumberInput.test.js
      ✓ ensureNumberInput should return existing number input without creating a new one [line 5] (killed 1)
    toys.getComponentInitializer.test.js
      ✓ getComponentInitializer returns a function that initializes a component [line 5] (killed 4)
      ✓ getComponentInitializer logs a warning if the element is not found [line 53] (killed 3)
      ~ getComponentInitializer passes the correct parameters to createIntersectionObserver [line 88] (covered 5)
    toys.handleKVType.test.js
      ✓ handleKVType can be invoked with an empty DOM object [line 5] (killed 5)
    toys.keyValueInput.test.js
      ✓ Key-Value Input createKeyInputHandler should update rows when key is changed to a new unique key [line 70] (killed 5)
    toys.parseExistingRows.test.js
      ✓ parseExistingRows should parse an empty input as an empty object [line 20] (killed 4)
      ✓ parseExistingRows should parse a valid JSON object [line 27] (killed 7)
      ✓ parseExistingRows should convert an array of key-value pairs to an object [line 37] (killed 3)
      ~ parseExistingRows should handle arrays with undefined/null values [line 52] (covered 25)
      ✓ parseExistingRows should skip items without a key property in array input [line 69] (killed 1)
      ✓ parseExistingRows should handle invalid JSON by returning an empty object [line 86] (killed 1)
      ✓ parseExistingRows should handle non-object, non-array JSON values by returning an empty object [line 94] (killed 3)
    toys.setupAddButton.test.js
      ✓ setupAddButton sets the button text content to "+" [line 25] (killed 2)
      ✓ setupAddButton adds a click event listener to the button [line 31] (killed 2)
      ✓ setupAddButton adds a disposer function to the disposers array [line 41] (killed 1)
      ✓ setupAddButton clicking the button adds a new empty row and calls render [line 48] (killed 6)
      ✓ setupAddButton does not add a new empty row if one already exists [line 70] (killed 2)
      ✓ setupAddButton cleanup function removes the event listener [line 94] (killed 2)
    toys.setupRemoveButton.test.js
      ~ setupRemoveButton sets the button text content to "×" [line 27] (covered 4)
      ~ setupRemoveButton adds a click event listener to the button [line 33] (covered 4)
      ✓ setupRemoveButton adds a disposer function to the disposers array [line 43] (killed 1)
      ~ setupRemoveButton clicking the button removes the corresponding row and calls render [line 50] (covered 5)
      ✓ setupRemoveButton cleanup function removes the event listener [line 75] (killed 2)
      ~ setupRemoveButton handles clicking when the key does not exist in rows [line 92] (covered 5)
    toys.syncHiddenField.test.js
      ✓ syncHiddenField includes entries where either key or value is truthy [line 18] (killed 6)
      ~ syncHiddenField handles empty rows object [line 47] (covered 1)
      ~ syncHiddenField excludes entries where both key and value are falsy [line 58] (covered 6)
      ~ syncHiddenField handles non-string values by converting them to strings [line 90] (covered 6)
      ~ syncHiddenField preserves whitespace in keys and values [line 113] (covered 6)
    toys.test.js
      ✓ createAddDropdownListener adds a change event listener to the dropdown [line 25] (killed 2)
      ✓ toys handleDropdownChange logs the correct postId and selectedValue when dropdown changes [line 47] (killed 3)
      ✓ toys handleDropdownChange handles dropdown change with empty output data [line 77] (killed 4)
      ✓ toys makeObserverCallback calls importModule when entry is intersecting [line 162] (killed 10)
      ~ toys makeObserverCallback calls disconnectObserver when entry is intersecting [line 173] (covered 17)
      ✓ toys makeCreateIntersectionObserver returns the result of makeIntersectionObserver [line 213] (killed 2)
      ~ toys makeCreateIntersectionObserver calls makeIntersectionObserver with a callback [line 220] (covered 8)
      ~ toys makeCreateIntersectionObserver calls importModule when entry is intersecting [line 227] (covered 20)
      ~ toys makeCreateIntersectionObserver calls disconnectObserver when entry is intersecting [line 236] (covered 20)
      ✓ toys makeCreateIntersectionObserver does not call importModule when not intersecting [line 245] (killed 1)
      ~ toys makeCreateIntersectionObserver does not call disconnectObserver when not intersecting [line 268] (covered 12)
      ✓ toys handleModuleError calls errorMock with the correct message [line 283] (killed 3)
      ✓ toys enableInteractiveControls enables input and submit button [line 344] (killed 2)
      ✓ toys enableInteractiveControls sets output textContent to "Ready for input" using parent branch [line 352] (killed 1)
      ~ toys enableInteractiveControls removes "warning" class from parent element [line 366] (covered 6)
      ✓ toys initialiseModule can be invoked with minimal arguments [line 376] (killed 9)
      ✓ toys getDeepStateCopy returns a deep copy of the global state object [line 433] (killed 1)
      ✓ toys initializeInteractiveComponent attaches click and keypress listeners with expected arguments [line 477] (killed 16)
      ✓ toys initializeInteractiveComponent does not call handleSubmit when a non-Enter key is pressed [line 534] (killed 1)
      ✓ toys initializeVisibleComponents warns if there are no interactive components [line 642] (killed 2)
      ✓ toys initializeVisibleComponents initializes and observes a valid interactive component [line 660] (killed 2)
      ~ toys initializeVisibleComponents attempts to initialize all interactive components, regardless of missing fields [line 685] (covered 5)
      ✓ createInputDropdownHandler when select value is kv should call getCurrentTarget with the event [line 787] (killed 7)
      ✓ createInputDropdownHandler when select value is text handles text input setup and cleanup of other input types [line 825] (killed 12)
      ✓ createInputDropdownHandler when select value is number handles number input setup and cleanup when dropdown value is number [line 861] (killed 6)
  generator
    generator.test.js
      ✓ Blog Generator should generate complete HTML page with multiple posts [line 8] (killed 342)
      ✓ Blog Generator should contain content for posts [line 103] (killed 4)
      ✓ Blog Generator should contain an illustration for posts [line 129] (killed 1)
      ~ Blog Generator should contain audio elements [line 159] (covered 155)
      ~ Blog Generator should contain related links for a post [line 186] (covered 215)
      ~ Blog Generator should contain a YouTube video for a post [line 224] (covered 155)
      ~ Blog Generator should contain a toy component for a post [line 245] (covered 225)
      ✓ Blog Generator should display tags for posts [line 290] (killed 16)
      ✓ Blog Generator should render quotes as blockquotes [line 315] (killed 19)
    getBlogGenerationArgs.test.js
      ✓ generateBlogOuter returns a string of HTML when given a blog object with an empty posts array [line 4] (killed 12)
      ✓ getBlogGenerationArgs returns an object with header, footer, and wrapFunc [line 12] (killed 4)
  presenters
    battleshipSolitaireClues.test.js
      ✘ battleshipSolitaireClues presenter should be implemented [line 5] (covered 0)
      ✓ createBattleshipCluesBoardElement – error handling renders 10x10 empty board on parse failure [line 49] (killed 18)
      ✓ createBattleshipCluesBoardElement – error handling renders 10x10 empty board when JSON is not an object [line 55] (killed 6)
      ✓ createBattleshipCluesBoardElement – error handling renders 10x10 empty board when rowClues / colClues arrays are missing [line 61] (killed 5)
      ✓ createBattleshipCluesBoardElement – error handling renders 10x10 empty board when clue values are non‑numeric [line 68] (killed 7)
      ✓ createBattleshipCluesBoardElement – error handling renders 10x10 empty board when any array is empty [line 75] (killed 6)
      ✓ createBattleshipCluesBoardElement – successful render renders padded multi‑digit row clues and stacked column clues [line 84] (killed 30)
    battleshipSolitaireFleet.test.js
      ✓ createBattleshipFleetBoardElement renders a valid fleet as a <pre> element [line 14] (killed 78)
      ✓ createBattleshipFleetBoardElement renders a 10x10 empty fleet for invalid JSON [line 40] (killed 3)
      ✓ createBattleshipFleetBoardElement returns <p> with error for missing width [line 51] (killed 7)
      ✓ createBattleshipFleetBoardElement returns <p> with error for missing height [line 58] (killed 1)
      ✓ createBattleshipFleetBoardElement returns <p> with error for missing ships [line 65] (killed 1)
      ✓ createBattleshipFleetBoardElement skips malformed ships and still renders valid ones [line 72] (killed 9)
    paragraph.test.js
      ~ createParagraphElement creates a <p> element with the correct text content [line 6] (covered 2)
      ~ createParagraphElement works with different input strings [line 19] (covered 2)
    pre.test.js
      ✓ createPreElement creates a <pre> element with the correct text content [line 20] (killed 6)
      ✓ createPreElement renders comma-separated list inside brackets on separate lines [line 30] (killed 17)
      ✓ createPreElement renders empty string for empty brackets [line 38] (killed 2)
      ~ createPreElement trims whitespace for each element [line 46] (covered 34)
      ~ createPreElement does not split if only one element in brackets [line 53] (covered 34)
      ~ createPreElement handles empty string [line 60] (covered 18)
    ticTacToeBoard.test.js
      ✓ createTicTacToeBoardElement renders an empty board if moves property is missing [line 12] (killed 9)
      ~ createTicTacToeBoardElement renders an empty board if moves is not an array [line 23] (covered 16)
      ✓ createTicTacToeBoardElement ignores moves with invalid player [line 34] (killed 47)
      ✓ createTicTacToeBoardElement ignores moves with missing position [line 51] (killed 5)
      ✓ createTicTacToeBoardElement ignores moves with out-of-bounds position [line 68] (killed 2)
      ~ createTicTacToeBoardElement only applies the first move to a cell (overlapping moves) [line 85] (covered 78)
      ~ createTicTacToeBoardElement ignores moves with missing row/column [line 103] (covered 71)
      ~ createTicTacToeBoardElement ignores moves where the move is not an object (null, number, string, array) [line 120] (covered 75)
      ✓ createTicTacToeBoardElement ignores moves where position is null, number, string, or array [line 134] (killed 3)
      ✓ createTicTacToeBoardElement renders an empty board for empty string input [line 154] (killed 1)
      ~ createTicTacToeBoardElement renders an empty board for valid JSON but not an object [line 166] (covered 16)
      ~ createTicTacToeBoardElement renders a board with three moves [line 178] (covered 78)
      ~ createTicTacToeBoardElement renders an empty board when there are no moves [line 198] (covered 16)
      ~ createTicTacToeBoardElement renders an empty board for invalid JSON [line 213] (covered 19)
  toys
    2024-10-02/hello.test.js
      ✓ hello should return "Hello world" [line 4] (killed 2)
    2025-03-19/identity.test.js
      ✓ identity function returns primitive values unchanged [line 4] (killed 1)
      ~ identity function returns object references unchanged [line 13] (covered 1)
      ~ identity function keeps object values unchanged [line 23] (covered 1)
    2025-03-21
      booleanCoercer.test.js
        ✓ coerceToBoolean returns { value: true } for input boolean true [line 5] (killed 12)
        ~ coerceToBoolean returns { value: false } for input boolean false [line 9] (covered 15)
        ✓ coerceToBoolean returns { value: true } for input string "true" [line 13] (killed 8)
        ✓ coerceToBoolean returns { value: false } for input string "false" [line 17] (killed 1)
        ✓ coerceToBoolean handles case insensitivity for "TrUe" [line 21] (killed 2)
        ~ coerceToBoolean handles case insensitivity for "FaLsE" [line 25] (covered 24)
        ✓ coerceToBoolean returns {} for non-boolean and non-valid string input (number) [line 29] (killed 5)
        ~ coerceToBoolean returns {} for non-boolean and non-valid string input (object) [line 33] (covered 20)
        ~ coerceToBoolean returns {} for non-boolean and non-valid string input (null) [line 37] (covered 20)
        ~ coerceToBoolean returns {} for non-boolean and non-valid string input (undefined) [line 41] (covered 20)
      italics.test.js
        ✓ italics function returns non-string values unchanged [line 4] (killed 8)
        ✓ italics function leaves regular text unchanged [line 13] (killed 25)
        ✓ italics function adds <em> tags around asterisk-style italics while preserving asterisks [line 18] (killed 18)
        ✓ italics function adds <em> tags around underscore-style italics while preserving underscores [line 25] (killed 1)
        ~ italics function handles both asterisk and underscore styles in the same string [line 32] (covered 69)
        ✓ italics function does not add <em> tags around bold double-asterisk markdown [line 39] (killed 20)
        ~ italics function does not add <em> tags around bold double-underscore markdown [line 45] (covered 87)
        ✓ italics function handles bold at end of string (afterText empty) [line 51] (killed 1)
        ~ italics function handles complex mixed formatting correctly [line 56] (covered 87)
    2025-03-26/prettyFloat.test.js
      ✓ formatDecimal toPrecision(17) can return a string without a decimal point for large integers [line 4] (killed 2)
      ✓ decomposeFloat handles zero [line 16] (killed 35)
      ✓ decomposeFloat handles positive powers of two [line 21] (killed 29)
      ~ decomposeFloat handles small irrational approximations [line 27] (covered 68)
      ✓ decomposeFloat handles negative values [line 31] (killed 3)
      ~ decomposeFloat handles max safe integer [line 36] (covered 68)
      ✓ decomposeFloat returns empty string for Infinity and -Infinity [line 40] (killed 4)
      ~ decomposeFloat returns empty string for NaN [line 45] (covered 12)
    2025-03-28/rand.test.js
      ✓ rand ignores the string input and returns the result of getRandomNumber [line 4] (killed 2)
      ~ rand works with different string inputs [line 20] (covered 2)
      ~ rand returns different values when getRandomNumber returns different values [line 33] (covered 2)
    2025-03-29
      fishingGame.test.js
        ✓ fishingGame handles empty input gracefully [line 13] (killed 41)
        ✓ fishingGame recognizes a known bait and applies its modifier (e.g., worm, modifier 0.0) [line 20] (killed 30)
        ✓ fishingGame applies negative modifier for poor bait (e.g., bread, modifier -0.05) [line 29] (killed 18)
        ✓ fishingGame applies positive modifier for good bait (e.g., cheese, modifier 0.1) [line 39] (killed 20)
        ✓ fishingGame handles unrecognized bait as unconventional bait with no modifier [line 48] (killed 10)
        ✓ fishingGame produces common carp outcome for effectiveChance between 0.3 and 0.6 [line 57] (killed 3)
        ✓ fishingGame produces legendary outcome for very high effectiveChance [line 67] (killed 4)
      get.test.js
        ✓ get function with path traversal should return the value for a top-level key [line 31] (killed 61)
        ~ get function with path traversal should return the value for a nested key [line 36] (covered 99)
        ~ get function with path traversal should return the value for an array index [line 42] (covered 99)
        ~ get function with path traversal should return the full object/array if path points to it [line 48] (covered 97)
        ✓ get function with path traversal should return an error if a path segment does not exist (object) [line 54] (killed 22)
        ~ get function with path traversal should return an error if a path segment does not exist (array index) [line 60] (covered 103)
        ✓ get function with path traversal should return an error trying to access property on non-object [line 66] (killed 13)
        ✓ get function with path traversal should handle non-stringifiable values gracefully at the end of the path [line 73] (killed 2)
        ✓ get function with path traversal should return error if getData returns null [line 83] (killed 10)
        ✓ get function with path traversal should return error if getData returns a primitive [line 88] (killed 3)
        ✓ get function with path traversal should short-circuit reducer when acc.error is set (indirect via get) [line 93] (killed 2)
        ~ get function with path traversal should return undefined for valid path to undefined value [line 99] (covered 97)
        ✓ get function with path traversal should handle empty input string by returning full object [line 112] (killed 5)
        ~ get function with path traversal should handle numeric string keys in object [line 118] (covered 99)
        ✓ get function with path traversal should return an error if getData throws an error [line 125] (killed 7)
        ✓ get function with path traversal should return error when accessing deep property on null [line 134] (killed 1)
      setTemporary.test.js
        ✓ setTemporary function (getData -> merge -> setData) should call setData with merged JSON when temporary exists [line 24] (killed 25)
        ✓ setTemporary function (getData -> merge -> setData) should call setData creating temporary if it does not exist [line 53] (killed 3)
        ~ setTemporary function (getData -> merge -> setData) should call setData creating temporary if it exists but is not a valid object [line 70] (covered 38)
        ✓ setTemporary function (getData -> merge -> setData) should return error for invalid JSON input and not call setData [line 105] (killed 2)
        ✓ setTemporary function (getData -> merge -> setData) should return error if input JSON is not a plain object and not call setData [line 113] (killed 3)
        ✓ setTemporary function (getData -> merge -> setData) should return error if getData throws an error and not call setData [line 123] (killed 2)
        ~ setTemporary function (getData -> merge -> setData) should return error if setData throws an error [line 130] (covered 39)
        ✓ setTemporary function (getData -> merge -> setData) should deep merge nested objects within temporary [line 139] (killed 6)
        ✓ setTemporary function (getData -> merge -> setData) should overwrite non-object properties during deep merge [line 188] (killed 1)
        ~ setTemporary function (getData -> merge -> setData) should handle merging onto an empty initial temporary object [line 210] (covered 37)
        ~ setTemporary function (getData -> merge -> setData) should handle merging onto a non-existent initial temporary object [line 220] (covered 38)
        ~ setTemporary function (getData -> merge -> setData) should preserve existing temporary data if source is not object [line 230] (covered 12)
        ~ setTemporary function (getData -> merge -> setData) should overwrite non-object temporary with object from input [line 241] (covered 38)
    2025-03-30/cyberpunkAdventure.test.js
      ✓ Cyberpunk Text Game initial naming and intro [line 20] (killed 51)
      ✓ Cyberpunk Text Game goes to Hacker Den and requires password [line 25] (killed 25)
      ✓ Cyberpunk Text Game shows hint if incorrect hacker password is given [line 34] (killed 5)
      ✓ Cyberpunk Text Game goes to Transport Hub and trades datapad [line 51] (killed 23)
      ✓ Cyberpunk Text Game shows trade prompt if no datapad in inventory at transport:trade [line 67] (killed 6)
      ✓ Cyberpunk Text Game goes to Back Alley and finds stimpack (success) [line 84] (killed 13)
      ✓ Cyberpunk Text Game trips wire in alley if stealth check fails [line 98] (killed 5)
      ✓ Cyberpunk Text Game unknown input in hub [line 116] (killed 3)
      ✓ Cyberpunk Text Game resets on unknown state (default switch case) [line 122] (killed 5)
      ✓ Cyberpunk Text Game returns SYSTEM ERROR if an exception is thrown (catch block) [line 139] (killed 2)
      ~ Cyberpunk Text Game starts new game if CYBE1 data is missing [line 145] (covered 46)
      ✓ Cyberpunk Text Game defaults name to 'Stray' if no input and no name in temporary data [line 151] (killed 2)
    2025-04-05/httpRequest.test.js
      ✓ httpRequest returns correct JSON for a basic URL [line 5] (killed 3)
      ~ httpRequest handles URLs with query parameters [line 13] (covered 3)
      ~ httpRequest returns a stringified JSON object [line 20] (covered 3)
      ~ httpRequest contains only the expected structure [line 27] (covered 3)
      ~ httpRequest throws or handles invalid URLs gracefully [line 35] (covered 3)
    2025-04-06/ticTacToe.test.js
      ✓ returns optimal move for invalid input [line 4] (killed 21)
      ✓ minimax early tie return is triggered [line 12] (killed 132)
      ✓ detects win for X and returns no additional move [line 32] (killed 21)
      ~ returns optimal move for malformed schema [line 48] (covered 44)
      ✓ detects invalid player alternation [line 56] (killed 3)
      ✓ detects duplicate positions [line 70] (killed 3)
      ✓ detects too many moves on the board [line 84] (killed 2)
      ✓ detects full board with no remaining moves [line 106] (killed 1)
      ✓ detects win for O and returns no additional move [line 126] (killed 1)
      ✓ adds ninth move to result in a tie [line 143] (killed 14)
      ✓ detects tie game with no remaining moves [line 166] (killed 2)
      ✓ selects optimal move in mid-game scenario [line 186] (killed 12)
      ✓ covers non-terminal state in minimax search [line 204] (killed 4)
      ✓ handles null move entry gracefully [line 223] (killed 3)
      ~ handles invalid player [line 234] (covered 142)
      ✓ handles out-of-bounds position [line 247] (killed 1)
      ✓ assigns X to first move when moves list is empty [line 260] (killed 3)
      ✓ handles position as non-object [line 271] (killed 1)
      ~ forces minimax to score a tie at max depth [line 284] (covered 253)
      ~ handles duplicate board cell even if not duplicate position object [line 305] (covered 168)
      ~ forces minimax to run from O perspective [line 319] (covered 270)
      ~ handles empty board that reaches nextPlayer assignment [line 332] (covered 215)
      ~ returns fallback when minimax fails to assign bestMove [line 341] (covered 170)
      ~ returns early if board cell is already filled but not caught by seen [line 363] (covered 168)
      ~ triggers minimax tie return at full depth without win [line 379] (covered 253)
    2025-04-16/colorPalette.test.js
      ✓ generatePalette (2025-04-16) returns default 5 colors when input is invalid [line 5] (killed 11)
      ✓ generatePalette (2025-04-16) generates correct colors for input count [line 14] (killed 1)
    2025-05-08/battleshipSolitaireFleet.test.js
      ✓ generateFleet returns empty fleet for invalid JSON [line 10] (killed 47)
      ✓ generateFleet returns empty fleet for missing ships [line 15] (killed 5)
      ✓ generateFleet returns error if ship segments exceed board area [line 21] (killed 11)
      ✓ generateFleet places a vertical ship of length 3 somewhere [line 27] (killed 108)
      ✓ generateFleet generates a valid fleet for simple input [line 69] (killed 7)
      ✓ generateFleet noTouching true blocks all adjacent placements (full adjacency block) [line 86] (killed 37)
      ~ generateFleet ignores diagonalAllowed property [line 94] (covered 244)
      ~ generateFleet parses comma-separated string ships into array [line 103] (covered 254)
      ✓ generateFleet parses string width and height into numbers [line 110] (killed 8)
      ~ generateFleet uses empty config if JSON parse fails [line 118] (covered 82)
    2025-05-11/battleshipSolitaireClues.test.js
      ✓ generateClues returns an error for invalid JSON [line 7] (killed 7)
      ✓ generateClues returns an error for an invalid fleet structure [line 12] (killed 11)
      ✓ generateClues computes correct clues for a single horizontal ship [line 18] (killed 40)
      ✓ generateClues computes correct clues for mixed horizontal and vertical ships [line 34] (killed 9)
      ✓ generateClues ignores ship cells that fall outside the board [line 51] (killed 6)
    2025-05-13/base64Encoder.test.js
      ✓ encodeBase64 encodes a string to Base64 using the provided environment function [line 5] (killed 2)
    2025-05-15/stringToJsonArray.test.js
      ✓ stringToJsonArrayToy converts comma-delimited string to JSON array [line 5] (killed 5)
      ✓ stringToJsonArrayToy handles extra whitespace and empty values [line 11] (killed 1)
      ~ stringToJsonArrayToy returns empty array for empty string [line 17] (covered 6)
      ✓ stringToJsonArrayToy returns empty array for non-string input [line 23] (killed 2)
      ~ stringToJsonArrayToy handles single value [line 29] (covered 6)
      ~ stringToJsonArrayToy handles values with internal commas [line 35] (covered 6)
  utils
    index.test.js
      ✘ utils/index exports all utility functions [line 5] (covered 0)
      ✘ utils/index exports markdown constants [line 19] (covered 0)
    objectUtils.test.js
      ✓ pick picks specified properties from an object [line 5] (killed 8)
      ✓ pick returns empty object if source is not an object [line 10] (killed 4)
      ~ pick ignores non-existent properties [line 17] (covered 12)
      ~ pick returns empty object if no keys provided [line 22] (covered 8)
      ✓ mapValues transforms values using the provided function [line 29] (killed 6)
      ~ mapValues provides both value and key to the transform function [line 35] (covered 9)
      ✓ mapValues returns empty object if source is not an object [line 41] (killed 4)
      ~ mapValues handles empty objects [line 48] (covered 8)
    regexUtils.test.js
      ✓ escapeRegex escapes special regex characters [line 5] (killed 6)
      ✓ escapeRegex returns empty string for non-string input [line 9] (killed 3)
      ~ escapeRegex returns the same string when no special characters [line 16] (covered 6)
      ✓ createPattern creates a pattern with default flags [line 23] (killed 4)
      ~ createPattern creates a pattern with custom flags [line 30] (covered 9)
      ~ createPattern handles special characters in the marker [line 36] (covered 10)
      ✓ createPattern creates a pattern for double markers [line 41] (killed 1)
      ✓ matchesPattern returns true when string matches pattern [line 49] (killed 1)
      ~ matchesPattern returns false when string does not match pattern [line 55] (covered 1)
      ~ matchesPattern handles null/undefined input [line 61] (covered 1)
    stringUtils.test.js
      ✓ isEmpty returns true for empty or whitespace strings [line 5] (killed 5)
      ✓ isEmpty returns false for non-empty strings [line 11] (killed 3)
      ✓ isEmpty handles non-string values [line 17] (killed 1)
      ✓ isValidText returns true for non-empty strings [line 28] (killed 4)
      ✓ isValidText returns false for empty or non-string values [line 34] (killed 3)
      ✓ safeTrim trims whitespace from strings [line 46] (killed 5)
      ✓ safeTrim returns undefined for non-string values [line 52] (killed 1)
      ~ safeTrim handles empty strings [line 61] (covered 6)
    validation.test.js
      ~ isType returns true for matching types [line 5] (covered 4)
      ~ isType returns false for non-matching types [line 18] (covered 4)
      ✓ isValidString returns true for non-empty strings [line 28] (killed 5)
      ✓ isValidString returns false for non-string or empty values [line 35] (killed 5)
      ✓ isValidBoolean returns true for boolean values [line 47] (killed 6)
      ✓ isValidBoolean returns true for boolean strings [line 52] (killed 13)
      ✓ isValidBoolean returns false for non-boolean values [line 61] (killed 4)

[Survived] StringLiteral
src/browser/audio-controls.js:43:49
-       const controlsContainer = dom.createElement("div");
+       const controlsContainer = dom.createElement("");
Tests ran:
    setupAudio assigns a default id to an audio element with an empty id
    setupAudio assigns a default id to an audio element with undefined id
    setupAudio does not overwrite existing audio element ids
  and 3 more tests!


[Survived] StringLiteral
src/browser/audio-controls.js:45:28
-       controlsContainer.id = "controls-" + audio.id;
+       controlsContainer.id = "" + audio.id;
Tests ran:
    setupAudio assigns a default id to an audio element with an empty id
    setupAudio assigns a default id to an audio element with undefined id
    setupAudio does not overwrite existing audio element ids
  and 3 more tests!


[Survived] StringLiteral
src/browser/audio-controls.js:47:43
-       const timeDisplay = dom.createElement("span");
+       const timeDisplay = dom.createElement("");
Tests ran:
    setupAudio assigns a default id to an audio element with an empty id
    setupAudio assigns a default id to an audio element with undefined id
    setupAudio does not overwrite existing audio element ids
  and 3 more tests!


[Survived] StringLiteral
src/browser/audio-controls.js:49:31
-       timeDisplay.textContent = "0:00";
+       timeDisplay.textContent = "";
Tests ran:
    setupAudio assigns a default id to an audio element with an empty id
    setupAudio assigns a default id to an audio element with undefined id
    setupAudio does not overwrite existing audio element ids
  and 3 more tests!


[Survived] StringLiteral
src/browser/audio-controls.js:55:38
-       dom.addEventListener(playButton, "click", onPlayClick);
+       dom.addEventListener(playButton, "", onPlayClick);
Tests ran:
    setupAudio assigns a default id to an audio element with an empty id
    setupAudio assigns a default id to an audio element with undefined id
    setupAudio does not overwrite existing audio element ids
  and 3 more tests!


[Survived] StringLiteral
src/browser/audio-controls.js:52:23
-       playButton.href = "#";
+       playButton.href = "";
Tests ran:
    setupAudio assigns a default id to an audio element with an empty id
    setupAudio assigns a default id to an audio element with undefined id
    setupAudio does not overwrite existing audio element ids
  and 3 more tests!


[Survived] StringLiteral
src/browser/audio-controls.js:59:43
-       const pauseButton = dom.createElement("a");
+       const pauseButton = dom.createElement("");
Tests ran:
    setupAudio assigns a default id to an audio element with an empty id
    setupAudio assigns a default id to an audio element with undefined id
    setupAudio does not overwrite existing audio element ids
  and 3 more tests!


[Survived] StringLiteral
src/browser/audio-controls.js:51:42
-       const playButton = dom.createElement("a");
+       const playButton = dom.createElement("");
Tests ran:
    setupAudio assigns a default id to an audio element with an empty id
    setupAudio assigns a default id to an audio element with undefined id
    setupAudio does not overwrite existing audio element ids
  and 3 more tests!


[Survived] StringLiteral
src/browser/audio-controls.js:60:24
-       pauseButton.href = "#";
+       pauseButton.href = "";
Tests ran:
    setupAudio assigns a default id to an audio element with an empty id
    setupAudio assigns a default id to an audio element with undefined id
    setupAudio does not overwrite existing audio element ids
  and 3 more tests!


[Survived] StringLiteral
src/browser/audio-controls.js:62:39
-       dom.addEventListener(pauseButton, "click", onPauseClick);
+       dom.addEventListener(pauseButton, "", onPauseClick);
Tests ran:
    setupAudio assigns a default id to an audio element with an empty id
    setupAudio assigns a default id to an audio element with undefined id
    setupAudio does not overwrite existing audio element ids
  and 3 more tests!


[Survived] StringLiteral
src/browser/audio-controls.js:74:59
-       dom.appendChild(controlsContainer, dom.createTextNode(" "));
+       dom.appendChild(controlsContainer, dom.createTextNode(""));
Tests ran:
    setupAudio assigns a default id to an audio element with an empty id
    setupAudio assigns a default id to an audio element with undefined id
    setupAudio does not overwrite existing audio element ids
  and 3 more tests!


[Survived] StringLiteral
src/browser/audio-controls.js:68:38
-       dom.addEventListener(stopButton, "click", onStopClick);
+       dom.addEventListener(stopButton, "", onStopClick);
Tests ran:
    setupAudio assigns a default id to an audio element with an empty id
    setupAudio assigns a default id to an audio element with undefined id
    setupAudio does not overwrite existing audio element ids
  and 3 more tests!


[Survived] StringLiteral
src/browser/audio-controls.js:66:23
-       stopButton.href = "#";
+       stopButton.href = "";
Tests ran:
    setupAudio assigns a default id to an audio element with an empty id
    setupAudio assigns a default id to an audio element with undefined id
    setupAudio does not overwrite existing audio element ids
  and 3 more tests!


[Survived] StringLiteral
src/browser/audio-controls.js:65:42
-       const stopButton = dom.createElement("a");
+       const stopButton = dom.createElement("");
Tests ran:
    setupAudio assigns a default id to an audio element with an empty id
    setupAudio assigns a default id to an audio element with undefined id
    setupAudio does not overwrite existing audio element ids
  and 3 more tests!


[Survived] StringLiteral
src/browser/audio-controls.js:71:33
-       dom.addEventListener(audio, "timeupdate", updateTimeDisplay);
+       dom.addEventListener(audio, "", updateTimeDisplay);
Tests ran:
    setupAudio assigns a default id to an audio element with an empty id
    setupAudio assigns a default id to an audio element with undefined id
    setupAudio does not overwrite existing audio element ids
  and 3 more tests!


[Survived] StringLiteral
src/browser/audio-controls.js:76:59
-       dom.appendChild(controlsContainer, dom.createTextNode(" "));
+       dom.appendChild(controlsContainer, dom.createTextNode(""));
Tests ran:
    setupAudio assigns a default id to an audio element with an empty id
    setupAudio assigns a default id to an audio element with undefined id
    setupAudio does not overwrite existing audio element ids
  and 3 more tests!


[Survived] StringLiteral
src/browser/audio-controls.js:78:59
-       dom.appendChild(controlsContainer, dom.createTextNode(" "));
+       dom.appendChild(controlsContainer, dom.createTextNode(""));
Tests ran:
    setupAudio assigns a default id to an audio element with an empty id
    setupAudio assigns a default id to an audio element with undefined id
    setupAudio does not overwrite existing audio element ids
  and 3 more tests!


[Survived] ConditionalExpression
src/browser/data.js:104:10
-     return !Array.isArray(a) && !Array.isArray(b);
+     return true;
Tests ran:
    deepMerge should use the if branch when shouldDeepMerge is true (deep merge plain objects)


[Survived] LogicalOperator
src/browser/data.js:104:10
-     return !Array.isArray(a) && !Array.isArray(b);
+     return !Array.isArray(a) || !Array.isArray(b);
Tests ran:
    deepMerge should use the if branch when shouldDeepMerge is true (deep merge plain objects)


[Survived] BlockStatement
src/browser/data.js:139:51
-   function restoreBlogState(globalState, blogState) {
-     globalState.blogStatus = blogState.status;
-     globalState.blogError = blogState.error;
-     globalState.blogFetchPromise = blogState.fetchPromise;
-     globalState.blog = blogState.data;
-   }
+   function restoreBlogState(globalState, blogState) {}
Tests ran:
    getData, setData, and getDeepStateCopy setData preserves existing blog if incoming state omits it


[Survived] ConditionalExpression
src/browser/data.js:155:28
-     return Boolean(value) && typeof value === 'object';
+     return Boolean(value) && true;
Tests ran:
    deepMerge should use the if branch when shouldDeepMerge is true (deep merge plain objects)
    getData, setData, and getDeepStateCopy setData preserves existing blog if incoming state omits it
    getData, setData, and getDeepStateCopy setData logs specific error message when blog is missing
  and 2 more tests!


[Survived] ConditionalExpression
src/browser/data.js:199:10
-     return status === 'idle' || status === 'error';
+     return true;
Tests ran:
    getData, setData, and getDeepStateCopy getData triggers fetch if status is idle
    getData, setData, and getDeepStateCopy getData logs warning on error state
    getData, setData, and getDeepStateCopy getData does nothing when status is loaded
  and 2 more tests!


[Survived] ConditionalExpression
src/browser/data.js:199:10
-     return status === 'idle' || status === 'error';
+     return false || status === 'error';
Tests ran:
    getData, setData, and getDeepStateCopy getData triggers fetch if status is idle
    getData, setData, and getDeepStateCopy getData logs warning on error state
    getData, setData, and getDeepStateCopy getData does nothing when status is loaded
  and 2 more tests!


[Survived] EqualityOperator
src/browser/data.js:199:10
-     return status === 'idle' || status === 'error';
+     return status !== 'idle' || status === 'error';
Tests ran:
    getData, setData, and getDeepStateCopy getData triggers fetch if status is idle
    getData, setData, and getDeepStateCopy getData logs warning on error state
    getData, setData, and getDeepStateCopy getData does nothing when status is loaded
  and 2 more tests!


[Survived] StringLiteral
src/browser/data.js:199:21
-     return status === 'idle' || status === 'error';
+     return status === "" || status === 'error';
Tests ran:
    getData, setData, and getDeepStateCopy getData triggers fetch if status is idle
    getData, setData, and getDeepStateCopy getData logs warning on error state
    getData, setData, and getDeepStateCopy getData does nothing when status is loaded
  and 2 more tests!


[Survived] ConditionalExpression
src/browser/data.js:204:7
-     if (shouldDeepCopyForFetch(status)) {
+     if (true) {
Tests ran:
    getData, setData, and getDeepStateCopy getData triggers fetch if status is idle
    getData, setData, and getDeepStateCopy getData logs warning on error state
    getData, setData, and getDeepStateCopy getData does nothing when status is loaded
  and 2 more tests!


[NoCoverage] BlockStatement
src/browser/document.js:12:53
-   export const setClassName = (element, className) => {
-     element.className = className;
-   };
+   export const setClassName = (element, className) => {};

[NoCoverage] StringLiteral
src/browser/document.js:20:56
-   export const getAudioElements = () => querySelectorAll("audio");
+   export const getAudioElements = () => querySelectorAll("");

[NoCoverage] StringLiteral
src/browser/document.js:21:73
-   export const removeControlsAttribute = (audio) => audio.removeAttribute("controls");
+   export const removeControlsAttribute = (audio) => audio.removeAttribute("");

[NoCoverage] StringLiteral
src/browser/document.js:26:58
-   export const hide = (element) => element.style.display = 'none';
+   export const hide = (element) => element.style.display = "";

[NoCoverage] BlockStatement
src/browser/document.js:38:47
-   export const removeAllChildren = (element) => {
-     while (element.firstChild) {
-       removeChildNode(element);
-     }
-   };
+   export const removeAllChildren = (element) => {};

[NoCoverage] ConditionalExpression
src/browser/document.js:39:10
-     while (element.firstChild) {
+     while (false) {

[NoCoverage] BlockStatement
src/browser/document.js:39:30
-     while (element.firstChild) {
-       removeChildNode(element);
-     }
+     while (element.firstChild) {}

[NoCoverage] ConditionalExpression
src/browser/document.js:61:51
-   export const hasNextSiblingClass = (link, cls) => link.nextElementSibling && link.nextElementSibling.classList.contains(cls);
+   export const hasNextSiblingClass = (link, cls) => true;

[NoCoverage] ConditionalExpression
src/browser/document.js:61:51
-   export const hasNextSiblingClass = (link, cls) => link.nextElementSibling && link.nextElementSibling.classList.contains(cls);
+   export const hasNextSiblingClass = (link, cls) => false;

[NoCoverage] LogicalOperator
src/browser/document.js:61:51
-   export const hasNextSiblingClass = (link, cls) => link.nextElementSibling && link.nextElementSibling.classList.contains(cls);
+   export const hasNextSiblingClass = (link, cls) => link.nextElementSibling || link.nextElementSibling.classList.contains(cls);

[NoCoverage] StringLiteral
src/browser/document.js:64:60
-   export const addWarning = (parent) => parent.classList.add('warning');
+   export const addWarning = (parent) => parent.classList.add("");

[NoCoverage] StringLiteral
src/browser/document.js:65:80
-   export const removeWarning = (outputElement) => outputElement.classList.remove('warning');
+   export const removeWarning = (outputElement) => outputElement.classList.remove("");

[NoCoverage] StringLiteral
src/browser/document.js:68:60
-   export const reveal = (element) => element.style.display = '';
+   export const reveal = (element) => element.style.display = "Stryker was here!";

[NoCoverage] BlockStatement
src/browser/document.js:96:49
-   export const setTargetValue = (event, value) => {
-     event.target.value = value;
-   };
+   export const setTargetValue = (event, value) => {};

[NoCoverage] BlockStatement
src/browser/document.js:113:45
-   export const setValue = (element, value) => {
-     element.value = value;
-   };
+   export const setValue = (element, value) => {};

[NoCoverage] BlockStatement
src/browser/document.js:121:34
-   export const enable = (input) => {
-     input.disabled = false;
-   };
+   export const enable = (input) => {};

[NoCoverage] BooleanLiteral
src/browser/document.js:122:20
-     input.disabled = false;
+     input.disabled = true;

[NoCoverage] BlockStatement
src/browser/document.js:129:35
-   export const disable = (input) => {
-     input.disabled = true;
-   };
+   export const disable = (input) => {};

[NoCoverage] BooleanLiteral
src/browser/document.js:130:20
-     input.disabled = true;
+     input.disabled = false;

[NoCoverage] ConditionalExpression
src/browser/document.js:140:42
-   export const removeNextSibling = link => link.nextElementSibling && link.nextElementSibling.remove();
+   export const removeNextSibling = link => true;

[NoCoverage] ConditionalExpression
src/browser/document.js:140:42
-   export const removeNextSibling = link => link.nextElementSibling && link.nextElementSibling.remove();
+   export const removeNextSibling = link => false;

[NoCoverage] LogicalOperator
src/browser/document.js:140:42
-   export const removeNextSibling = link => link.nextElementSibling && link.nextElementSibling.remove();
+   export const removeNextSibling = link => link.nextElementSibling || link.nextElementSibling.remove();

[NoCoverage] BlockStatement
src/browser/document.js:150:73
-   export const removeEventListener = (target, event, handler, options) => {
-     target.removeEventListener(event, handler, options);
-   };
+   export const removeEventListener = (target, event, handler, options) => {};

[NoCoverage] BlockStatement
src/browser/document.js:159:43
-   export const setType = (element, type) => {
-     element.type = type;
-   };
+   export const setType = (element, type) => {};

[NoCoverage] BlockStatement
src/browser/document.js:168:57
-   export const setPlaceholder = (element, placeholder) => {
-     element.placeholder = placeholder;
-   };
+   export const setPlaceholder = (element, placeholder) => {};

[NoCoverage] BlockStatement
src/browser/document.js:178:59
-   export const setDataAttribute = (element, name, value) => {
-     element.dataset[name] = value;
-   };
+   export const setDataAttribute = (element, name, value) => {};

[NoCoverage] ObjectLiteral
src/browser/document.js:201:38
-     new IntersectionObserver(callback, { root: null, threshold: 0.1 });
+     new IntersectionObserver(callback, {});

[NoCoverage] BlockStatement
src/browser/document.js:203:49
-   export const disconnectObserver = (observer) => {
-     observer.disconnect();
-   };
+   export const disconnectObserver = (observer) => {};

[NoCoverage] BlockStatement
src/browser/document.js:215:58
-   const importModule = (modulePath, onSuccess, onError) => {
-     import(modulePath).then(onSuccess).catch(onError);
-   };
+   const importModule = (modulePath, onSuccess, onError) => {};

[NoCoverage] BlockStatement
src/browser/document.js:280:52
-   export const hasNoInteractiveComponents = (win) => {
-     return !win.interactiveComponents || win.interactiveComponents.length === 0;
-   };
+   export const hasNoInteractiveComponents = (win) => {};

[NoCoverage] ConditionalExpression
src/browser/document.js:281:10
-     return !win.interactiveComponents || win.interactiveComponents.length === 0;
+     return true;

[NoCoverage] ConditionalExpression
src/browser/document.js:281:10
-     return !win.interactiveComponents || win.interactiveComponents.length === 0;
+     return false;

[NoCoverage] LogicalOperator
src/browser/document.js:281:10
-     return !win.interactiveComponents || win.interactiveComponents.length === 0;
+     return !win.interactiveComponents && win.interactiveComponents.length === 0;

[NoCoverage] BooleanLiteral
src/browser/document.js:281:10
-     return !win.interactiveComponents || win.interactiveComponents.length === 0;
+     return win.interactiveComponents || win.interactiveComponents.length === 0;

[NoCoverage] ConditionalExpression
src/browser/document.js:281:40
-     return !win.interactiveComponents || win.interactiveComponents.length === 0;
+     return !win.interactiveComponents || false;

[NoCoverage] EqualityOperator
src/browser/document.js:281:40
-     return !win.interactiveComponents || win.interactiveComponents.length === 0;
+     return !win.interactiveComponents || win.interactiveComponents.length !== 0;

[NoCoverage] BlockStatement
src/browser/document.js:289:54
-   export const getInteractiveComponentCount = (win) => {
-     if (win.interactiveComponents) {
-       return win.interactiveComponents.length;
-     } else {
-       return 0;
-     }
-   };
+   export const getInteractiveComponentCount = (win) => {};

[NoCoverage] ConditionalExpression
src/browser/document.js:290:7
-     if (win.interactiveComponents) {
+     if (true) {

[NoCoverage] ConditionalExpression
src/browser/document.js:290:7
-     if (win.interactiveComponents) {
+     if (false) {

[NoCoverage] BlockStatement
src/browser/document.js:290:34
-     if (win.interactiveComponents) {
-       return win.interactiveComponents.length;
-     } else {
+     if (win.interactiveComponents) {} else {

[NoCoverage] BlockStatement
src/browser/document.js:292:10
-     } else {
-       return 0;
-     }
+     } else {}

[NoCoverage] BlockStatement
src/browser/document.js:302:50
-   export const getInteractiveComponents = (win) => {
-     return win.interactiveComponents || [];
-   };
+   export const getInteractiveComponents = (win) => {};

[NoCoverage] ConditionalExpression
src/browser/document.js:303:10
-     return win.interactiveComponents || [];
+     return true;

[NoCoverage] ConditionalExpression
src/browser/document.js:303:10
-     return win.interactiveComponents || [];
+     return false;

[NoCoverage] LogicalOperator
src/browser/document.js:303:10
-     return win.interactiveComponents || [];
+     return win.interactiveComponents && [];

[NoCoverage] ArrayDeclaration
src/browser/document.js:303:39
-     return win.interactiveComponents || [];
+     return win.interactiveComponents || ["Stryker was here"];

[Survived] ArrowFunction
src/browser/document.js:2:31
-   export const getElementById = (id) => document.getElementById(id);
+   export const getElementById = () => undefined;
Ran all tests for this mutant.

[Survived] ArrowFunction
src/browser/document.js:3:30
-   export const querySelector = (el, selector) => el.querySelector(selector);
+   export const querySelector = () => undefined;
Ran all tests for this mutant.

[Survived] ArrowFunction
src/browser/document.js:9:33
-   export const querySelectorAll = (selector) => document.querySelectorAll(selector);
+   export const querySelectorAll = () => undefined;
Ran all tests for this mutant.

[Survived] ArrowFunction
src/browser/document.js:10:25
-   export const addClass = (element, className) => element.classList.add(className);
+   export const addClass = () => undefined;
Ran all tests for this mutant.

[Survived] ArrowFunction
src/browser/document.js:20:33
-   export const getAudioElements = () => querySelectorAll("audio");
+   export const getAudioElements = () => undefined;
Ran all tests for this mutant.

[Survived] ArrowFunction
src/browser/document.js:21:40
-   export const removeControlsAttribute = (audio) => audio.removeAttribute("controls");
+   export const removeControlsAttribute = () => undefined;
Ran all tests for this mutant.

[Survived] ArrowFunction
src/browser/document.js:22:30
-   export const createElement = (tag) => document.createElement(tag);
+   export const createElement = () => undefined;
Ran all tests for this mutant.

[Survived] ArrowFunction
src/browser/document.js:23:31
-   export const createTextNode = (value) => document.createTextNode(value);
+   export const createTextNode = () => undefined;
Ran all tests for this mutant.

[Survived] ArrowFunction
src/browser/document.js:24:37
-   export const getElementsByTagName = (tagName) => document.getElementsByTagName(tagName);
+   export const getElementsByTagName = () => undefined;
Ran all tests for this mutant.

[Survived] ArrowFunction
src/browser/document.js:25:25
-   export const hasClass = (element, cls) => element.classList.contains(cls);
+   export const hasClass = () => undefined;
Ran all tests for this mutant.

[Survived] ArrowFunction
src/browser/document.js:26:21
-   export const hide = (element) => element.style.display = 'none';
+   export const hide = () => undefined;
Ran all tests for this mutant.

[Survived] ArrowFunction
src/browser/document.js:27:33
-   export const addEventListener = (element, event, func) => element.addEventListener(event, func);
+   export const addEventListener = () => undefined;
Ran all tests for this mutant.

[Survived] ArrowFunction
src/browser/document.js:28:28
-   export const appendChild = (parentNode, newChild) => parentNode.appendChild(newChild);
+   export const appendChild = () => undefined;
Ran all tests for this mutant.

[Survived] ArrowFunction
src/browser/document.js:29:29
-   export const insertBefore = (parentNode, newChild, refChild) => parentNode.insertBefore(newChild, refChild);
+   export const insertBefore = () => undefined;
Ran all tests for this mutant.

[Survived] ArrowFunction
src/browser/document.js:30:28
-   export const removeChild = (parentNode, child) => parentNode.removeChild(child);
+   export const removeChild = () => undefined;
Ran all tests for this mutant.

[Survived] ArrowFunction
src/browser/document.js:36:25
-   const removeChildNode = (element) => element.removeChild(element.firstChild);
+   const removeChildNode = () => undefined;
Ran all tests for this mutant.

[Survived] ArrowFunction
src/browser/document.js:44:25
-   export const contains = (parent, child) => parent.contains(child);
+   export const contains = () => undefined;
Ran all tests for this mutant.

[Survived] ArrowFunction
src/browser/document.js:49:26
-   export const playAudio = (audio) => audio.play();
+   export const playAudio = () => undefined;
Ran all tests for this mutant.

[Survived] ArrowFunction
src/browser/document.js:48:28
-   export const stopDefault = (e) => e.preventDefault();
+   export const stopDefault = () => undefined;
Ran all tests for this mutant.

[Survived] ArrowFunction
src/browser/document.js:50:27
-   export const pauseAudio = (audio) => audio.pause();
+   export const pauseAudio = () => undefined;
Ran all tests for this mutant.

[Survived] ArrowFunction
src/browser/document.js:53:20
-   export const log = (...args) => console.log(...args);
+   export const log = () => undefined;
Ran all tests for this mutant.

[Survived] ArrowFunction
src/browser/document.js:64:27
-   export const addWarning = (parent) => parent.classList.add('warning');
+   export const addWarning = () => undefined;
Ran all tests for this mutant.

[Survived] ArrowFunction
src/browser/document.js:58:27
-   export const getClasses = (el) => Array.from(el.classList);
+   export const getClasses = () => undefined;
Ran all tests for this mutant.

[Survived] ArrowFunction
src/browser/document.js:55:25
-   export const logError = (...args) => console.error(...args);
+   export const logError = () => undefined;
Ran all tests for this mutant.

[Survived] ArrowFunction
src/browser/document.js:59:32
-   export const getRandomNumber = () => Math.random();
+   export const getRandomNumber = () => undefined;
Ran all tests for this mutant.

[Survived] ArrowFunction
src/browser/document.js:54:21
-   export const warn = (...args) => console.warn(...args);
+   export const warn = () => undefined;
Ran all tests for this mutant.

[Survived] ArrowFunction
src/browser/document.js:60:31
-   export const getCurrentTime = () => new Date().toISOString();
+   export const getCurrentTime = () => undefined;
Ran all tests for this mutant.

[Survived] ArrowFunction
src/browser/document.js:61:36
-   export const hasNextSiblingClass = (link, cls) => link.nextElementSibling && link.nextElementSibling.classList.contains(cls);
+   export const hasNextSiblingClass = () => undefined;
Ran all tests for this mutant.

[Survived] ArrowFunction
src/browser/document.js:65:30
-   export const removeWarning = (outputElement) => outputElement.classList.remove('warning');
+   export const removeWarning = () => undefined;
Ran all tests for this mutant.

[Survived] ArrowFunction
src/browser/document.js:68:23
-   export const reveal = (element) => element.style.display = '';
+   export const reveal = () => undefined;
Ran all tests for this mutant.

[Survived] ArrowFunction
src/browser/document.js:75:33
-   export const getCurrentTarget = (event) => event.currentTarget;
+   export const getCurrentTarget = () => undefined;
Ran all tests for this mutant.

[Survived] ArrowFunction
src/browser/document.js:82:33
-   export const getParentElement = (element) => element.parentElement;
+   export const getParentElement = () => undefined;
Ran all tests for this mutant.

[Survived] ArrowFunction
src/browser/document.js:89:31
-   export const getTargetValue = event => event.target.value;
+   export const getTargetValue = () => undefined;
Ran all tests for this mutant.

[Survived] ArrowFunction
src/browser/document.js:140:34
-   export const removeNextSibling = link => link.nextElementSibling && link.nextElementSibling.remove();
+   export const removeNextSibling = () => undefined;
Ran all tests for this mutant.

[Survived] ArrowFunction
src/browser/document.js:105:25
-   export const getValue = (element) => element.value;
+   export const getValue = () => undefined;
Ran all tests for this mutant.

[Survived] ArrowFunction
src/browser/document.js:138:31
-   export const getNextSibling = (element) => element.nextSibling;
+   export const getNextSibling = () => undefined;
Ran all tests for this mutant.

[Survived] ArrowFunction
src/browser/document.js:188:33
-   export const getDataAttribute = (element, name) => element.dataset[name];
+   export const getDataAttribute = () => undefined;
Ran all tests for this mutant.

[Survived] ArrowFunction
src/browser/document.js:200:41
-   export const makeIntersectionObserver = (callback) =>
-     new IntersectionObserver(callback, { root: null, threshold: 0.1 });
+   export const makeIntersectionObserver = () => undefined;
Ran all tests for this mutant.

[Survived] ArrowFunction
src/browser/document.js:207:31
-   export const isIntersecting = (entry) => entry.isIntersecting;
+   export const isIntersecting = () => undefined;
Ran all tests for this mutant.

[Survived] ObjectLiteral
src/browser/document.js:222:20
-   export const dom = {
-     importModule,
-     makeIntersectionObserver,
-     setType,
-     setPlaceholder,
-     setDataAttribute,
-     getDataAttribute,
-     addClass,
-     removeEventListener,
-     appendChild,
-     createTextNode,
-     getElementsByTagName,
-     querySelectorAll,
-     getClasses,
-     getRandomNumber,
-     getCurrentTime,
-     hasClass,
-     hasNextSiblingClass,
-     hide,
-     insertBefore,
-     log,
-     pauseAudio,
-     playAudio,
-     createElement,
-     removeControlsAttribute,
-     setClassName,
-     getAudioElements,
-     setTextContent,
-     stopDefault,
-     addWarning,
-     addEventListener,
-     removeNextSibling,
-     enable,
-     disable,
-     removeChild,
-     removeWarning,
-     querySelector,
-     disconnectObserver,
-     isIntersecting,
-     logError,
-     error: logError,
-     contains,
-     removeAllChildren,
-     getCurrentTarget,
-     getNextSibling,
-     getParentElement,
-     setValue,
-     getValue,
-     getTargetValue,
-     setTargetValue,
-     reveal
-   };
+   export const dom = {};
Ran all tests for this mutant.

[NoCoverage] ObjectLiteral
src/browser/main.js:31:21
-   const globalState = {
-     blog: null, // Holds the fetched blog data
-     blogStatus: 'idle', // 'idle', 'loading', 'loaded', 'error'
-     blogError: null, // Stores any error during fetch
-     blogFetchPromise: null, // Tracks the ongoing fetch promise
-     temporary: {} // Holds data managed by toys like setTemporary
-   };
+   const globalState = {};

[NoCoverage] StringLiteral
src/browser/main.js:33:15
-     blogStatus: 'idle', // 'idle', 'loading', 'loaded', 'error'
+     blogStatus: "", // 'idle', 'loading', 'loaded', 'error'

[NoCoverage] ObjectLiteral
src/browser/main.js:49:17
-   const loggers = { logInfo: log, logError: dom.logError, logWarning: warn };
+   const loggers = {};

[NoCoverage] BlockStatement
src/browser/main.js:51:22
-   function createEnv() {
-     return new Map([
-       ["getRandomNumber", getRandomNumber],
-       ["getCurrentTime", getCurrentTime],
-       ["getData", () => getData(globalState, fetch, loggers)],
-       ["setData", (newData) => setData({ desired: newData, current: globalState }, loggers)],
-       ["encodeBase64", getEncodeBase64(btoa, unescape, encodeURIComponent)]
-     ]);
-   }
+   function createEnv() {}

[NoCoverage] ArrayDeclaration
src/browser/main.js:52:18
-     return new Map([
-       ["getRandomNumber", getRandomNumber],
-       ["getCurrentTime", getCurrentTime],
-       ["getData", () => getData(globalState, fetch, loggers)],
-       ["setData", (newData) => setData({ desired: newData, current: globalState }, loggers)],
-       ["encodeBase64", getEncodeBase64(btoa, unescape, encodeURIComponent)]
-     ]);
+     return new Map([]);

[NoCoverage] ArrayDeclaration
src/browser/main.js:53:5
-       ["getRandomNumber", getRandomNumber],
+       [],

[NoCoverage] StringLiteral
src/browser/main.js:53:6
-       ["getRandomNumber", getRandomNumber],
+       ["", getRandomNumber],

[NoCoverage] ArrayDeclaration
src/browser/main.js:54:5
-       ["getCurrentTime", getCurrentTime],
+       [],

[NoCoverage] StringLiteral
src/browser/main.js:54:6
-       ["getCurrentTime", getCurrentTime],
+       ["", getCurrentTime],

[NoCoverage] ArrayDeclaration
src/browser/main.js:55:5
-       ["getData", () => getData(globalState, fetch, loggers)],
+       [],

[NoCoverage] StringLiteral
src/browser/main.js:55:6
-       ["getData", () => getData(globalState, fetch, loggers)],
+       ["", () => getData(globalState, fetch, loggers)],

[NoCoverage] ArrowFunction
src/browser/main.js:55:17
-       ["getData", () => getData(globalState, fetch, loggers)],
+       ["getData", () => undefined],

[NoCoverage] ArrayDeclaration
src/browser/main.js:56:5
-       ["setData", (newData) => setData({ desired: newData, current: globalState }, loggers)],
+       [],

[NoCoverage] StringLiteral
src/browser/main.js:56:6
-       ["setData", (newData) => setData({ desired: newData, current: globalState }, loggers)],
+       ["", (newData) => setData({ desired: newData, current: globalState }, loggers)],

[NoCoverage] ArrowFunction
src/browser/main.js:56:17
-       ["setData", (newData) => setData({ desired: newData, current: globalState }, loggers)],
+       ["setData", () => undefined],

[NoCoverage] ObjectLiteral
src/browser/main.js:56:38
-       ["setData", (newData) => setData({ desired: newData, current: globalState }, loggers)],
+       ["setData", (newData) => setData({}, loggers)],

[NoCoverage] ArrayDeclaration
src/browser/main.js:57:5
-       ["encodeBase64", getEncodeBase64(btoa, unescape, encodeURIComponent)]
+       []

[NoCoverage] StringLiteral
src/browser/main.js:57:6
-       ["encodeBase64", getEncodeBase64(btoa, unescape, encodeURIComponent)]
+       ["", getEncodeBase64(btoa, unescape, encodeURIComponent)]

[NoCoverage] ObjectLiteral
src/browser/main.js:61:13
-   const env = { globalState, createEnv, error: dom.logError, fetch, loggers };
+   const env = {};

[NoCoverage] ObjectLiteral
src/browser/main.js:66:3
-     {
-       win: window,
-       logInfo: log,
-       logWarning: warn,
-       getElement: getElementById,
-       hasNoInteractiveComponents,
-       getInteractiveComponents,
-       getInteractiveComponentCount,
-       getComponentInitializer
-     },
+     {},

[NoCoverage] ObjectLiteral
src/browser/main.js:84:43
-   fetchAndCacheBlogData(globalState, fetch, { logInfo: log, logError: dom.logError });
+   fetchAndCacheBlogData(globalState, fetch, {});

[NoCoverage] ArrowFunction
src/browser/main.js:90:25
-   const getDataCallback = () => getData(globalState, fetch, loggers);
+   const getDataCallback = () => undefined;

[NoCoverage] StringLiteral
src/browser/main.js:103:25
-   window.addEventListener('DOMContentLoaded', () => {
+   window.addEventListener("", () => {

[NoCoverage] BlockStatement
src/browser/main.js:103:51
-   window.addEventListener('DOMContentLoaded', () => {
-     initializeDropdowns();
-     // Get all dropdowns and add event listeners with the dom parameter
-     const outputDropdowns = Array.from(document.querySelectorAll('article.entry .value > select.output'));
-     outputDropdowns.forEach(createAddDropdownListener(onOutputDropdownChange, dom));
-     const inputDropdowns = Array.from(document.querySelectorAll('article.entry .value > select.input'));
-     inputDropdowns.forEach(createAddDropdownListener(onInputDropdownChange, dom));
-   });
+   window.addEventListener('DOMContentLoaded', () => {});

[NoCoverage] StringLiteral
src/browser/main.js:107:64
-     const outputDropdowns = Array.from(document.querySelectorAll('article.entry .value > select.output'));
+     const outputDropdowns = Array.from(document.querySelectorAll(""));

[NoCoverage] StringLiteral
src/browser/main.js:110:63
-     const inputDropdowns = Array.from(document.querySelectorAll('article.entry .value > select.input'));
+     const inputDropdowns = Array.from(document.querySelectorAll(""));

[Survived] ConditionalExpression
src/browser/setOutput.js:35:7
-     if (!isObject(newData.output)) {
+     if (false) {
Tests ran:
    setOutput resets newData.output if it is not an object
    setOutput merges output data and calls setData


[Survived] BlockStatement
src/browser/setOutput.js:35:34
-     if (!isObject(newData.output)) {
-       newData.output = {};
-     }
+     if (!isObject(newData.output)) {}
Tests ran:
    setOutput resets newData.output if it is not an object


[Survived] ObjectLiteral
src/browser/tags.js:24:23
-       const clickDeps = { ...dom, createHideSpan };
+       const clickDeps = {};
Tests ran:
    makeHandleClassName calls addEventListener when className starts with tag-
    handleTagLinks applies makeHandleLink(dom) to each <a> element


[Survived] StringLiteral
src/browser/tags.js:70:24
-       dom.addClass(span, 'hide-span');
+       dom.addClass(span, "");
Tests ran:
    makeHandleHideSpan invokes makeHandleHideSpan and its returned function with minimal mock dom


[Survived] StringLiteral
src/browser/tags.js:69:36
-       const span = dom.createElement('span');
+       const span = dom.createElement("");
Tests ran:
    makeHandleHideSpan invokes makeHandleHideSpan and its returned function with minimal mock dom


[Survived] BlockStatement
src/browser/tags.js:68:51
-     return function createHideSpan(link, className) {
-       const span = dom.createElement('span');
-       dom.addClass(span, 'hide-span');
-       dom.appendChild(span, dom.createTextNode(" ("));
-       const hideLink = dom.createElement('a');
-       dom.setTextContent(hideLink, "hide");
-       const handleHideClick = makeHandleHideClick(dom, className);
-       dom.addEventListener(hideLink, 'click', handleHideClick);
-       dom.appendChild(span, hideLink);
-       dom.appendChild(span, dom.createTextNode(")"));
-       dom.insertBefore(link.parentNode, span, link.nextSibling);
-     };
+     return function createHideSpan(link, className) {};
Tests ran:
    makeHandleHideSpan invokes makeHandleHideSpan and its returned function with minimal mock dom


[Survived] StringLiteral
src/browser/tags.js:71:46
-       dom.appendChild(span, dom.createTextNode(" ("));
+       dom.appendChild(span, dom.createTextNode(""));
Tests ran:
    makeHandleHideSpan invokes makeHandleHideSpan and its returned function with minimal mock dom


[Survived] StringLiteral
src/browser/tags.js:73:40
-       const hideLink = dom.createElement('a');
+       const hideLink = dom.createElement("");
Tests ran:
    makeHandleHideSpan invokes makeHandleHideSpan and its returned function with minimal mock dom


[Survived] StringLiteral
src/browser/tags.js:74:34
-       dom.setTextContent(hideLink, "hide");
+       dom.setTextContent(hideLink, "");
Tests ran:
    makeHandleHideSpan invokes makeHandleHideSpan and its returned function with minimal mock dom


[Survived] StringLiteral
src/browser/tags.js:80:46
-       dom.appendChild(span, dom.createTextNode(")"));
+       dom.appendChild(span, dom.createTextNode(""));
Tests ran:
    makeHandleHideSpan invokes makeHandleHideSpan and its returned function with minimal mock dom


[Survived] StringLiteral
src/browser/tags.js:77:36
-       dom.addEventListener(hideLink, 'click', handleHideClick);
+       dom.addEventListener(hideLink, "", handleHideClick);
Tests ran:
    makeHandleHideSpan invokes makeHandleHideSpan and its returned function with minimal mock dom


[Survived] StringLiteral
src/browser/tags.js:86:45
-     const articles = dom.getElementsByTagName('article');
+     const articles = dom.getElementsByTagName("");
Tests ran:
    hideArticlesByClass does not throw when given a class and no matching elements
    hideArticlesByClass hides articles with the given class
    makeHandleHideClick calls stopDefault and hides only articles with the given class


[NoCoverage] BlockStatement
src/browser/toys.js:452:28
-   function getText(response) {
-     return response.text();
-   }
+   function getText(response) {}

[NoCoverage] BlockStatement
src/browser/toys.js:456:53
-   function makeDisplayBody(dom, parent, presenterKey) {
-     return body => {
-       setTextContent({ content: body, presenterKey }, dom, parent);
-     };
-   }
+   function makeDisplayBody(dom, parent, presenterKey) {}

[NoCoverage] BlockStatement
src/browser/toys.js:457:18
-     return body => {
-       setTextContent({ content: body, presenterKey }, dom, parent);
-     };
+     return body => {};

[NoCoverage] ObjectLiteral
src/browser/toys.js:458:20
-       setTextContent({ content: body, presenterKey }, dom, parent);
+       setTextContent({}, dom, parent);

[NoCoverage] BlockStatement
src/browser/toys.js:462:58
-   function getFetchErrorHandler(env, parent, presenterKey) {
-     const { dom, errorFn } = env;
-     return error => {
-       errorFn('Error fetching request URL:', error);
-       setTextContent({ content: 'Error fetching URL: ' + error.message, presenterKey }, dom, parent);
-       dom.addWarning(parent);
-     };
-   }
+   function getFetchErrorHandler(env, parent, presenterKey) {}

[NoCoverage] BlockStatement
src/browser/toys.js:464:19
-     return error => {
-       errorFn('Error fetching request URL:', error);
-       setTextContent({ content: 'Error fetching URL: ' + error.message, presenterKey }, dom, parent);
-       dom.addWarning(parent);
-     };
+     return error => {};

[NoCoverage] StringLiteral
src/browser/toys.js:465:13
-       errorFn('Error fetching request URL:', error);
+       errorFn("", error);

[NoCoverage] ObjectLiteral
src/browser/toys.js:466:20
-       setTextContent({ content: 'Error fetching URL: ' + error.message, presenterKey }, dom, parent);
+       setTextContent({}, dom, parent);

[NoCoverage] StringLiteral
src/browser/toys.js:466:31
-       setTextContent({ content: 'Error fetching URL: ' + error.message, presenterKey }, dom, parent);
+       setTextContent({ content: "" + error.message, presenterKey }, dom, parent);

[NoCoverage] BlockStatement
src/browser/toys.js:471:51
-   function handleRequestResponse(url, env, options) {
-     const { parent, presenterKey } = options;
-     const { fetchFn, dom } = env;
-     const displayBody = makeDisplayBody(dom, parent, presenterKey);
-     const handleFetchError = getFetchErrorHandler(env, parent, presenterKey);
-     fetchFn(url)
-       .then(getText)
-       .then(displayBody)
-       .catch(handleFetchError);
-   }
+   function handleRequestResponse(url, env, options) {}

[NoCoverage] BlockStatement
src/browser/toys.js:547:31
-   function hasRequestField(val) {
-     return Object.prototype.hasOwnProperty.call(val, 'request');
-   }
+   function hasRequestField(val) {}

[NoCoverage] StringLiteral
src/browser/toys.js:548:52
-     return Object.prototype.hasOwnProperty.call(val, 'request');
+     return Object.prototype.hasOwnProperty.call(val, "");

[NoCoverage] BlockStatement
src/browser/toys.js:551:28
-   function hasStringUrl(val) {
-     return val.request && typeof val.request.url === 'string';
-   }
+   function hasStringUrl(val) {}

[NoCoverage] ConditionalExpression
src/browser/toys.js:552:10
-     return val.request && typeof val.request.url === 'string';
+     return true;

[NoCoverage] ConditionalExpression
src/browser/toys.js:552:10
-     return val.request && typeof val.request.url === 'string';
+     return false;

[NoCoverage] LogicalOperator
src/browser/toys.js:552:10
-     return val.request && typeof val.request.url === 'string';
+     return val.request || typeof val.request.url === 'string';

[NoCoverage] ConditionalExpression
src/browser/toys.js:552:25
-     return val.request && typeof val.request.url === 'string';
+     return val.request && true;

[NoCoverage] EqualityOperator
src/browser/toys.js:552:25
-     return val.request && typeof val.request.url === 'string';
+     return val.request && typeof val.request.url !== 'string';

[NoCoverage] StringLiteral
src/browser/toys.js:552:52
-     return val.request && typeof val.request.url === 'string';
+     return val.request && typeof val.request.url === "";

[NoCoverage] BlockStatement
src/browser/toys.js:802:39
-   function isValidParsedRequest(parsed) {
-     return parsedRequestPredicates.every(fn => fn(parsed));
-   }
+   function isValidParsedRequest(parsed) {}

[NoCoverage] MethodExpression
src/browser/toys.js:803:10
-     return parsedRequestPredicates.every(fn => fn(parsed));
+     return parsedRequestPredicates.some(fn => fn(parsed));

[NoCoverage] ArrowFunction
src/browser/toys.js:803:40
-     return parsedRequestPredicates.every(fn => fn(parsed));
+     return parsedRequestPredicates.every(() => undefined);

[NoCoverage] BlockStatement
src/browser/toys.js:806:51
-   function handleParsedResult(parsed, env, options) {
-     const isValid = isValidParsedRequest(parsed);
-     if (isValid) {
-       handleRequestResponse(parsed.request.url, env, options);
-     }
-     return isValid;
-   }
+   function handleParsedResult(parsed, env, options) {}

[NoCoverage] ConditionalExpression
src/browser/toys.js:808:7
-     if (isValid) {
+     if (true) {

[NoCoverage] ConditionalExpression
src/browser/toys.js:808:7
-     if (isValid) {
+     if (false) {

[NoCoverage] BlockStatement
src/browser/toys.js:808:16
-     if (isValid) {
-       handleRequestResponse(parsed.request.url, env, options);
-     }
+     if (isValid) {}

[NoCoverage] BlockStatement
src/browser/toys.js:819:34
-   function parseJSONResult(result) {
-     try {
-       return JSON.parse(result);
-     } catch {
-       return null;
-     }
-   }
+   function parseJSONResult(result) {}

[NoCoverage] BlockStatement
src/browser/toys.js:820:7
-     try {
-       return JSON.parse(result);
-     } catch {
+     try {} catch {

[NoCoverage] BlockStatement
src/browser/toys.js:822:11
-     } catch {
-       return null;
-     }
+     } catch {}

[NoCoverage] BooleanLiteral
src/browser/toys.js:869:7
-     if (!handleParsedResult(parsed, env, { parent, presenterKey })) {
+     if (handleParsedResult(parsed, env, {
+     parent,
+     presenterKey
+   })) {

[NoCoverage] ConditionalExpression
src/browser/toys.js:869:7
-     if (!handleParsedResult(parsed, env, { parent, presenterKey })) {
+     if (true) {

[NoCoverage] ConditionalExpression
src/browser/toys.js:869:7
-     if (!handleParsedResult(parsed, env, { parent, presenterKey })) {
+     if (false) {

[NoCoverage] ObjectLiteral
src/browser/toys.js:869:40
-     if (!handleParsedResult(parsed, env, { parent, presenterKey })) {
+     if (!handleParsedResult(parsed, env, {})) {

[NoCoverage] BlockStatement
src/browser/toys.js:869:67
-     if (!handleParsedResult(parsed, env, { parent, presenterKey })) {
-       setTextContent({ content: result, presenterKey }, dom, parent);
-     }
+     if (!handleParsedResult(parsed, env, { parent, presenterKey })) {}

[NoCoverage] ObjectLiteral
src/browser/toys.js:870:20
-       setTextContent({ content: result, presenterKey }, dom, parent);
+       setTextContent({}, dom, parent);

[NoCoverage] BlockStatement
src/browser/toys.js:1043:21
-     if (!kvContainer) {
-       kvContainer = dom.createElement('div');
-       dom.setClassName(kvContainer, 'kv-container');
-       const nextSibling = dom.getNextSibling(textInput);
-       dom.insertBefore(container, kvContainer, nextSibling);
-     }
+     if (!kvContainer) {}

[NoCoverage] StringLiteral
src/browser/toys.js:1044:37
-       kvContainer = dom.createElement('div');
+       kvContainer = dom.createElement("");

[NoCoverage] StringLiteral
src/browser/toys.js:1045:35
-       dom.setClassName(kvContainer, 'kv-container');
+       dom.setClassName(kvContainer, "");

[Survived] ConditionalExpression
src/browser/toys.js:23:9
-       if (pair && typeof pair === 'object' && 'key' in pair) {
+       if (true && 'key' in pair) {
Tests ran:
    parseExistingRows should convert an array of key-value pairs to an object
    parseExistingRows should handle arrays with undefined/null values
    parseExistingRows should skip items without a key property in array input
  and 3 more tests!


[Survived] ConditionalExpression
src/browser/toys.js:23:17
-       if (pair && typeof pair === 'object' && 'key' in pair) {
+       if (pair && true && 'key' in pair) {
Tests ran:
    parseExistingRows should convert an array of key-value pairs to an object
    parseExistingRows should handle arrays with undefined/null values
    parseExistingRows should skip items without a key property in array input
  and 3 more tests!


[Survived] LogicalOperator
src/browser/toys.js:23:9
-       if (pair && typeof pair === 'object' && 'key' in pair) {
+       if (pair || typeof pair === 'object' && 'key' in pair) {
Tests ran:
    parseExistingRows should convert an array of key-value pairs to an object
    parseExistingRows should handle arrays with undefined/null values
    parseExistingRows should skip items without a key property in array input
  and 3 more tests!


[Survived] StringLiteral
src/browser/toys.js:32:63
-       const existing = JSON.parse(dom.getValue(inputElement) || '{}');
+       const existing = JSON.parse(dom.getValue(inputElement) || "");
Tests ran:
    parseExistingRows should parse an empty input as an empty object


[Survived] BlockStatement
src/browser/toys.js:164:60
-   export const handleKVType = (dom, container, textInput) => {
-     maybeRemoveNumber(container, dom);
-     ensureKeyValueInput(container, textInput, dom);
-   };
+   export const handleKVType = (dom, container, textInput) => {};
Tests ran:
    handleKVType can be invoked with an empty DOM object


[Survived] StringLiteral
src/browser/toys.js:240:27
-     return dropdown.closest('article.entry')
+     return dropdown.closest("")
Tests ran:
    toys handleDropdownChange logs the correct postId and selectedValue when dropdown changes
    toys handleDropdownChange handles dropdown change with empty output data


[Survived] BlockStatement
src/browser/toys.js:243:38
-   function getDropdownPostId(dropdown) {
-     const article = getDropdownArticle(dropdown);
-     return article.id;
-   }
+   function getDropdownPostId(dropdown) {}
Tests ran:
    toys handleDropdownChange logs the correct postId and selectedValue when dropdown changes
    toys handleDropdownChange handles dropdown change with empty output data


[Survived] OptionalChaining
src/browser/toys.js:252:18
-     const output = data.output?.[postId];
+     const output = data.output[postId];
Tests ran:
    toys handleDropdownChange logs the correct postId and selectedValue when dropdown changes
    toys handleDropdownChange handles dropdown change with empty output data


[Survived] LogicalOperator
src/browser/toys.js:255:58
-     setTextContent({ presenterKey: selectedValue, content: output || '' }, dom, parent);
+     setTextContent({ presenterKey: selectedValue, content: output && '' }, dom, parent);
Tests ran:
    toys handleDropdownChange logs the correct postId and selectedValue when dropdown changes
    toys handleDropdownChange handles dropdown change with empty output data


[Survived] ConditionalExpression
src/browser/toys.js:255:58
-     setTextContent({ presenterKey: selectedValue, content: output || '' }, dom, parent);
+     setTextContent({ presenterKey: selectedValue, content: true }, dom, parent);
Tests ran:
    toys handleDropdownChange logs the correct postId and selectedValue when dropdown changes
    toys handleDropdownChange handles dropdown change with empty output data


[Survived] ConditionalExpression
src/browser/toys.js:255:58
-     setTextContent({ presenterKey: selectedValue, content: output || '' }, dom, parent);
+     setTextContent({ presenterKey: selectedValue, content: false }, dom, parent);
Tests ran:
    toys handleDropdownChange logs the correct postId and selectedValue when dropdown changes
    toys handleDropdownChange handles dropdown change with empty output data


[Survived] StringLiteral
src/browser/toys.js:255:68
-     setTextContent({ presenterKey: selectedValue, content: output || '' }, dom, parent);
+     setTextContent({ presenterKey: selectedValue, content: output || "Stryker was here!" }, dom, parent);
Tests ran:
    toys handleDropdownChange handles dropdown change with empty output data


[Survived] BlockStatement
src/browser/toys.js:329:27
-     return function(module) {
-       return module[functionName];
-     };
+     return function(module) {};
Tests ran:
    toys initialiseModule can be invoked with minimal arguments


[Survived] ObjectLiteral
src/browser/toys.js:422:24
-       const moduleInfo = { article, modulePath, functionName };
+       const moduleInfo = {};
Tests ran:
    toys makeCreateIntersectionObserver returns the result of makeIntersectionObserver
    toys makeCreateIntersectionObserver calls makeIntersectionObserver with a callback
    toys makeCreateIntersectionObserver calls importModule when entry is intersecting
  and 3 more tests!


[Survived] StringLiteral
src/browser/toys.js:522:50
-     let numberInput = dom.querySelector(container, 'input[type="number"]');
+     let numberInput = dom.querySelector(container, "");
Tests ran:
    createInputDropdownHandler when select value is number handles number input setup and cleanup when dropdown value is number
    ensureNumberInput should return existing number input without creating a new one


[Survived] BlockStatement
src/browser/toys.js:509:73
-   const positionNumberInput = (container, textInput, numberInput, dom) => {
-     const nextSibling = dom.getNextSibling(textInput);
-     container.insertBefore(numberInput, nextSibling);
-   };
+   const positionNumberInput = (container, textInput, numberInput, dom) => {};
Tests ran:
    createInputDropdownHandler when select value is number handles number input setup and cleanup when dropdown value is number


[Survived] StringLiteral
src/browser/toys.js:566:49
-       const prevKey = dom.getDataAttribute(keyEl, 'prevKey');
+       const prevKey = dom.getDataAttribute(keyEl, "");
Tests ran:
    createKeyInputHandler should sync hidden field when key does not change
    createKeyInputHandler should update rows with new key when key is unique and non-empty
    createKeyInputHandler should not update rows when new key is empty
  and 2 more tests!


[Survived] ConditionalExpression
src/browser/toys.js:570:9
-       if (newKey === prevKey) {
+       if (false) {
Tests ran:
    createKeyInputHandler should sync hidden field when key does not change
    createKeyInputHandler should update rows with new key when key is unique and non-empty
    createKeyInputHandler should not update rows when new key is empty
  and 2 more tests!


[Survived] BlockStatement
src/browser/toys.js:570:29
-       if (newKey === prevKey) {
-         syncHiddenField(textInput, rows, dom);
-         return;
-       }
+       if (newKey === prevKey) {}
Tests ran:
    createKeyInputHandler should sync hidden field when key does not change


[Survived] StringLiteral
src/browser/toys.js:615:35
-     const keyEl = dom.createElement('input');
+     const keyEl = dom.createElement("");
Tests ran:
    createKeyValueRow creates a row with key and value inputs
    createKeyValueRow creates a remove button for non-last rows
    createKeyValueRow creates an add button for the last row
  and 4 more tests!


[Survived] ArrowFunction
src/browser/toys.js:624:29
-     const removeKeyListener = () => dom.removeEventListener(keyEl, 'input', onKey);
+     const removeKeyListener = () => undefined;
Tests ran:
    createKeyValueRow creates a row with key and value inputs
    createKeyValueRow creates a remove button for non-last rows
    createKeyValueRow creates an add button for the last row
  and 4 more tests!


[Survived] StringLiteral
src/browser/toys.js:616:22
-     dom.setType(keyEl, 'text');
+     dom.setType(keyEl, "");
Tests ran:
    createKeyValueRow creates a row with key and value inputs
    createKeyValueRow creates a remove button for non-last rows
    createKeyValueRow creates an add button for the last row
  and 4 more tests!


[Survived] StringLiteral
src/browser/toys.js:624:66
-     const removeKeyListener = () => dom.removeEventListener(keyEl, 'input', onKey);
+     const removeKeyListener = () => dom.removeEventListener(keyEl, "", onKey);
Tests ran:
    createKeyValueRow handles cleanup when disposers are called


[Survived] ConditionalExpression
src/browser/toys.js:749:37
-       const btnEl = createButton(dom, idx === entries.length - 1, rows, render, key, disposers);
+       const btnEl = createButton(dom, false, rows, render, key, disposers);
Tests ran:
    createKeyValueRow creates a row with key and value inputs
    createKeyValueRow creates a remove button for non-last rows
    createKeyValueRow creates an add button for the last row
  and 4 more tests!


[Survived] BlockStatement
src/browser/toys.js:761:20
-     if (isAddButton) {
-       setupAddButton(dom, button, rows, render, disposers);
-     } else {
+     if (isAddButton) {} else {
Tests ran:
    handleKVType can be invoked with an empty DOM object


[Survived] StringLiteral
src/browser/toys.js:854:31
-       setTextContent({ content: 'Error: ' + e.message, presenterKey: 'text' }, dom, parent);
+       setTextContent({ content: "" + e.message, presenterKey: 'text' }, dom, parent);
Tests ran:
    toys initializeInteractiveComponent attaches click and keypress listeners with expected arguments


[Survived] StringLiteral
src/browser/toys.js:853:14
-       logError('Error processing input:', e);
+       logError("", e);
Tests ran:
    toys initializeInteractiveComponent attaches click and keypress listeners with expected arguments


[Survived] BlockStatement
src/browser/toys.js:852:17
-     return (e) => {
-       logError('Error processing input:', e);
-       setTextContent({ content: 'Error: ' + e.message, presenterKey: 'text' }, dom, parent);
-       addWarning(parent);
-     };
+     return (e) => {};
Tests ran:
    toys initializeInteractiveComponent attaches click and keypress listeners with expected arguments


[Survived] ObjectLiteral
src/browser/toys.js:866:28
-     setOutput(JSON.stringify({ [article.id]: result }), toyEnv);
+     setOutput(JSON.stringify({}), toyEnv);
Tests ran:
    toys initializeInteractiveComponent attaches click and keypress listeners with expected arguments


[Survived] ConditionalExpression
src/browser/toys.js:886:7
-     if (event) {
+     if (true) {
Tests ran:
    toys initializeInteractiveComponent attaches click and keypress listeners with expected arguments


[Survived] BlockStatement
src/browser/toys.js:879:15
-     } catch (e) {
-       handleInputError(e);
-     }
+     } catch (e) {}
Tests ran:
    toys initializeInteractiveComponent attaches click and keypress listeners with expected arguments


[Survived] ConditionalExpression
src/browser/toys.js:886:7
-     if (event) {
+     if (false) {
Tests ran:
    toys initializeInteractiveComponent attaches click and keypress listeners with expected arguments


[Survived] BlockStatement
src/browser/toys.js:886:14
-     if (event) {
-       dom.stopDefault(event);
-     }
+     if (event) {}
Tests ran:
    toys initializeInteractiveComponent attaches click and keypress listeners with expected arguments


[Survived] BooleanLiteral
src/browser/toys.js:904:27
-     inputElement.disabled = true;
+     inputElement.disabled = false;
Tests ran:
    toys initialiseModule can be invoked with minimal arguments
    toys initializeInteractiveComponent attaches click and keypress listeners with expected arguments
    toys initializeInteractiveComponent does not call handleSubmit when a non-Enter key is pressed


[Survived] StringLiteral
src/browser/toys.js:918:11
-     logInfo('Initializing interactive component for article', article.id);
+     logInfo("", article.id);
Tests ran:
    toys initialiseModule can be invoked with minimal arguments
    toys initializeInteractiveComponent attaches click and keypress listeners with expected arguments
    toys initializeInteractiveComponent does not call handleSubmit when a non-Enter key is pressed


[Survived] BooleanLiteral
src/browser/toys.js:905:27
-     submitButton.disabled = true;
+     submitButton.disabled = false;
Tests ran:
    toys initialiseModule can be invoked with minimal arguments
    toys initializeInteractiveComponent attaches click and keypress listeners with expected arguments
    toys initializeInteractiveComponent does not call handleSubmit when a non-Enter key is pressed


[Survived] BlockStatement
src/browser/toys.js:903:60
-   function disableInputAndButton(inputElement, submitButton) {
-     inputElement.disabled = true;
-     submitButton.disabled = true;
-   }
+   function disableInputAndButton(inputElement, submitButton) {}
Tests ran:
    toys initialiseModule can be invoked with minimal arguments
    toys initializeInteractiveComponent attaches click and keypress listeners with expected arguments
    toys initializeInteractiveComponent does not call handleSubmit when a non-Enter key is pressed


[Survived] StringLiteral
src/browser/toys.js:922:51
-     const outputParent = dom.querySelector(article, 'div.output'); // Get the parent element
+     const outputParent = dom.querySelector(article, ""); // Get the parent element
Tests ran:
    toys initialiseModule can be invoked with minimal arguments
    toys initializeInteractiveComponent attaches click and keypress listeners with expected arguments
    toys initializeInteractiveComponent does not call handleSubmit when a non-Enter key is pressed


[Survived] StringLiteral
src/browser/toys.js:923:51
-     const outputSelect = dom.querySelector(article, 'select.output');
+     const outputSelect = dom.querySelector(article, "");
Tests ran:
    toys initialiseModule can be invoked with minimal arguments
    toys initializeInteractiveComponent attaches click and keypress listeners with expected arguments
    toys initializeInteractiveComponent does not call handleSubmit when a non-Enter key is pressed


[Survived] StringLiteral
src/browser/toys.js:930:57
-     const initialisingWarning = setTextContent({ content: 'Initialising...', presenterKey }, dom, outputParent);
+     const initialisingWarning = setTextContent({ content: "", presenterKey }, dom, outputParent);
Tests ran:
    toys initialiseModule can be invoked with minimal arguments
    toys initializeInteractiveComponent attaches click and keypress listeners with expected arguments
    toys initializeInteractiveComponent does not call handleSubmit when a non-Enter key is pressed


[Survived] ObjectLiteral
src/browser/toys.js:950:29
-     enableInteractiveControls({ inputElement, submitButton, parent: outputParent }, dom, presenterKey);
+     enableInteractiveControls({}, dom, presenterKey);
Tests ran:
    toys initialiseModule can be invoked with minimal arguments
    toys initializeInteractiveComponent attaches click and keypress listeners with expected arguments
    toys initializeInteractiveComponent does not call handleSubmit when a non-Enter key is pressed


[Survived] BlockStatement
src/browser/toys.js:1023:24
-     const render = () => {
-       clearDisposers(disposersArray);
-       dom.removeAllChildren(container);
-       // If no keys, add a single empty row
-       if (Object.keys(rows).length === 0) {
-         rows[''] = '';
-       }
-       const entries = Object.entries(rows);
-       entries.forEach(createKeyValueRow(dom, entries, textInput, rows, syncHiddenField, disposersArray, render, container));
-       syncHiddenField(textInput, rows, dom);
-     };
+     const render = () => {};
Tests ran:
    handleKVType can be invoked with an empty DOM object


[Survived] ConditionalExpression
src/browser/toys.js:1028:9
-       if (Object.keys(rows).length === 0) {
+       if (true) {
Tests ran:
    handleKVType can be invoked with an empty DOM object


[Survived] ConditionalExpression
src/browser/toys.js:1028:9
-       if (Object.keys(rows).length === 0) {
+       if (false) {
Tests ran:
    handleKVType can be invoked with an empty DOM object


[Survived] BlockStatement
src/browser/toys.js:1028:41
-       if (Object.keys(rows).length === 0) {
-         rows[''] = '';
-       }
+       if (Object.keys(rows).length === 0) {}
Tests ran:
    handleKVType can be invoked with an empty DOM object


[Survived] BlockStatement
src/browser/toys.js:1041:67
-   export const ensureKeyValueInput = (container, textInput, dom) => {
-     let kvContainer = dom.querySelector(container, '.kv-container');
-     if (!kvContainer) {
-       kvContainer = dom.createElement('div');
-       dom.setClassName(kvContainer, 'kv-container');
-       const nextSibling = dom.getNextSibling(textInput);
-       dom.insertBefore(container, kvContainer, nextSibling);
-     }
-     // ---------------------------------------------------------------------
-     // State + bookkeeping
-     // ---------------------------------------------------------------------
-     const rows = parseExistingRows(dom, textInput);
-     const disposers = [];
-     // Create the render function with the required dependencies
-     const render = createRenderer(dom, disposers, kvContainer, rows, textInput, syncHiddenField);
-     // Initial render
-     render();
-     // Public API for cleanup by parent code
-     const dispose = createDispose(disposers, dom, kvContainer, rows);
-     kvContainer._dispose = dispose;
-     return kvContainer;
-   };
+   export const ensureKeyValueInput = (container, textInput, dom) => {};
Tests ran:
    handleKVType can be invoked with an empty DOM object


[Survived] StringLiteral
src/browser/toys.js:1029:18
-         rows[''] = '';
+         rows[''] = "Stryker was here!";
Tests ran:
    handleKVType can be invoked with an empty DOM object


[Survived] StringLiteral
src/browser/toys.js:1029:12
-         rows[''] = '';
+         rows["Stryker was here!"] = '';
Tests ran:
    handleKVType can be invoked with an empty DOM object


[Survived] EqualityOperator
src/browser/toys.js:1028:9
-       if (Object.keys(rows).length === 0) {
+       if (Object.keys(rows).length !== 0) {
Tests ran:
    handleKVType can be invoked with an empty DOM object


[Survived] StringLiteral
src/browser/toys.js:1042:50
-     let kvContainer = dom.querySelector(container, '.kv-container');
+     let kvContainer = dom.querySelector(container, "");
Tests ran:
    handleKVType can be invoked with an empty DOM object


[Survived] ConditionalExpression
src/browser/toys.js:1043:7
-     if (!kvContainer) {
+     if (false) {
Tests ran:
    handleKVType can be invoked with an empty DOM object


[Survived] ArrayDeclaration
src/browser/toys.js:800:33
-   const parsedRequestPredicates = [isObject, hasRequestField, hasStringUrl];
+   const parsedRequestPredicates = [];
Ran all tests for this mutant.

[Survived] StringLiteral
src/constants/markdown.js:5:13
-     ASTERISK: '*',
+     ASTERISK: "",
Ran all tests for this mutant.

[Survived] StringLiteral
src/constants/markdown.js:6:15
-     UNDERSCORE: '_',
+     UNDERSCORE: "",
Ran all tests for this mutant.

[Survived] StringLiteral
src/constants/markdown.js:7:13
-     BACKTICK: '`',
+     BACKTICK: "",
Ran all tests for this mutant.

[Survived] ObjectLiteral
src/constants/markdown.js:4:47
-   export const MARKDOWN_MARKERS = Object.freeze({
-     ASTERISK: '*',
-     UNDERSCORE: '_',
-     BACKTICK: '`',
-     TILDE: '~',
-     DASH: '-',
-     EQUAL: '=',
-     HASH: '#',
-     GREATER_THAN: '>',
-     PIPE: '|',
-     BACKSLASH: '\\',
-     SLASH: '/',
-     EXCLAMATION: '!',
-     BRACKET_OPEN: '[',
-     BRACKET_CLOSE: ']',
-     PAREN_OPEN: '(',
-     PAREN_CLOSE: ')'
-   });
+   export const MARKDOWN_MARKERS = Object.freeze({});
Ran all tests for this mutant.

[Survived] StringLiteral
src/constants/markdown.js:9:9
-     DASH: '-',
+     DASH: "",
Ran all tests for this mutant.

[Survived] StringLiteral
src/constants/markdown.js:8:10
-     TILDE: '~',
+     TILDE: "",
Ran all tests for this mutant.

[Survived] StringLiteral
src/constants/markdown.js:11:9
-     HASH: '#',
+     HASH: "",
Ran all tests for this mutant.

[Survived] StringLiteral
src/constants/markdown.js:10:10
-     EQUAL: '=',
+     EQUAL: "",
Ran all tests for this mutant.

[Survived] StringLiteral
src/constants/markdown.js:12:17
-     GREATER_THAN: '>',
+     GREATER_THAN: "",
Ran all tests for this mutant.

[Survived] StringLiteral
src/constants/markdown.js:13:9
-     PIPE: '|',
+     PIPE: "",
Ran all tests for this mutant.

[Survived] StringLiteral
src/constants/markdown.js:15:10
-     SLASH: '/',
+     SLASH: "",
Ran all tests for this mutant.

[Survived] StringLiteral
src/constants/markdown.js:14:14
-     BACKSLASH: '\\',
+     BACKSLASH: "",
Ran all tests for this mutant.

[Survived] StringLiteral
src/constants/markdown.js:16:16
-     EXCLAMATION: '!',
+     EXCLAMATION: "",
Ran all tests for this mutant.

[Survived] StringLiteral
src/constants/markdown.js:20:16
-     PAREN_CLOSE: ')'
+     PAREN_CLOSE: ""
Ran all tests for this mutant.

[Survived] StringLiteral
src/constants/markdown.js:17:17
-     BRACKET_OPEN: '[',
+     BRACKET_OPEN: "",
Ran all tests for this mutant.

[Survived] StringLiteral
src/constants/markdown.js:19:15
-     PAREN_OPEN: '(',
+     PAREN_OPEN: "",
Ran all tests for this mutant.

[Survived] StringLiteral
src/constants/markdown.js:18:18
-     BRACKET_CLOSE: ']',
+     BRACKET_CLOSE: "",
Ran all tests for this mutant.

[Survived] ObjectLiteral
src/constants/markdown.js:26:40
-   export const HTML_TAGS = Object.freeze({
-     EMPHASIS: 'em',
-     STRONG: 'strong',
-     CODE: 'code',
-     PARAGRAPH: 'p',
-     BLOCKQUOTE: 'blockquote',
-     LIST: 'ul',
-     LIST_ITEM: 'li',
-     ORDERED_LIST: 'ol',
-     HORIZONTAL_RULE: 'hr',
-     LINE_BREAK: 'br',
-     LINK: 'a',
-     IMAGE: 'img',
-     DIV: 'div',
-     SPAN: 'span',
-     PRE: 'pre'
-   });
+   export const HTML_TAGS = Object.freeze({});
Ran all tests for this mutant.

[Survived] StringLiteral
src/constants/markdown.js:27:13
-     EMPHASIS: 'em',
+     EMPHASIS: "",
Ran all tests for this mutant.

[Survived] StringLiteral
src/constants/markdown.js:28:11
-     STRONG: 'strong',
+     STRONG: "",
Ran all tests for this mutant.

[Survived] StringLiteral
src/constants/markdown.js:30:14
-     PARAGRAPH: 'p',
+     PARAGRAPH: "",
Ran all tests for this mutant.

[Survived] StringLiteral
src/constants/markdown.js:29:9
-     CODE: 'code',
+     CODE: "",
Ran all tests for this mutant.

[Survived] StringLiteral
src/constants/markdown.js:31:15
-     BLOCKQUOTE: 'blockquote',
+     BLOCKQUOTE: "",
Ran all tests for this mutant.

[Survived] StringLiteral
src/constants/markdown.js:32:9
-     LIST: 'ul',
+     LIST: "",
Ran all tests for this mutant.

[Survived] StringLiteral
src/constants/markdown.js:34:17
-     ORDERED_LIST: 'ol',
+     ORDERED_LIST: "",
Ran all tests for this mutant.

[Survived] StringLiteral
src/constants/markdown.js:33:14
-     LIST_ITEM: 'li',
+     LIST_ITEM: "",
Ran all tests for this mutant.

[Survived] StringLiteral
src/constants/markdown.js:35:20
-     HORIZONTAL_RULE: 'hr',
+     HORIZONTAL_RULE: "",
Ran all tests for this mutant.

[Survived] StringLiteral
src/constants/markdown.js:38:10
-     IMAGE: 'img',
+     IMAGE: "",
Ran all tests for this mutant.

[Survived] StringLiteral
src/constants/markdown.js:36:15
-     LINE_BREAK: 'br',
+     LINE_BREAK: "",
Ran all tests for this mutant.

[Survived] StringLiteral
src/constants/markdown.js:39:8
-     DIV: 'div',
+     DIV: "",
Ran all tests for this mutant.

[Survived] StringLiteral
src/constants/markdown.js:37:9
-     LINK: 'a',
+     LINK: "",
Ran all tests for this mutant.

[Survived] ObjectLiteral
src/constants/markdown.js:47:42
-   export const CSS_CLASSES = Object.freeze({
-     CONTAINER: 'markdown-container',
-     HEADING: 'markdown-heading',
-     PARAGRAPH: 'markdown-paragraph',
-     LIST: 'markdown-list',
-     LIST_ITEM: 'markdown-list-item',
-     BLOCKQUOTE: 'markdown-blockquote',
-     CODE: 'markdown-code',
-     INLINE_CODE: 'markdown-inline-code',
-     LINK: 'markdown-link',
-     IMAGE: 'markdown-image',
-     HORIZONTAL_RULE: 'markdown-hr'
-   });
+   export const CSS_CLASSES = Object.freeze({});
Ran all tests for this mutant.

[Survived] StringLiteral
src/constants/markdown.js:40:9
-     SPAN: 'span',
+     SPAN: "",
Ran all tests for this mutant.

[Survived] StringLiteral
src/constants/markdown.js:41:8
-     PRE: 'pre'
+     PRE: ""
Ran all tests for this mutant.

[Survived] StringLiteral
src/constants/markdown.js:48:14
-     CONTAINER: 'markdown-container',
+     CONTAINER: "",
Ran all tests for this mutant.

[Survived] StringLiteral
src/constants/markdown.js:52:14
-     LIST_ITEM: 'markdown-list-item',
+     LIST_ITEM: "",
Ran all tests for this mutant.

[Survived] StringLiteral
src/constants/markdown.js:49:12
-     HEADING: 'markdown-heading',
+     HEADING: "",
Ran all tests for this mutant.

[Survived] StringLiteral
src/constants/markdown.js:51:9
-     LIST: 'markdown-list',
+     LIST: "",
Ran all tests for this mutant.

[Survived] StringLiteral
src/constants/markdown.js:50:14
-     PARAGRAPH: 'markdown-paragraph',
+     PARAGRAPH: "",
Ran all tests for this mutant.

[Survived] StringLiteral
src/constants/markdown.js:53:15
-     BLOCKQUOTE: 'markdown-blockquote',
+     BLOCKQUOTE: "",
Ran all tests for this mutant.

[Survived] StringLiteral
src/constants/markdown.js:54:9
-     CODE: 'markdown-code',
+     CODE: "",
Ran all tests for this mutant.

[Survived] StringLiteral
src/constants/markdown.js:55:16
-     INLINE_CODE: 'markdown-inline-code',
+     INLINE_CODE: "",
Ran all tests for this mutant.

[Survived] StringLiteral
src/constants/markdown.js:56:9
-     LINK: 'markdown-link',
+     LINK: "",
Ran all tests for this mutant.

[Survived] ObjectLiteral
src/constants/markdown.js:64:46
-   export const DEFAULT_OPTIONS = Object.freeze({
-     gfm: true,
-     tables: true,
-     breaks: false,
-     pedantic: false,
-     sanitize: false,
-     smartLists: true,
-     smartypants: false,
-     xhtml: false,
-     highlight: null,
-     langPrefix: 'language-',
-     headerIds: true,
-     headerPrefix: '',
-     mangle: true,
-     baseUrl: null,
-     linkTarget: null,
-     renderer: null
-   });
+   export const DEFAULT_OPTIONS = Object.freeze({});
Ran all tests for this mutant.

[Survived] BooleanLiteral
src/constants/markdown.js:65:8
-     gfm: true,
+     gfm: false,
Ran all tests for this mutant.

[Survived] StringLiteral
src/constants/markdown.js:58:20
-     HORIZONTAL_RULE: 'markdown-hr'
+     HORIZONTAL_RULE: ""
Ran all tests for this mutant.

[Survived] StringLiteral
src/constants/markdown.js:57:10
-     IMAGE: 'markdown-image',
+     IMAGE: "",
Ran all tests for this mutant.

[Survived] BooleanLiteral
src/constants/markdown.js:67:11
-     breaks: false,
+     breaks: true,
Ran all tests for this mutant.

[Survived] BooleanLiteral
src/constants/markdown.js:66:11
-     tables: true,
+     tables: false,
Ran all tests for this mutant.

[Survived] BooleanLiteral
src/constants/markdown.js:68:13
-     pedantic: false,
+     pedantic: true,
Ran all tests for this mutant.

[Survived] BooleanLiteral
src/constants/markdown.js:69:13
-     sanitize: false,
+     sanitize: true,
Ran all tests for this mutant.

[Survived] BooleanLiteral
src/constants/markdown.js:71:16
-     smartypants: false,
+     smartypants: true,
Ran all tests for this mutant.

[Survived] BooleanLiteral
src/constants/markdown.js:70:15
-     smartLists: true,
+     smartLists: false,
Ran all tests for this mutant.

[Survived] StringLiteral
src/constants/markdown.js:74:15
-     langPrefix: 'language-',
+     langPrefix: "",
Ran all tests for this mutant.

[Survived] BooleanLiteral
src/constants/markdown.js:72:10
-     xhtml: false,
+     xhtml: true,
Ran all tests for this mutant.

[Survived] BooleanLiteral
src/constants/markdown.js:75:14
-     headerIds: true,
+     headerIds: false,
Ran all tests for this mutant.

[Survived] StringLiteral
src/constants/markdown.js:76:17
-     headerPrefix: '',
+     headerPrefix: "Stryker was here!",
Ran all tests for this mutant.

[Survived] BooleanLiteral
src/constants/markdown.js:77:11
-     mangle: true,
+     mangle: false,
Ran all tests for this mutant.

[NoCoverage] StringLiteral
src/generator/copy.js:12:45
-   const projectRoot = path.resolve(__dirname, '../..'); // Adjust based on script location
+   const projectRoot = path.resolve(__dirname, ""); // Adjust based on script location

[NoCoverage] StringLiteral
src/generator/copy.js:13:42
-   const srcDir = path.resolve(projectRoot, 'src');
+   const srcDir = path.resolve(projectRoot, "");

[NoCoverage] StringLiteral
src/generator/copy.js:14:45
-   const publicDir = path.resolve(projectRoot, 'public');
+   const publicDir = path.resolve(projectRoot, "");

[NoCoverage] StringLiteral
src/generator/copy.js:15:41
-   const srcToysDir = path.resolve(srcDir, 'toys');
+   const srcToysDir = path.resolve(srcDir, "");

[NoCoverage] StringLiteral
src/generator/copy.js:16:44
-   const srcBrowserDir = path.resolve(srcDir, 'browser');
+   const srcBrowserDir = path.resolve(srcDir, "");

[NoCoverage] StringLiteral
src/generator/copy.js:17:47
-   const publicBrowserDir = path.join(publicDir, 'browser');
+   const publicBrowserDir = path.join(publicDir, "");

[NoCoverage] StringLiteral
src/generator/copy.js:18:42
-   const srcUtilsDir = path.resolve(srcDir, 'utils');
+   const srcUtilsDir = path.resolve(srcDir, "");

[NoCoverage] StringLiteral
src/generator/copy.js:19:45
-   const publicUtilsDir = path.join(publicDir, 'utils');
+   const publicUtilsDir = path.join(publicDir, "");

[NoCoverage] BooleanLiteral
src/generator/copy.js:22:5
-   if (!fs.existsSync(publicDir)) {
+   if (fs.existsSync(publicDir)) {

[NoCoverage] ConditionalExpression
src/generator/copy.js:22:5
-   if (!fs.existsSync(publicDir)) {
+   if (true) {

[NoCoverage] ConditionalExpression
src/generator/copy.js:22:5
-   if (!fs.existsSync(publicDir)) {
+   if (false) {

[NoCoverage] BlockStatement
src/generator/copy.js:22:32
-   if (!fs.existsSync(publicDir)) {
-     fs.mkdirSync(publicDir, { recursive: true });
-   }
+   if (!fs.existsSync(publicDir)) {}

[NoCoverage] ObjectLiteral
src/generator/copy.js:23:27
-     fs.mkdirSync(publicDir, { recursive: true });
+     fs.mkdirSync(publicDir, {});

[NoCoverage] BooleanLiteral
src/generator/copy.js:23:40
-     fs.mkdirSync(publicDir, { recursive: true });
+     fs.mkdirSync(publicDir, { recursive: false });

[NoCoverage] StringLiteral
src/generator/copy.js:27:39
-   const srcBlogJson = path.join(srcDir, 'blog.json');
+   const srcBlogJson = path.join(srcDir, "");

[NoCoverage] StringLiteral
src/generator/copy.js:28:45
-   const publicBlogJson = path.join(publicDir, 'blog.json');
+   const publicBlogJson = path.join(publicDir, "");

[NoCoverage] StringLiteral
src/generator/copy.js:30:13
-   console.log('Copied: src/blog.json -> public/blog.json');
+   console.log("");

[NoCoverage] BlockStatement
src/generator/copy.js:35:39
-   function isCorrectJsFileEnding(entry) {
-     return entry.name.endsWith('.js') && !entry.name.endsWith('.test.js');
-   }
+   function isCorrectJsFileEnding(entry) {}

[NoCoverage] ConditionalExpression
src/generator/copy.js:36:10
-     return entry.name.endsWith('.js') && !entry.name.endsWith('.test.js');
+     return true;

[NoCoverage] ConditionalExpression
src/generator/copy.js:36:10
-     return entry.name.endsWith('.js') && !entry.name.endsWith('.test.js');
+     return false;

[NoCoverage] LogicalOperator
src/generator/copy.js:36:10
-     return entry.name.endsWith('.js') && !entry.name.endsWith('.test.js');
+     return entry.name.endsWith('.js') || !entry.name.endsWith('.test.js');

[NoCoverage] MethodExpression
src/generator/copy.js:36:10
-     return entry.name.endsWith('.js') && !entry.name.endsWith('.test.js');
+     return entry.name.startsWith('.js') && !entry.name.endsWith('.test.js');

[NoCoverage] StringLiteral
src/generator/copy.js:36:30
-     return entry.name.endsWith('.js') && !entry.name.endsWith('.test.js');
+     return entry.name.endsWith("") && !entry.name.endsWith('.test.js');

[NoCoverage] BooleanLiteral
src/generator/copy.js:36:40
-     return entry.name.endsWith('.js') && !entry.name.endsWith('.test.js');
+     return entry.name.endsWith('.js') && entry.name.endsWith('.test.js');

[NoCoverage] MethodExpression
src/generator/copy.js:36:41
-     return entry.name.endsWith('.js') && !entry.name.endsWith('.test.js');
+     return entry.name.endsWith('.js') && !entry.name.startsWith('.test.js');

[NoCoverage] StringLiteral
src/generator/copy.js:36:61
-     return entry.name.endsWith('.js') && !entry.name.endsWith('.test.js');
+     return entry.name.endsWith('.js') && !entry.name.endsWith("");

[NoCoverage] BlockStatement
src/generator/copy.js:39:26
-   function isJsFile(entry) {
-     return entry.isFile() && isCorrectJsFileEnding(entry);
-   }
+   function isJsFile(entry) {}

[NoCoverage] ConditionalExpression
src/generator/copy.js:40:10
-     return entry.isFile() && isCorrectJsFileEnding(entry);
+     return true;

[NoCoverage] ConditionalExpression
src/generator/copy.js:40:10
-     return entry.isFile() && isCorrectJsFileEnding(entry);
+     return false;

[NoCoverage] LogicalOperator
src/generator/copy.js:40:10
-     return entry.isFile() && isCorrectJsFileEnding(entry);
+     return entry.isFile() || isCorrectJsFileEnding(entry);

[NoCoverage] BlockStatement
src/generator/copy.js:44:29
-   function getDirEntries(dir) {
-     return fs.readdirSync(dir, { withFileTypes: true });
-   }
+   function getDirEntries(dir) {}

[NoCoverage] ObjectLiteral
src/generator/copy.js:45:30
-     return fs.readdirSync(dir, { withFileTypes: true });
+     return fs.readdirSync(dir, {});

[NoCoverage] BooleanLiteral
src/generator/copy.js:45:47
-     return fs.readdirSync(dir, { withFileTypes: true });
+     return fs.readdirSync(dir, { withFileTypes: false });

[NoCoverage] BlockStatement
src/generator/copy.js:48:45
-   function getActualNewFiles(entry, fullPath) {
-     if (entry.isDirectory()) {
-       return findJsFiles(fullPath);
-     }
-     return [fullPath];
-   }
+   function getActualNewFiles(entry, fullPath) {}

[NoCoverage] ConditionalExpression
src/generator/copy.js:49:7
-     if (entry.isDirectory()) {
+     if (true) {

[NoCoverage] ConditionalExpression
src/generator/copy.js:49:7
-     if (entry.isDirectory()) {
+     if (false) {

[NoCoverage] BlockStatement
src/generator/copy.js:49:28
-     if (entry.isDirectory()) {
-       return findJsFiles(fullPath);
-     }
+     if (entry.isDirectory()) {}

[NoCoverage] ArrayDeclaration
src/generator/copy.js:52:10
-     return [fullPath];
+     return [];

[NoCoverage] BlockStatement
src/generator/copy.js:55:34
-   function shouldCheckEntry(entry) {
-     return entry.isDirectory() || isJsFile(entry);
-   }
+   function shouldCheckEntry(entry) {}

[NoCoverage] ConditionalExpression
src/generator/copy.js:56:10
-     return entry.isDirectory() || isJsFile(entry);
+     return true;

[NoCoverage] ConditionalExpression
src/generator/copy.js:56:10
-     return entry.isDirectory() || isJsFile(entry);
+     return false;

[NoCoverage] LogicalOperator
src/generator/copy.js:56:10
-     return entry.isDirectory() || isJsFile(entry);
+     return entry.isDirectory() && isJsFile(entry);

[NoCoverage] BlockStatement
src/generator/copy.js:59:47
-   function getPossibleNewFiles(entry, fullPath) {
-     if (shouldCheckEntry(entry)) {
-       return getActualNewFiles(entry, fullPath);
-     }
-     return [];
-   }
+   function getPossibleNewFiles(entry, fullPath) {}

[NoCoverage] ConditionalExpression
src/generator/copy.js:60:7
-     if (shouldCheckEntry(entry)) {
+     if (true) {

[NoCoverage] ConditionalExpression
src/generator/copy.js:60:7
-     if (shouldCheckEntry(entry)) {
+     if (false) {

[NoCoverage] BlockStatement
src/generator/copy.js:60:32
-     if (shouldCheckEntry(entry)) {
-       return getActualNewFiles(entry, fullPath);
-     }
+     if (shouldCheckEntry(entry)) {}

[NoCoverage] ArrayDeclaration
src/generator/copy.js:63:10
-     return [];
+     return ["Stryker was here"];

[NoCoverage] BlockStatement
src/generator/copy.js:66:49
-   function accumulateJsFiles(jsFiles, entry, dir) {
-     const fullPath = path.join(dir, entry.name);
-     const newFiles = getPossibleNewFiles(entry, fullPath);
-     return jsFiles.concat(newFiles);
-   }
+   function accumulateJsFiles(jsFiles, entry, dir) {}

[NoCoverage] BlockStatement
src/generator/copy.js:72:27
-   function findJsFiles(dir) {
-     const entries = getDirEntries(dir);
-     return entries.reduce((jsFiles, entry) => accumulateJsFiles(jsFiles, entry, dir), []);
-   }
+   function findJsFiles(dir) {}

[NoCoverage] ArrowFunction
src/generator/copy.js:74:25
-     return entries.reduce((jsFiles, entry) => accumulateJsFiles(jsFiles, entry, dir), []);
+     return entries.reduce(() => undefined, []);

[NoCoverage] ArrayDeclaration
src/generator/copy.js:74:85
-     return entries.reduce((jsFiles, entry) => accumulateJsFiles(jsFiles, entry, dir), []);
+     return entries.reduce((jsFiles, entry) => accumulateJsFiles(jsFiles, entry, dir), ["Stryker was here"]);

[NoCoverage] BlockStatement
src/generator/copy.js:81:30
-   toyFiles.forEach(filePath => {
-     const relativePath = path.relative(srcToysDir, filePath);
-     const destPath = path.join(publicDir, relativePath);
-     const destDir = path.dirname(destPath);
-     // Ensure the destination directory exists
-     if (!fs.existsSync(destDir)) {
-       fs.mkdirSync(destDir, { recursive: true });
-     }
-     // Copy the file
-     fs.copyFileSync(filePath, destPath);
-     console.log(`Copied: ${filePath} -> ${destPath}`);
-   });
+   toyFiles.forEach(filePath => {});

[NoCoverage] BooleanLiteral
src/generator/copy.js:87:7
-     if (!fs.existsSync(destDir)) {
+     if (fs.existsSync(destDir)) {

[NoCoverage] ConditionalExpression
src/generator/copy.js:87:7
-     if (!fs.existsSync(destDir)) {
+     if (true) {

[NoCoverage] ConditionalExpression
src/generator/copy.js:87:7
-     if (!fs.existsSync(destDir)) {
+     if (false) {

[NoCoverage] BlockStatement
src/generator/copy.js:87:32
-     if (!fs.existsSync(destDir)) {
-       fs.mkdirSync(destDir, { recursive: true });
-     }
+     if (!fs.existsSync(destDir)) {}

[NoCoverage] ObjectLiteral
src/generator/copy.js:88:27
-       fs.mkdirSync(destDir, { recursive: true });
+       fs.mkdirSync(destDir, {});

[NoCoverage] BooleanLiteral
src/generator/copy.js:88:40
-       fs.mkdirSync(destDir, { recursive: true });
+       fs.mkdirSync(destDir, { recursive: false });

[NoCoverage] StringLiteral
src/generator/copy.js:93:15
-     console.log(`Copied: ${filePath} -> ${destPath}`);
+     console.log(``);

[NoCoverage] StringLiteral
src/generator/copy.js:96:13
-   console.log('Toy files copied successfully!');
+   console.log("");

[NoCoverage] StringLiteral
src/generator/copy.js:99:47
-   const srcPresentersDir = path.resolve(srcDir, 'presenters');
+   const srcPresentersDir = path.resolve(srcDir, "");

[NoCoverage] StringLiteral
src/generator/copy.js:100:50
-   const publicPresentersDir = path.join(publicDir, 'presenters');
+   const publicPresentersDir = path.join(publicDir, "");

[NoCoverage] ConditionalExpression
src/generator/copy.js:102:5
-   if (fs.existsSync(srcPresentersDir)) {
+   if (true) {

[NoCoverage] ConditionalExpression
src/generator/copy.js:102:5
-   if (fs.existsSync(srcPresentersDir)) {
+   if (false) {

[NoCoverage] BlockStatement
src/generator/copy.js:102:38
-   if (fs.existsSync(srcPresentersDir)) {
-     const presenterFiles = findJsFiles(srcPresentersDir);
-     presenterFiles.forEach(filePath => {
-       const relativePath = path.relative(srcPresentersDir, filePath);
-       const destPath = path.join(publicPresentersDir, relativePath);
-       const destDir = path.dirname(destPath);
-       if (!fs.existsSync(destDir)) {
-         fs.mkdirSync(destDir, { recursive: true });
-       }
-       fs.copyFileSync(filePath, destPath);
-       console.log(`Copied presenter: ${filePath} -> ${destPath}`);
-     });
-     console.log('Presenter files copied successfully!');
-   } else {
+   if (fs.existsSync(srcPresentersDir)) {} else {

[NoCoverage] BlockStatement
src/generator/copy.js:104:38
-     presenterFiles.forEach(filePath => {
-       const relativePath = path.relative(srcPresentersDir, filePath);
-       const destPath = path.join(publicPresentersDir, relativePath);
-       const destDir = path.dirname(destPath);
-       if (!fs.existsSync(destDir)) {
-         fs.mkdirSync(destDir, { recursive: true });
-       }
-       fs.copyFileSync(filePath, destPath);
-       console.log(`Copied presenter: ${filePath} -> ${destPath}`);
-     });
+     presenterFiles.forEach(filePath => {});

[NoCoverage] BooleanLiteral
src/generator/copy.js:109:9
-       if (!fs.existsSync(destDir)) {
+       if (fs.existsSync(destDir)) {

[NoCoverage] ConditionalExpression
src/generator/copy.js:109:9
-       if (!fs.existsSync(destDir)) {
+       if (true) {

[NoCoverage] ConditionalExpression
src/generator/copy.js:109:9
-       if (!fs.existsSync(destDir)) {
+       if (false) {

[NoCoverage] BlockStatement
src/generator/copy.js:109:34
-       if (!fs.existsSync(destDir)) {
-         fs.mkdirSync(destDir, { recursive: true });
-       }
+       if (!fs.existsSync(destDir)) {}

[NoCoverage] ObjectLiteral
src/generator/copy.js:110:29
-         fs.mkdirSync(destDir, { recursive: true });
+         fs.mkdirSync(destDir, {});

[NoCoverage] BooleanLiteral
src/generator/copy.js:110:42
-         fs.mkdirSync(destDir, { recursive: true });
+         fs.mkdirSync(destDir, { recursive: false });

[NoCoverage] StringLiteral
src/generator/copy.js:113:17
-       console.log(`Copied presenter: ${filePath} -> ${destPath}`);
+       console.log(``);

[NoCoverage] StringLiteral
src/generator/copy.js:115:15
-     console.log('Presenter files copied successfully!');
+     console.log("");

[NoCoverage] BlockStatement
src/generator/copy.js:116:8
-   } else {
-     console.warn(`Warning: presenters directory not found at ${srcPresentersDir}`);
-   }
+   } else {}

[NoCoverage] StringLiteral
src/generator/copy.js:117:16
-     console.warn(`Warning: presenters directory not found at ${srcPresentersDir}`);
+     console.warn(``);

[NoCoverage] ConditionalExpression
src/generator/copy.js:121:5
-   if (fs.existsSync(srcUtilsDir)) {
+   if (true) {

[NoCoverage] ConditionalExpression
src/generator/copy.js:121:5
-   if (fs.existsSync(srcUtilsDir)) {
+   if (false) {

[NoCoverage] BlockStatement
src/generator/copy.js:121:33
-   if (fs.existsSync(srcUtilsDir)) {
-     copyDirRecursive(srcUtilsDir, publicUtilsDir);
-     console.log('Utils files copied successfully!');
-   } else {
+   if (fs.existsSync(srcUtilsDir)) {} else {

[NoCoverage] StringLiteral
src/generator/copy.js:123:15
-     console.log('Utils files copied successfully!');
+     console.log("");

[NoCoverage] BlockStatement
src/generator/copy.js:124:8
-   } else {
-     console.warn(`Warning: utils directory not found at ${srcUtilsDir}`);
-   }
+   } else {}

[NoCoverage] StringLiteral
src/generator/copy.js:125:16
-     console.warn(`Warning: utils directory not found at ${srcUtilsDir}`);
+     console.warn(``);

[NoCoverage] BlockStatement
src/generator/copy.js:130:49
-   function handleDirectoryEntry(entry, src, dest) {
-     const srcPath = path.join(src, entry.name);
-     const destPath = path.join(dest, entry.name);
-     if (entry.isDirectory()) {
-       copyDirRecursive(srcPath, destPath);
-     } else {
-       fs.copyFileSync(srcPath, destPath);
-       console.log(`Copied: ${srcPath} -> ${destPath}`);
-     }
-   }
+   function handleDirectoryEntry(entry, src, dest) {}

[NoCoverage] ConditionalExpression
src/generator/copy.js:133:7
-     if (entry.isDirectory()) {
+     if (true) {

[NoCoverage] ConditionalExpression
src/generator/copy.js:133:7
-     if (entry.isDirectory()) {
+     if (false) {

[NoCoverage] BlockStatement
src/generator/copy.js:133:28
-     if (entry.isDirectory()) {
-       copyDirRecursive(srcPath, destPath);
-     } else {
+     if (entry.isDirectory()) {} else {

[NoCoverage] BlockStatement
src/generator/copy.js:135:10
-     } else {
-       fs.copyFileSync(srcPath, destPath);
-       console.log(`Copied: ${srcPath} -> ${destPath}`);
-     }
+     } else {}

[NoCoverage] StringLiteral
src/generator/copy.js:137:17
-       console.log(`Copied: ${srcPath} -> ${destPath}`);
+       console.log(``);

[NoCoverage] BlockStatement
src/generator/copy.js:141:54
-   function processDirectoryEntries(entries, src, dest) {
-     for (const entry of entries) {
-       handleDirectoryEntry(entry, src, dest);
-     }
-   }
+   function processDirectoryEntries(entries, src, dest) {}

[NoCoverage] BlockStatement
src/generator/copy.js:142:32
-     for (const entry of entries) {
-       handleDirectoryEntry(entry, src, dest);
-     }
+     for (const entry of entries) {}

[NoCoverage] BlockStatement
src/generator/copy.js:147:38
-   function copyDirRecursive(src, dest) {
-     if (!fs.existsSync(dest)) {
-       fs.mkdirSync(dest, { recursive: true });
-     }
-     const entries = fs.readdirSync(src, { withFileTypes: true });
-     processDirectoryEntries(entries, src, dest);
-   }
+   function copyDirRecursive(src, dest) {}

[NoCoverage] BooleanLiteral
src/generator/copy.js:148:7
-     if (!fs.existsSync(dest)) {
+     if (fs.existsSync(dest)) {

[NoCoverage] ConditionalExpression
src/generator/copy.js:148:7
-     if (!fs.existsSync(dest)) {
+     if (true) {

[NoCoverage] ConditionalExpression
src/generator/copy.js:148:7
-     if (!fs.existsSync(dest)) {
+     if (false) {

[NoCoverage] BlockStatement
src/generator/copy.js:148:29
-     if (!fs.existsSync(dest)) {
-       fs.mkdirSync(dest, { recursive: true });
-     }
+     if (!fs.existsSync(dest)) {}

[NoCoverage] ObjectLiteral
src/generator/copy.js:149:24
-       fs.mkdirSync(dest, { recursive: true });
+       fs.mkdirSync(dest, {});

[NoCoverage] BooleanLiteral
src/generator/copy.js:149:37
-       fs.mkdirSync(dest, { recursive: true });
+       fs.mkdirSync(dest, { recursive: false });

[NoCoverage] ObjectLiteral
src/generator/copy.js:151:39
-     const entries = fs.readdirSync(src, { withFileTypes: true });
+     const entries = fs.readdirSync(src, {});

[NoCoverage] BooleanLiteral
src/generator/copy.js:151:56
-     const entries = fs.readdirSync(src, { withFileTypes: true });
+     const entries = fs.readdirSync(src, { withFileTypes: false });

[NoCoverage] ConditionalExpression
src/generator/copy.js:155:5
-   if (fs.existsSync(srcBrowserDir)) {
+   if (true) {

[NoCoverage] ConditionalExpression
src/generator/copy.js:155:5
-   if (fs.existsSync(srcBrowserDir)) {
+   if (false) {

[NoCoverage] BlockStatement
src/generator/copy.js:155:35
-   if (fs.existsSync(srcBrowserDir)) {
-     copyDirRecursive(srcBrowserDir, publicBrowserDir);
-     console.log('Browser files copied successfully!');
-   } else {
+   if (fs.existsSync(srcBrowserDir)) {} else {

[NoCoverage] StringLiteral
src/generator/copy.js:157:15
-     console.log('Browser files copied successfully!');
+     console.log("");

[NoCoverage] BlockStatement
src/generator/copy.js:158:8
-   } else {
-     console.warn(`Warning: browser directory not found at ${srcBrowserDir}`);
-   }
+   } else {}

[NoCoverage] StringLiteral
src/generator/copy.js:159:16
-     console.warn(`Warning: browser directory not found at ${srcBrowserDir}`);
+     console.warn(``);

[Survived] ConditionalExpression
src/generator/generator.js:84:7
-     if (args.keyExtraClasses === undefined) {args.keyExtraClasses = '';}
+     if (false) {args.keyExtraClasses = '';}
Tests ran:
    Blog Generator should generate complete HTML page with multiple posts
    Blog Generator should contain content for posts
    Blog Generator should contain an illustration for posts
  and 8 more tests!


[Survived] BlockStatement
src/generator/generator.js:84:43
-     if (args.keyExtraClasses === undefined) {args.keyExtraClasses = '';}
+     if (args.keyExtraClasses === undefined) {}
Tests ran:
    Blog Generator should generate complete HTML page with multiple posts
    Blog Generator should contain content for posts
    Blog Generator should contain an illustration for posts
  and 8 more tests!


[Survived] MethodExpression
src/generator/generator.js:128:19
-     const classes = [CLASS.VALUE, ...additionalClasses].filter(Boolean);
+     const classes = [CLASS.VALUE, ...additionalClasses];
Tests ran:
    Blog Generator should generate complete HTML page with multiple posts
    Blog Generator should contain related links for a post
    Blog Generator should contain a toy component for a post
  and 2 more tests!


[Survived] ArrayDeclaration
src/generator/generator.js:183:21
-     const valueDivs = [
-       createValueDiv(HEADER_BANNER),
-       createValueDiv(METADATA_TEXT, [CLASS.METADATA])
-     ];
+     const valueDivs = [];
Tests ran:
    generateBlogOuter returns a string of HTML when given a blog object with an empty posts array
    getBlogGenerationArgs returns an object with header, footer, and wrapFunc


[Survived] BlockStatement
src/generator/generator.js:182:32
-   function createHeaderContent() {
-     const valueDivs = [
-       createValueDiv(HEADER_BANNER),
-       createValueDiv(METADATA_TEXT, [CLASS.METADATA])
-     ];
-     const parts = valueDivs.map(valueDiv => createLabeledSection({ label: '', valueHTML: valueDiv, wrapValueDiv: false }));
-     return join(parts);
-   }
+   function createHeaderContent() {}
Tests ran:
    generateBlogOuter returns a string of HTML when given a blog object with an empty posts array
    getBlogGenerationArgs returns an object with header, footer, and wrapFunc


[Survived] ArrowFunction
src/generator/generator.js:187:31
-     const parts = valueDivs.map(valueDiv => createLabeledSection({ label: '', valueHTML: valueDiv, wrapValueDiv: false }));
+     const parts = valueDivs.map(() => undefined);
Tests ran:
    generateBlogOuter returns a string of HTML when given a blog object with an empty posts array
    getBlogGenerationArgs returns an object with header, footer, and wrapFunc


[Survived] ArrayDeclaration
src/generator/generator.js:185:35
-       createValueDiv(METADATA_TEXT, [CLASS.METADATA])
+       createValueDiv(METADATA_TEXT, [])
Tests ran:
    generateBlogOuter returns a string of HTML when given a blog object with an empty posts array
    getBlogGenerationArgs returns an object with header, footer, and wrapFunc


[Survived] ObjectLiteral
src/generator/generator.js:187:64
-     const parts = valueDivs.map(valueDiv => createLabeledSection({ label: '', valueHTML: valueDiv, wrapValueDiv: false }));
+     const parts = valueDivs.map(valueDiv => createLabeledSection({}));
Tests ran:
    generateBlogOuter returns a string of HTML when given a blog object with an empty posts array
    getBlogGenerationArgs returns an object with header, footer, and wrapFunc


[Survived] StringLiteral
src/generator/generator.js:187:73
-     const parts = valueDivs.map(valueDiv => createLabeledSection({ label: '', valueHTML: valueDiv, wrapValueDiv: false }));
+     const parts = valueDivs.map(valueDiv => createLabeledSection({ label: "Stryker was here!", valueHTML: valueDiv, wrapValueDiv: false }));
Tests ran:
    generateBlogOuter returns a string of HTML when given a blog object with an empty posts array
    getBlogGenerationArgs returns an object with header, footer, and wrapFunc


[Survived] BooleanLiteral
src/generator/generator.js:187:112
-     const parts = valueDivs.map(valueDiv => createLabeledSection({ label: '', valueHTML: valueDiv, wrapValueDiv: false }));
+     const parts = valueDivs.map(valueDiv => createLabeledSection({ label: '', valueHTML: valueDiv, wrapValueDiv: true }));
Tests ran:
    generateBlogOuter returns a string of HTML when given a blog object with an empty posts array
    getBlogGenerationArgs returns an object with header, footer, and wrapFunc


[Survived] BlockStatement
src/generator/generator.js:196:33
-   function createSection(content) {
-     return createDiv(CLASS.ENTRY, content);
-   }
+   function createSection(content) {}
Tests ran:
    generateBlogOuter returns a string of HTML when given a blog object with an empty posts array
    getBlogGenerationArgs returns an object with header, footer, and wrapFunc


[Survived] BlockStatement
src/generator/generator.js:204:32
-   function createHeaderSection() {
-     const headerContent = createHeaderContent();
-     return createSection(headerContent);
-   }
+   function createHeaderSection() {}
Tests ran:
    generateBlogOuter returns a string of HTML when given a blog object with an empty posts array
    getBlogGenerationArgs returns an object with header, footer, and wrapFunc


[Survived] BlockStatement
src/generator/generator.js:217:32
-   function createFooterContent() {
-     const classes = joinClasses([CLASS.FOOTER, CLASS.VALUE, CLASS.WARNING]);
-     const footerDiv = createDiv(classes, WARNING_MESSAGE);
-     return createLabeledSection({ label: '', valueHTML: footerDiv, wrapValueDiv: false });
-   }
+   function createFooterContent() {}
Tests ran:
    generateBlogOuter returns a string of HTML when given a blog object with an empty posts array
    getBlogGenerationArgs returns an object with header, footer, and wrapFunc


[Survived] ArrayDeclaration
src/generator/generator.js:218:31
-     const classes = joinClasses([CLASS.FOOTER, CLASS.VALUE, CLASS.WARNING]);
+     const classes = joinClasses([]);
Tests ran:
    generateBlogOuter returns a string of HTML when given a blog object with an empty posts array
    getBlogGenerationArgs returns an object with header, footer, and wrapFunc


[Survived] ObjectLiteral
src/generator/generator.js:220:31
-     return createLabeledSection({ label: '', valueHTML: footerDiv, wrapValueDiv: false });
+     return createLabeledSection({});
Tests ran:
    generateBlogOuter returns a string of HTML when given a blog object with an empty posts array
    getBlogGenerationArgs returns an object with header, footer, and wrapFunc


[Survived] StringLiteral
src/generator/generator.js:220:40
-     return createLabeledSection({ label: '', valueHTML: footerDiv, wrapValueDiv: false });
+     return createLabeledSection({ label: "Stryker was here!", valueHTML: footerDiv, wrapValueDiv: false });
Tests ran:
    generateBlogOuter returns a string of HTML when given a blog object with an empty posts array
    getBlogGenerationArgs returns an object with header, footer, and wrapFunc


[Survived] BooleanLiteral
src/generator/generator.js:220:80
-     return createLabeledSection({ label: '', valueHTML: footerDiv, wrapValueDiv: false });
+     return createLabeledSection({ label: '', valueHTML: footerDiv, wrapValueDiv: true });
Tests ran:
    generateBlogOuter returns a string of HTML when given a blog object with an empty posts array
    getBlogGenerationArgs returns an object with header, footer, and wrapFunc


[Survived] BlockStatement
src/generator/generator.js:227:32
-   function createFooterSection() {
-     const footerContent = createFooterContent();
-     return createSection(footerContent);
-   }
+   function createFooterSection() {}
Tests ran:
    generateBlogOuter returns a string of HTML when given a blog object with an empty posts array
    getBlogGenerationArgs returns an object with header, footer, and wrapFunc


[Survived] BlockStatement
src/generator/generator.js:237:35
-   function createContainerDivOpen() {
-     const idAttr = createAttrPair(ATTR_NAME.ID, CONTAINER_ID);
-     return `<${DIV_TAG_NAME} ${idAttr}>`;
-   }
+   function createContainerDivOpen() {}
Tests ran:
    generateBlogOuter returns a string of HTML when given a blog object with an empty posts array
    getBlogGenerationArgs returns an object with header, footer, and wrapFunc


[Survived] StringLiteral
src/generator/generator.js:239:10
-     return `<${DIV_TAG_NAME} ${idAttr}>`;
+     return ``;
Tests ran:
    generateBlogOuter returns a string of HTML when given a blog object with an empty posts array
    getBlogGenerationArgs returns an object with header, footer, and wrapFunc


[Survived] StringLiteral
src/generator/generator.js:248:5
-       '<body>',
+       "",
Tests ran:
    generateBlogOuter returns a string of HTML when given a blog object with an empty posts array
    getBlogGenerationArgs returns an object with header, footer, and wrapFunc


[Survived] StringLiteral
src/generator/generator.js:250:5
-       '<!-- Header -->',
+       "",
Tests ran:
    generateBlogOuter returns a string of HTML when given a blog object with an empty posts array
    getBlogGenerationArgs returns an object with header, footer, and wrapFunc


[Survived] StringLiteral
src/generator/generator.js:268:10
-     return '</div>';
+     return "";
Tests ran:
    generateBlogOuter returns a string of HTML when given a blog object with an empty posts array
    getBlogGenerationArgs returns an object with header, footer, and wrapFunc


[Survived] StringLiteral
src/generator/generator.js:261:28
-     return contentArray.join('');
+     return contentArray.join("Stryker was here!");
Tests ran:
    generateBlogOuter returns a string of HTML when given a blog object with an empty posts array
    getBlogGenerationArgs returns an object with header, footer, and wrapFunc


[Survived] BlockStatement
src/generator/generator.js:267:36
-   function createContainerDivClose() {
-     return '</div>';
-   }
+   function createContainerDivClose() {}
Tests ran:
    generateBlogOuter returns a string of HTML when given a blog object with an empty posts array
    getBlogGenerationArgs returns an object with header, footer, and wrapFunc


[Survived] BlockStatement
src/generator/generator.js:274:28
-   function createBodyClose() {
-     return '</body>';
-   }
+   function createBodyClose() {}
Tests ran:
    generateBlogOuter returns a string of HTML when given a blog object with an empty posts array
    getBlogGenerationArgs returns an object with header, footer, and wrapFunc


[Survived] StringLiteral
src/generator/generator.js:275:10
-     return '</body>';
+     return "";
Tests ran:
    generateBlogOuter returns a string of HTML when given a blog object with an empty posts array
    getBlogGenerationArgs returns an object with header, footer, and wrapFunc


[Survived] StringLiteral
src/generator/generator.js:297:28
-     return contentArray.join('');
+     return contentArray.join("Stryker was here!");
Tests ran:
    generateBlogOuter returns a string of HTML when given a blog object with an empty posts array
    getBlogGenerationArgs returns an object with header, footer, and wrapFunc


[Survived] StringLiteral
src/generator/generator.js:283:5
-       '',
+       "Stryker was here!",
Tests ran:
    generateBlogOuter returns a string of HTML when given a blog object with an empty posts array
    getBlogGenerationArgs returns an object with header, footer, and wrapFunc


[Survived] StringLiteral
src/generator/generator.js:286:5
-       '<script type="module" src="browser/main.js" defer></script>',
+       "",
Tests ran:
    generateBlogOuter returns a string of HTML when given a blog object with an empty posts array
    getBlogGenerationArgs returns an object with header, footer, and wrapFunc


[Survived] ConditionalExpression
src/generator/generator.js:419:34
-     [c => typeof c !== 'object' || c === null, c => ({ type: 'text', content: c })],
+     [c => typeof c !== 'object' || false, c => ({ type: 'text', content: c })],
Tests ran:
    Blog Generator should render quotes as blockquotes


[Survived] EqualityOperator
src/generator/generator.js:544:38
-     return Array.isArray(post.tags) && post.tags.length > 0;
+     return Array.isArray(post.tags) && post.tags.length >= 0;
Tests ran:
    Blog Generator should display tags for posts


[Survived] ConditionalExpression
src/generator/generator.js:544:38
-     return Array.isArray(post.tags) && post.tags.length > 0;
+     return Array.isArray(post.tags) && true;
Tests ran:
    Blog Generator should display tags for posts


[Survived] ConditionalExpression
src/generator/generator.js:580:10
-     return Array.isArray(value) && value.length > 0;
+     return true;
Tests ran:
    Blog Generator should generate complete HTML page with multiple posts
    Blog Generator should contain related links for a post
    Blog Generator should contain a toy component for a post


[Survived] LogicalOperator
src/generator/generator.js:580:10
-     return Array.isArray(value) && value.length > 0;
+     return Array.isArray(value) || value.length > 0;
Tests ran:
    Blog Generator should generate complete HTML page with multiple posts
    Blog Generator should contain related links for a post
    Blog Generator should contain a toy component for a post


[Survived] ConditionalExpression
src/generator/generator.js:580:34
-     return Array.isArray(value) && value.length > 0;
+     return Array.isArray(value) && true;
Tests ran:
    Blog Generator should generate complete HTML page with multiple posts
    Blog Generator should contain related links for a post
    Blog Generator should contain a toy component for a post


[Survived] EqualityOperator
src/generator/generator.js:580:34
-     return Array.isArray(value) && value.length > 0;
+     return Array.isArray(value) && value.length >= 0;
Tests ran:
    Blog Generator should generate complete HTML page with multiple posts
    Blog Generator should contain related links for a post
    Blog Generator should contain a toy component for a post


[Survived] LogicalOperator
src/generator/generator.js:589:10
-     return post.relatedLinks !== undefined && isNonEmptyArray(post.relatedLinks);
+     return post.relatedLinks !== undefined || isNonEmptyArray(post.relatedLinks);
Tests ran:
    Blog Generator should generate complete HTML page with multiple posts
    Blog Generator should contain content for posts
    Blog Generator should contain an illustration for posts
  and 6 more tests!


[Survived] ConditionalExpression
src/generator/generator.js:589:10
-     return post.relatedLinks !== undefined && isNonEmptyArray(post.relatedLinks);
+     return true && isNonEmptyArray(post.relatedLinks);
Tests ran:
    Blog Generator should generate complete HTML page with multiple posts
    Blog Generator should contain content for posts
    Blog Generator should contain an illustration for posts
  and 6 more tests!


[Survived] BlockStatement
src/generator/generator.js:701:12
-       } else {
-         acc[field] = '';
-       }
+       } else {}
Tests ran:
    Blog Generator should generate complete HTML page with multiple posts
    Blog Generator should contain related links for a post
    Blog Generator should contain a toy component for a post


[Survived] BlockStatement
src/generator/generator.js:711:10
-     } else {
-       return '';
-     }
+     } else {}
Tests ran:
    Blog Generator should generate complete HTML page with multiple posts
    Blog Generator should contain related links for a post


[Survived] BlockStatement
src/generator/generator.js:740:10
-     } else {
-       return '';
-     }
+     } else {}
Tests ran:
    Blog Generator should generate complete HTML page with multiple posts
    Blog Generator should contain related links for a post
    Blog Generator should contain a toy component for a post


[Survived] MethodExpression
src/generator/generator.js:756:22
-     return `<li>${join(parts.filter(Boolean))}</li>`;
+     return `<li>${join(parts)}</li>`;
Tests ran:
    Blog Generator should generate complete HTML page with multiple posts
    Blog Generator should contain related links for a post
    Blog Generator should contain a toy component for a post


[Survived] StringLiteral
src/generator/generator.js:31:11
-     FOOTER: 'footer',
+     FOOTER: "",
Ran all tests for this mutant.

[Survived] StringLiteral
src/generator/generator.js:32:12
-     WARNING: 'warning',
+     WARNING: "",
Ran all tests for this mutant.

[Survived] StringLiteral
src/generator/generator.js:34:15
-     FULL_WIDTH: 'full-width',
+     FULL_WIDTH: "",
Ran all tests for this mutant.

[Survived] StringLiteral
src/generator/generator.js:173:23
-   const METADATA_TEXT = `Software developer and philosopher in Berlin`;
+   const METADATA_TEXT = ``;
Ran all tests for this mutant.

[Survived] StringLiteral
src/generator/generator.js:46:22
-   const CONTAINER_ID = 'container';
+   const CONTAINER_ID = "";
Ran all tests for this mutant.

[Survived] StringLiteral
src/generator/generator.js:211:3
-     'All content is authored by Matt Heard and is <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/">CC BY-NC-SA 4.0</a>, unless otherwise noted.';
+     "";
Ran all tests for this mutant.

[Survived] StringLiteral
src/generator/head.js:3:28
-   export const headElement = `<head>
-     <meta charset="UTF-8">
-     <meta name="viewport" content="width=device-width">
-     <title>Matt Heard</title>
-     <link rel="preconnect" href="https://fonts.googleapis.com">
-     <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
-     <link href="https://fonts.googleapis.com/css2?family=Share+Tech+Mono&family=Sono:wght@200..800&display=swap" rel="stylesheet">
-     <!-- Standard favicon -->
-     <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
-     <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
-     <link rel="icon" href="/favicon.ico" type="image/x-icon">
-     <!-- Apple Touch Icon (for iOS home screen) -->
-     <link rel="apple-touch-icon" href="/apple-touch-icon.png">
-     <!-- Android and other platforms -->
-     <link rel="icon" type="image/png" sizes="192x192" href="/android-chrome-192x192.png">
-     <link rel="icon" type="image/png" sizes="512x512" href="/android-chrome-512x512.png">
-     <!-- Web App Manifest (optional but recommended for PWA or better platform integration) -->
-     <link rel="manifest" href="/site.webmanifest">
-     <style>
-       ${styles}
-     </style>
-     
-     <!-- Define the component management system in the head -->
-     <script type="module">
-       // Define array of interactive components to initialize
-       window.interactiveComponents = [];
-       
-       /**
-        * Create a function that can add a component to the interactiveComponents list
-        * This is defined in the head so it's available as soon as possible
-        */
-       const createComponentAdder = () => {
-         /**
-          * Add a component to the interactive components list
-          * @param {string} id - The ID of the article element
-          * @param {string} modulePath - Path to the module containing the processing function
-          * @param {string} functionName - Name of the function to import from the module
-          * @returns {Object} The component configuration that was added
-          */
-         return function addComponent(id, modulePath, functionName) {
-           // Create the component configuration
-           const component = {
-             id,
-             modulePath,
-             functionName
-           };
-           
-           // Add to the global list
-           window.interactiveComponents.push(component);
-           
-           return component;
-         };
-       };
-       
-       // Create the component adder function and expose it globally
-       window.addComponent = createComponentAdder();
-     </script>
-   </head>`;
+   export const headElement = ``;
Ran all tests for this mutant.

[Survived] BlockStatement
src/generator/html.js:161:40
-   export function createHtmlTag(content) {
-     const langAttr = createAttrPair(ATTR_NAME.LANG, LANGUAGE.EN);
-     return createTag(HTML_TAG_NAME, langAttr, content);
-   }
+   export function createHtmlTag(content) {}
Tests ran:
    generateBlogOuter returns a string of HTML when given a blog object with an empty posts array


[Survived] StringLiteral
src/generator/html.js:4:24
-   export const DOCTYPE = '<!DOCTYPE html>';
+   export const DOCTYPE = "";
Ran all tests for this mutant.

[Survived] ObjectLiteral
src/generator/html.js:7:25
-   export const LANGUAGE = {
-     EN: 'en',
-   };
+   export const LANGUAGE = {};
Ran all tests for this mutant.

[Survived] StringLiteral
src/generator/html.js:8:7
-     EN: 'en',
+     EN: "",
Ran all tests for this mutant.

[Survived] StringLiteral
src/generator/html.js:12:30
-   export const HTML_TAG_NAME = 'html';
+   export const HTML_TAG_NAME = "";
Ran all tests for this mutant.

[Survived] StringLiteral
src/generator/html.js:16:9
-     LANG: 'lang',
+     LANG: "",
Ran all tests for this mutant.

[Survived] ObjectLiteral
src/generator/html.js:24:3
-     { from: /</g, to: '&lt;' },
+     {},
Ran all tests for this mutant.

[Survived] ObjectLiteral
src/generator/html.js:25:3
-     { from: />/g, to: '&gt;' },
+     {},
Ran all tests for this mutant.

[Survived] StringLiteral
src/generator/html.js:24:21
-     { from: /</g, to: '&lt;' },
+     { from: /</g, to: "" },
Ran all tests for this mutant.

[Survived] StringLiteral
src/generator/html.js:25:21
-     { from: />/g, to: '&gt;' },
+     { from: />/g, to: "" },
Ran all tests for this mutant.

[Survived] ObjectLiteral
src/generator/html.js:26:3
-     { from: /"/g, to: '&quot;' },
+     {},
Ran all tests for this mutant.

[Survived] StringLiteral
src/generator/html.js:26:21
-     { from: /"/g, to: '&quot;' },
+     { from: /"/g, to: "" },
Ran all tests for this mutant.

[Survived] ObjectLiteral
src/generator/html.js:27:3
-     { from: /'/g, to: '&#039;' },
+     {},
Ran all tests for this mutant.

[Survived] StringLiteral
src/generator/html.js:27:21
-     { from: /'/g, to: '&#039;' },
+     { from: /'/g, to: "" },
Ran all tests for this mutant.

[Survived] StringLiteral
src/generator/styles.js:1:23
-   export const styles = `
-     body {
-       background-color: #121212;
-       color: #CCCCCC;
-       font-family: "Sono", Consolas, monospace;
-       font-size: 16px;
-       line-height: 1.5;
-       margin: 0;
-       padding: 0;
-     }
-     #container {
-       max-width: 85rch;
-       padding: 1em 1rch;
-     }
-     .entry {
-       display: grid;
-       grid-template-columns: 5ch auto;
-       padding-bottom: 1em;
-       gap: 0em 1rch;
-     }
-     .key {
-       font-weight: bold;
-       color: #33CCFF;
-       text-align: right;
-       padding: 0em 0em;
-     }
-     .value {
-       text-align: left;
-       color: #CCCCCC;
-     }
-     .article-title {
-       color: #121212;
-       background-color: #00FFFF;
-     }
-     .media {
-       color: #00FF00;
-     }
-     .footer {
-       font-style: italic;
-     }
-     .full-width {
-       white-space: nowrap;
-       font-family: monospace;
-       display: block;
-       width: 100%;
-       overflow: hidden;
-       text-overflow: clip;
-       line-height: 1;
-       color: #00FFFF;
-     }
-     h1, h2, h3 {
-       color: #FFFFFF;
-       font-size: 16px;
-       margin: 0;
-       text-transform: uppercase;
-     }
-     img {
-       max-width: min(20em, 60vw);
-       height: auto;
-       display: block;
-       filter: sepia(0.8) hue-rotate(151deg) saturate(2);
-     }
-     p {
-       margin: 0;
-     }
-     ul, .related-links {
-       margin: 0;
-       padding-left: 0;
-       list-style-type: none;
-     }
-     
-     ul li::before, .related-links li::before {
-       content: "- ";
-       color: #33CCFF;
-     }
-     a {
-       color: #00FFFF;
-       text-decoration: none;
-     }
-     a:hover {
-       color: #33FFFF;
-       text-decoration: underline;
-     }
-     h1 > a, h2 > a, h3 > a {
-       color: #FFFFFF;
-     }
-     .warning {
-       color: #FFA500;
-     }
-     .error {
-       color: #FF0000;
-     }
-     .success {
-       color: #00FF00;
-     }
-     .metadata {
-       color: #33CCFF;
-     }
-     code {
-       background-color: #1A1A1A;
-       color: #00FFFF;
-     }
-     pre {
-       background: linear-gradient(0deg, #00ffff, #ff00ff);
-       -webkit-background-clip: text;
-       -webkit-text-fill-color: transparent;
-       overflow-x: auto;
-     }
-     #audio-controls {
-       background-color: #1A1A1A;
-       color: #00FFFF;
-       display: inline-block;
-     }
-     .audio-btn {
-       padding: 0em 1em;
-       border: none;
-       background: #00FF00;
-       color: #1A1A1A;
-       font-family: Consolas, monospace;
-       cursor: pointer;
-       height: 2em;
-       margin-right: 1em;
-     }
-     .audio-btn:hover {
-       text-decoration: underline;
-     }
-     blockquote {
-       font-style: italic;
-       padding: 1.5em 2ch;
-       margin: 0;
-       background-color: #1a1a1a;
-       position: relative; /* Add this to make absolute positioning of corners work */
-     }
-     .corner {
-       position: absolute;
-       display: block; /* Ensure the corners are displayed */
-       width: 2ch;
-       height: 1.5em;
-     }
-     .corner .h-line,
-     .corner .v-line {
-       position: absolute;
-       background: #CCCCCC;
-       display: block; /* Ensure the lines are displayed */
-     }
-     .h-line {
-       height: 2px;
-       width: 2ch;
-     }
-     .v-line {
-       width: 2px;
-       height: 1.5em;
-     }
-     .corner-tl {
-       top: 0;
-       left: 0;
-     }
-     .corner-tl .h-line {
-       top: 0;
-       left: 0;
-     }
-     .corner-tl .v-line {
-       top: 0;
-       left: 0;
-     }
-     .corner-tr {
-       top: 0;
-       right: 0;
-     }
-     .corner-tr .h-line {
-       top: 0;
-       right: 0;
-     }
-     .corner-tr .v-line {
-       top: 0;
-       right: 0;
-     }
-     .corner-bl {
-       bottom: 0;
-       left: 0;
-     }
-     .corner-bl .h-line {
-       bottom: 0;
-       left: 0;
-     }
-     .corner-bl .v-line {
-       bottom: 0;
-       left: 0;
-     }
-     .corner-br {
-       bottom: 0;
-       right: 0;
-     }
-     .corner-br .h-line {
-       bottom: 0;
-       right: 0;
-     }
-     .corner-br .v-line {
-       bottom: 0;
-       right: 0;
-     }
-   `;
+   export const styles = ``;
Ran all tests for this mutant.

[Survived] StringLiteral
src/generator/title.js:10:30
-   export const HEADER_BANNER = `<pre aria-label="Matt Heard" role="heading" aria-level="1">
-   ▗▖  ▗▖ ▗▄▖▗▄▄▄▖▗▄▄▄▖      
-   ▐▛▚▞▜▌▐▌ ▐▌ █    █        
-   ▐▌  ▐▌▐▛▀▜▌ █    █        
-   ▐▌  ▐▌▐▌ ▐▌ █    █        
-   ▗▖ ▗▖▗▄▄▄▖ ▗▄▖ ▗▄▄▖ ▗▄▄▄  
-   ▐▌ ▐▌▐▌   ▐▌ ▐▌▐▌ ▐▌▐▌  █ 
-   ▐▛▀▜▌▐▛▀▀▘▐▛▀▜▌▐▛▀▚▖▐▌  █ 
-   ▐▌ ▐▌▐▙▄▄▖▐▌ ▐▌▐▌ ▐▌▐▙▄▄▀
-   </pre>`;
+   export const HEADER_BANNER = ``;
Ran all tests for this mutant.

[Survived] BlockStatement
src/presenters/battleshipSolitaireClues.js:27:40
-     if (!obj || typeof obj !== 'object') {return 'Invalid JSON object';}
+     if (!obj || typeof obj !== 'object') {}
Tests ran:
    createBattleshipCluesBoardElement – error handling renders 10x10 empty board when JSON is not an object


[Survived] MethodExpression
src/presenters/battleshipSolitaireClues.js:32:10
-         || obj.colClues.some(n => typeof n !== 'number')) {
+         || obj.colClues.every(n => typeof n !== 'number')) {
Tests ran:
    createBattleshipCluesBoardElement – error handling renders 10x10 empty board when any array is empty
    createBattleshipCluesBoardElement – successful render renders padded multi‑digit row clues and stacked column clues


[Survived] ArrowFunction
src/presenters/battleshipSolitaireClues.js:32:28
-         || obj.colClues.some(n => typeof n !== 'number')) {
+         || obj.colClues.some(() => undefined)) {
Tests ran:
    createBattleshipCluesBoardElement – error handling renders 10x10 empty board when any array is empty
    createBattleshipCluesBoardElement – successful render renders padded multi‑digit row clues and stacked column clues


[Survived] ConditionalExpression
src/presenters/battleshipSolitaireClues.js:32:33
-         || obj.colClues.some(n => typeof n !== 'number')) {
+         || obj.colClues.some(n => false)) {
Tests ran:
    createBattleshipCluesBoardElement – error handling renders 10x10 empty board when any array is empty
    createBattleshipCluesBoardElement – successful render renders padded multi‑digit row clues and stacked column clues


[Survived] ConditionalExpression
src/presenters/battleshipSolitaireClues.js:35:36
-     if (obj.rowClues.length === 0 || obj.colClues.length === 0) {
+     if (obj.rowClues.length === 0 || false) {
Tests ran:
    createBattleshipCluesBoardElement – successful render renders padded multi‑digit row clues and stacked column clues


[Survived] ConditionalExpression
src/presenters/battleshipSolitaireClues.js:52:22
-         rows[idx].push(ch === ' ' ? ' ' : ch);
+         rows[idx].push(false ? ' ' : ch);
Tests ran:
    createBattleshipCluesBoardElement – error handling renders 10x10 empty board on parse failure
    createBattleshipCluesBoardElement – error handling renders 10x10 empty board when JSON is not an object
    createBattleshipCluesBoardElement – error handling renders 10x10 empty board when rowClues / colClues arrays are missing
  and 3 more tests!


[Survived] StringLiteral
src/presenters/battleshipSolitaireClues.js:52:29
-         rows[idx].push(ch === ' ' ? ' ' : ch);
+         rows[idx].push(ch === "" ? ' ' : ch);
Tests ran:
    createBattleshipCluesBoardElement – error handling renders 10x10 empty board on parse failure
    createBattleshipCluesBoardElement – error handling renders 10x10 empty board when JSON is not an object
    createBattleshipCluesBoardElement – error handling renders 10x10 empty board when rowClues / colClues arrays are missing
  and 3 more tests!


[Survived] ConditionalExpression
src/presenters/battleshipSolitaireClues.js:66:7
-     if (!invalid) {
+     if (true) {
Tests ran:
    createBattleshipCluesBoardElement – error handling renders 10x10 empty board on parse failure
    createBattleshipCluesBoardElement – error handling renders 10x10 empty board when JSON is not an object
    createBattleshipCluesBoardElement – error handling renders 10x10 empty board when rowClues / colClues arrays are missing
  and 3 more tests!


[Survived] StringLiteral
src/presenters/battleshipSolitaireClues.js:83:27
-       padLeft('', rowPad) + ' ' + lineArr.join(' ') + ' ' + padLeft('', rowPad)
+       padLeft('', rowPad) + "" + lineArr.join(' ') + ' ' + padLeft('', rowPad)
Tests ran:
    createBattleshipCluesBoardElement – error handling renders 10x10 empty board on parse failure
    createBattleshipCluesBoardElement – error handling renders 10x10 empty board when JSON is not an object
    createBattleshipCluesBoardElement – error handling renders 10x10 empty board when rowClues / colClues arrays are missing
  and 3 more tests!


[Survived] StringLiteral
src/presenters/battleshipSolitaireClues.js:83:53
-       padLeft('', rowPad) + ' ' + lineArr.join(' ') + ' ' + padLeft('', rowPad)
+       padLeft('', rowPad) + ' ' + lineArr.join(' ') + "" + padLeft('', rowPad)
Tests ran:
    createBattleshipCluesBoardElement – error handling renders 10x10 empty board on parse failure
    createBattleshipCluesBoardElement – error handling renders 10x10 empty board when JSON is not an object
    createBattleshipCluesBoardElement – error handling renders 10x10 empty board when rowClues / colClues arrays are missing
  and 3 more tests!


[Survived] ConditionalExpression
src/presenters/battleshipSolitaireFleet.js:60:7
-     if (ship.direction === 'V') {
+     if (false) {
Tests ran:
    createBattleshipFleetBoardElement renders a valid fleet as a <pre> element
    createBattleshipFleetBoardElement skips malformed ships and still renders valid ones


[Survived] StringLiteral
src/presenters/battleshipSolitaireFleet.js:60:26
-     if (ship.direction === 'V') {
+     if (ship.direction === "") {
Tests ran:
    createBattleshipFleetBoardElement renders a valid fleet as a <pre> element
    createBattleshipFleetBoardElement skips malformed ships and still renders valid ones


[Survived] BlockStatement
src/presenters/battleshipSolitaireFleet.js:60:31
-     if (ship.direction === 'V') {
-       return ship.start.y + i;
-     }
+     if (ship.direction === 'V') {}
Tests ran:
    createBattleshipFleetBoardElement renders a valid fleet as a <pre> element


[Survived] ArithmeticOperator
src/presenters/battleshipSolitaireFleet.js:61:12
-       return ship.start.y + i;
+       return ship.start.y - i;
Tests ran:
    createBattleshipFleetBoardElement renders a valid fleet as a <pre> element


[Survived] ConditionalExpression
src/presenters/battleshipSolitaireFleet.js:67:7
-     if (ship.direction === 'H') {
+     if (true) {
Tests ran:
    createBattleshipFleetBoardElement renders a valid fleet as a <pre> element
    createBattleshipFleetBoardElement skips malformed ships and still renders valid ones


[Survived] BlockStatement
src/presenters/battleshipSolitaireFleet.js:92:31
-   function isMissingStart(ship) {
-     return !ship.start;
-   }
+   function isMissingStart(ship) {}
Tests ran:
    createBattleshipFleetBoardElement renders a valid fleet as a <pre> element
    createBattleshipFleetBoardElement skips malformed ships and still renders valid ones


[Survived] ConditionalExpression
src/presenters/battleshipSolitaireFleet.js:97:10
-     return typeof ship.start.x !== 'number' || typeof ship.start.y !== 'number';
+     return false || typeof ship.start.y !== 'number';
Tests ran:
    createBattleshipFleetBoardElement renders a valid fleet as a <pre> element
    createBattleshipFleetBoardElement skips malformed ships and still renders valid ones


[Survived] BlockStatement
src/presenters/battleshipSolitaireFleet.js:100:32
-   function isInvalidLength(ship) {
-     return typeof ship.length !== 'number';
-   }
+   function isInvalidLength(ship) {}
Tests ran:
    createBattleshipFleetBoardElement renders a valid fleet as a <pre> element
    createBattleshipFleetBoardElement skips malformed ships and still renders valid ones


[Survived] ConditionalExpression
src/presenters/battleshipSolitaireFleet.js:101:10
-     return typeof ship.length !== 'number';
+     return false;
Tests ran:
    createBattleshipFleetBoardElement renders a valid fleet as a <pre> element
    createBattleshipFleetBoardElement skips malformed ships and still renders valid ones


[Survived] BlockStatement
src/presenters/battleshipSolitaireFleet.js:104:35
-   function isInvalidDirection(ship) {
-     return ship.direction !== 'H' && ship.direction !== 'V';
-   }
+   function isInvalidDirection(ship) {}
Tests ran:
    createBattleshipFleetBoardElement renders a valid fleet as a <pre> element
    createBattleshipFleetBoardElement skips malformed ships and still renders valid ones


[Survived] ConditionalExpression
src/presenters/battleshipSolitaireFleet.js:105:10
-     return ship.direction !== 'H' && ship.direction !== 'V';
+     return false;
Tests ran:
    createBattleshipFleetBoardElement renders a valid fleet as a <pre> element
    createBattleshipFleetBoardElement skips malformed ships and still renders valid ones


[Survived] LogicalOperator
src/presenters/battleshipSolitaireFleet.js:114:10
-     return x < 0 || y < 0;
+     return x < 0 && y < 0;
Tests ran:
    createBattleshipFleetBoardElement renders a valid fleet as a <pre> element
    createBattleshipFleetBoardElement skips malformed ships and still renders valid ones


[Survived] ConditionalExpression
src/presenters/battleshipSolitaireFleet.js:114:10
-     return x < 0 || y < 0;
+     return false || y < 0;
Tests ran:
    createBattleshipFleetBoardElement renders a valid fleet as a <pre> element
    createBattleshipFleetBoardElement skips malformed ships and still renders valid ones


[Survived] ConditionalExpression
src/presenters/battleshipSolitaireFleet.js:114:10
-     return x < 0 || y < 0;
+     return false;
Tests ran:
    createBattleshipFleetBoardElement renders a valid fleet as a <pre> element
    createBattleshipFleetBoardElement skips malformed ships and still renders valid ones


[Survived] ConditionalExpression
src/presenters/battleshipSolitaireFleet.js:114:19
-     return x < 0 || y < 0;
+     return x < 0 || false;
Tests ran:
    createBattleshipFleetBoardElement renders a valid fleet as a <pre> element
    createBattleshipFleetBoardElement skips malformed ships and still renders valid ones


[Survived] ConditionalExpression
src/presenters/battleshipSolitaireFleet.js:120:10
-     return x >= width || y >= height;
+     return false || y >= height;
Tests ran:
    createBattleshipFleetBoardElement renders a valid fleet as a <pre> element
    createBattleshipFleetBoardElement skips malformed ships and still renders valid ones


[Survived] EqualityOperator
src/presenters/battleshipSolitaireFleet.js:120:10
-     return x >= width || y >= height;
+     return x > width || y >= height;
Tests ran:
    createBattleshipFleetBoardElement renders a valid fleet as a <pre> element
    createBattleshipFleetBoardElement skips malformed ships and still renders valid ones


[Survived] ArrayDeclaration
src/presenters/battleshipSolitaireFleet.js:130:62
-       return handleParsedFleet({ width: 10, height: 10, ships: [] }, dom);
+       return handleParsedFleet({ width: 10, height: 10, ships: ["Stryker was here"] }, dom);
Tests ran:
    createBattleshipFleetBoardElement renders a 10x10 empty fleet for invalid JSON


[Survived] LogicalOperator
src/presenters/pre.js:11:10
-     return str.startsWith('[') && str.endsWith(']');
+     return str.startsWith('[') || str.endsWith(']');
Tests ran:
    createPreElement creates a <pre> element with the correct text content
    createPreElement renders comma-separated list inside brackets on separate lines
    createPreElement renders empty string for empty brackets
  and 3 more tests!


[Survived] StringLiteral
src/presenters/pre.js:11:25
-     return str.startsWith('[') && str.endsWith(']');
+     return str.startsWith("") && str.endsWith(']');
Tests ran:
    createPreElement creates a <pre> element with the correct text content
    createPreElement renders comma-separated list inside brackets on separate lines
    createPreElement renders empty string for empty brackets
  and 3 more tests!


[Survived] StringLiteral
src/presenters/pre.js:11:46
-     return str.startsWith('[') && str.endsWith(']');
+     return str.startsWith('[') && str.endsWith("");
Tests ran:
    createPreElement renders comma-separated list inside brackets on separate lines
    createPreElement renders empty string for empty brackets
    createPreElement trims whitespace for each element
  and 1 more test!


[Survived] ConditionalExpression
src/presenters/pre.js:15:10
-     return typeof str === 'string' && isSurroundedByBrackets(str);
+     return true && isSurroundedByBrackets(str);
Tests ran:
    createPreElement creates a <pre> element with the correct text content
    createPreElement renders comma-separated list inside brackets on separate lines
    createPreElement renders empty string for empty brackets
  and 3 more tests!


[Survived] MethodExpression
src/presenters/pre.js:19:17
-     const inner = inputString.slice(1, -1).trim();
+     const inner = inputString.slice(1, -1);
Tests ran:
    createPreElement renders comma-separated list inside brackets on separate lines
    createPreElement renders empty string for empty brackets
    createPreElement trims whitespace for each element
  and 1 more test!


[Survived] OptionalChaining
src/presenters/ticTacToeBoard.js:11:10
-     return move?.player;
+     return move.player;
Tests ran:
    createTicTacToeBoardElement ignores moves with invalid player
    createTicTacToeBoardElement ignores moves with missing position
    createTicTacToeBoardElement ignores moves with out-of-bounds position
  and 5 more tests!


[Survived] OptionalChaining
src/presenters/ticTacToeBoard.js:15:10
-     return move?.position;
+     return move.position;
Tests ran:
    createTicTacToeBoardElement ignores moves with invalid player
    createTicTacToeBoardElement ignores moves with missing position
    createTicTacToeBoardElement ignores moves with out-of-bounds position
  and 5 more tests!


[Survived] ConditionalExpression
src/presenters/ticTacToeBoard.js:26:12
-       return typeof position.row === 'number' && [0, 1, 2].includes(position.row);
+       return true && [0, 1, 2].includes(position.row);
Tests ran:
    createTicTacToeBoardElement ignores moves with invalid player
    createTicTacToeBoardElement ignores moves with missing position
    createTicTacToeBoardElement ignores moves with out-of-bounds position
  and 5 more tests!


[Survived] LogicalOperator
src/presenters/ticTacToeBoard.js:29:12
-       return typeof position.column === 'number' && [0, 1, 2].includes(position.column);
+       return typeof position.column === 'number' || [0, 1, 2].includes(position.column);
Tests ran:
    createTicTacToeBoardElement ignores moves with invalid player
    createTicTacToeBoardElement ignores moves with missing position
    createTicTacToeBoardElement ignores moves with out-of-bounds position
  and 5 more tests!


[Survived] ConditionalExpression
src/presenters/ticTacToeBoard.js:29:12
-       return typeof position.column === 'number' && [0, 1, 2].includes(position.column);
+       return true && [0, 1, 2].includes(position.column);
Tests ran:
    createTicTacToeBoardElement ignores moves with invalid player
    createTicTacToeBoardElement ignores moves with missing position
    createTicTacToeBoardElement ignores moves with out-of-bounds position
  and 5 more tests!


[Survived] ConditionalExpression
src/presenters/ticTacToeBoard.js:32:12
-       return board[position.row][position.column] === ' ';
+       return true;
Tests ran:
    createTicTacToeBoardElement ignores moves with invalid player
    createTicTacToeBoardElement ignores moves with missing position
    createTicTacToeBoardElement ignores moves with out-of-bounds position
  and 4 more tests!


[Survived] ConditionalExpression
src/presenters/ticTacToeBoard.js:52:7
-     if (isObject(position)) {
+     if (true) {
Tests ran:
    createTicTacToeBoardElement ignores moves with invalid player
    createTicTacToeBoardElement ignores moves with missing position
    createTicTacToeBoardElement ignores moves with out-of-bounds position
  and 5 more tests!


[Survived] ArrayDeclaration
src/presenters/ticTacToeBoard.js:65:50
-       return renderTicTacToeBoardFromData({ moves: [] }, dom);
+       return renderTicTacToeBoardFromData({ moves: ["Stryker was here"] }, dom);
Tests ran:
    createTicTacToeBoardElement renders an empty board for empty string input
    createTicTacToeBoardElement renders an empty board for invalid JSON


[Survived] ObjectLiteral
src/presenters/ticTacToeBoard.js:65:41
-       return renderTicTacToeBoardFromData({ moves: [] }, dom);
+       return renderTicTacToeBoardFromData({}, dom);
Tests ran:
    createTicTacToeBoardElement renders an empty board for empty string input
    createTicTacToeBoardElement renders an empty board for invalid JSON


[Survived] MethodExpression
src/presenters/ticTacToeBoard.js:78:13
-       moves = data.moves.filter(Boolean);
+       moves = data.moves;
Tests ran:
    createTicTacToeBoardElement ignores moves with invalid player
    createTicTacToeBoardElement ignores moves with missing position
    createTicTacToeBoardElement ignores moves with out-of-bounds position
  and 8 more tests!


[Survived] ArrayDeclaration
src/presenters/ticTacToeBoard.js:80:13
-       moves = [];
+       moves = ["Stryker was here"];
Tests ran:
    createTicTacToeBoardElement renders an empty board if moves property is missing
    createTicTacToeBoardElement renders an empty board if moves is not an array
    createTicTacToeBoardElement renders an empty board for valid JSON but not an object


[Survived] BlockStatement
src/toys/2025-03-21/italics.js:8:28
-   function isEmptyText(text) {
-     return !text?.trim();
-   }
+   function isEmptyText(text) {}
Tests ran:
    italics function leaves regular text unchanged
    italics function adds <em> tags around asterisk-style italics while preserving asterisks
    italics function adds <em> tags around underscore-style italics while preserving underscores
  and 5 more tests!


[Survived] MethodExpression
src/toys/2025-03-21/italics.js:9:11
-     return !text?.trim();
+     return !text;
Tests ran:
    italics function leaves regular text unchanged
    italics function adds <em> tags around asterisk-style italics while preserving asterisks
    italics function adds <em> tags around underscore-style italics while preserving underscores
  and 5 more tests!


[Survived] OptionalChaining
src/toys/2025-03-21/italics.js:9:11
-     return !text?.trim();
+     return !text.trim();
Tests ran:
    italics function leaves regular text unchanged
    italics function adds <em> tags around asterisk-style italics while preserving asterisks
    italics function adds <em> tags around underscore-style italics while preserving underscores
  and 5 more tests!


[Survived] ConditionalExpression
src/toys/2025-03-21/italics.js:45:7
-     if (REGEX_SPECIAL_CHARS.test(marker)) {
+     if (true) {
Tests ran:
    italics function leaves regular text unchanged
    italics function adds <em> tags around asterisk-style italics while preserving asterisks
    italics function adds <em> tags around underscore-style italics while preserving underscores
  and 5 more tests!


[Survived] StringLiteral
src/toys/2025-03-21/italics.js:76:30
-     return new RegExp(pattern, 's');
+     return new RegExp(pattern, "");
Tests ran:
    italics function leaves regular text unchanged
    italics function adds <em> tags around asterisk-style italics while preserving asterisks
    italics function adds <em> tags around underscore-style italics while preserving underscores
  and 5 more tests!


[Survived] ConditionalExpression
src/toys/2025-03-21/italics.js:88:7
-     if (REGEX_SPECIAL_CHARS.test(marker)) {
+     if (true) {
Tests ran:
    italics function leaves regular text unchanged
    italics function adds <em> tags around asterisk-style italics while preserving asterisks
    italics function adds <em> tags around underscore-style italics while preserving underscores
  and 5 more tests!


[Survived] MethodExpression
src/toys/2025-03-21/italics.js:115:10
-     return [
-       processItalicBefore(beforeText),
-       boldText,
-       processBoldAfter(afterText)
-     ].filter(Boolean).join('');
+     return [processItalicBefore(beforeText), boldText, processBoldAfter(afterText)].join('');
Tests ran:
    italics function does not add <em> tags around bold double-asterisk markdown
    italics function does not add <em> tags around bold double-underscore markdown
    italics function handles bold at end of string (afterText empty)
  and 1 more test!


[Survived] ConditionalExpression
src/toys/2025-03-21/italics.js:149:7
-     if (beforeText) {
+     if (true) {
Tests ran:
    italics function does not add <em> tags around bold double-asterisk markdown
    italics function does not add <em> tags around bold double-underscore markdown
    italics function handles bold at end of string (afterText empty)
  and 1 more test!


[Survived] BlockStatement
src/toys/2025-03-21/italics.js:151:10
-     } else {
-       return '';
-     }
+     } else {}
Tests ran:
    italics function does not add <em> tags around bold double-asterisk markdown
    italics function does not add <em> tags around bold double-underscore markdown
    italics function handles bold at end of string (afterText empty)
  and 1 more test!


[Survived] ConditionalExpression
src/toys/2025-03-21/italics.js:157:7
-     if (afterText) {
+     if (true) {
Tests ran:
    italics function does not add <em> tags around bold double-asterisk markdown
    italics function does not add <em> tags around bold double-underscore markdown
    italics function handles bold at end of string (afterText empty)
  and 1 more test!


[Survived] BlockStatement
src/toys/2025-03-21/italics.js:159:10
-     } else {
-       return '';
-     }
+     } else {}
Tests ran:
    italics function handles bold at end of string (afterText empty)


[Survived] ConditionalExpression
src/toys/2025-03-26/prettyFloat.js:16:7
-     if (result !== null) {
+     if (true) {
Tests ran:
    decomposeFloat handles zero
    decomposeFloat handles positive powers of two
    decomposeFloat handles small irrational approximations
  and 2 more tests!


[Survived] BlockStatement
src/toys/2025-03-26/prettyFloat.js:18:10
-     } else {
-       return null;
-     }
+     } else {}
Tests ran:
    decomposeFloat handles positive powers of two
    decomposeFloat handles small irrational approximations
    decomposeFloat handles negative values
  and 1 more test!


[Survived] ConditionalExpression
src/toys/2025-03-26/prettyFloat.js:38:7
-     if (zeroResult) {
+     if (true) {
Tests ran:
    decomposeFloat handles zero
    decomposeFloat handles positive powers of two
    decomposeFloat handles small irrational approximations
  and 2 more tests!


[Survived] BlockStatement
src/toys/2025-03-26/prettyFloat.js:40:10
-     } else {
-       return null;
-     }
+     } else {}
Tests ran:
    decomposeFloat handles positive powers of two
    decomposeFloat handles small irrational approximations
    decomposeFloat handles negative values
  and 1 more test!


[Survived] ConditionalExpression
src/toys/2025-03-26/prettyFloat.js:51:7
-     if (zeroVariant) {return zeroVariant;}
+     if (true) {return zeroVariant;}
Tests ran:
    decomposeFloat handles zero
    decomposeFloat handles positive powers of two
    decomposeFloat handles small irrational approximations
  and 2 more tests!


[Survived] BlockStatement
src/toys/2025-03-26/prettyFloat.js:71:10
-     } else {
-       return null;
-     }
+     } else {}
Tests ran:
    decomposeFloat handles zero
    decomposeFloat handles positive powers of two
    decomposeFloat handles small irrational approximations
  and 2 more tests!


[Survived] BlockStatement
src/toys/2025-03-26/prettyFloat.js:79:10
-     } else {
-       return null;
-     }
+     } else {}
Tests ran:
    decomposeFloat handles positive powers of two
    decomposeFloat handles small irrational approximations
    decomposeFloat handles negative values
  and 1 more test!


[Survived] ConditionalExpression
src/toys/2025-03-26/prettyFloat.js:94:7
-     if (A.includes('.')) {
+     if (true) {
Tests ran:
    formatDecimal toPrecision(17) can return a string without a decimal point for large integers
    decomposeFloat handles positive powers of two
    decomposeFloat handles small irrational approximations
  and 2 more tests!


[Survived] StringLiteral
src/toys/2025-03-26/prettyFloat.js:94:18
-     if (A.includes('.')) {
+     if (A.includes("")) {
Tests ran:
    formatDecimal toPrecision(17) can return a string without a decimal point for large integers
    decomposeFloat handles positive powers of two
    decomposeFloat handles small irrational approximations
  and 2 more tests!


[Survived] StringLiteral
src/toys/2025-03-29/fishingGame.js:46:32
-       { start: 0, end: 5, label: "night" },
+       { start: 0, end: 5, label: "" },
Tests ran:
    fishingGame handles empty input gracefully
    fishingGame recognizes a known bait and applies its modifier (e.g., worm, modifier 0.0)
    fishingGame applies negative modifier for poor bait (e.g., bread, modifier -0.05)
  and 4 more tests!


[Survived] ObjectLiteral
src/toys/2025-03-29/fishingGame.js:46:5
-       { start: 0, end: 5, label: "night" },
+       {},
Tests ran:
    fishingGame handles empty input gracefully
    fishingGame recognizes a known bait and applies its modifier (e.g., worm, modifier 0.0)
    fishingGame applies negative modifier for poor bait (e.g., bread, modifier -0.05)
  and 4 more tests!


[Survived] ConditionalExpression
src/toys/2025-03-29/fishingGame.js:48:49
-     const match = ranges.find(({ start, end }) => hour >= start && hour < end);
+     const match = ranges.find(({ start, end }) => true && hour < end);
Tests ran:
    fishingGame handles empty input gracefully
    fishingGame recognizes a known bait and applies its modifier (e.g., worm, modifier 0.0)
    fishingGame applies negative modifier for poor bait (e.g., bread, modifier -0.05)
  and 4 more tests!


[Survived] ObjectLiteral
src/toys/2025-03-29/fishingGame.js:121:15
-       "insect": { modifier: 0.05, description: "a lively insect" },
+       "insect": {},
Tests ran:
    fishingGame handles empty input gracefully
    fishingGame recognizes a known bait and applies its modifier (e.g., worm, modifier 0.0)
    fishingGame applies negative modifier for poor bait (e.g., bread, modifier -0.05)
  and 4 more tests!


[Survived] StringLiteral
src/toys/2025-03-29/fishingGame.js:121:46
-       "insect": { modifier: 0.05, description: "a lively insect" },
+       "insect": { modifier: 0.05, description: "" },
Tests ran:
    fishingGame handles empty input gracefully
    fishingGame recognizes a known bait and applies its modifier (e.g., worm, modifier 0.0)
    fishingGame applies negative modifier for poor bait (e.g., bread, modifier -0.05)
  and 4 more tests!


[Survived] UnaryOperator
src/toys/2025-03-29/fishingGame.js:122:26
-       "bread": { modifier: -0.05, description: "a slice of bread" },
+       "bread": { modifier: +0.05, description: "a slice of bread" },
Tests ran:
    fishingGame handles empty input gracefully
    fishingGame recognizes a known bait and applies its modifier (e.g., worm, modifier 0.0)
    fishingGame applies negative modifier for poor bait (e.g., bread, modifier -0.05)
  and 4 more tests!


[Survived] ObjectLiteral
src/toys/2025-03-29/fishingGame.js:124:19
-       "shiny bait": { modifier: 0.15, description: "a glittering lure" },
+       "shiny bait": {},
Tests ran:
    fishingGame handles empty input gracefully
    fishingGame recognizes a known bait and applies its modifier (e.g., worm, modifier 0.0)
    fishingGame applies negative modifier for poor bait (e.g., bread, modifier -0.05)
  and 4 more tests!


[Survived] StringLiteral
src/toys/2025-03-29/fishingGame.js:124:50
-       "shiny bait": { modifier: 0.15, description: "a glittering lure" },
+       "shiny bait": { modifier: 0.15, description: "" },
Tests ran:
    fishingGame handles empty input gracefully
    fishingGame recognizes a known bait and applies its modifier (e.g., worm, modifier 0.0)
    fishingGame applies negative modifier for poor bait (e.g., bread, modifier -0.05)
  and 4 more tests!


[Survived] StringLiteral
src/toys/2025-03-29/fishingGame.js:126:44
-       "grub": { modifier: 0.05, description: "a succulent grub" },
+       "grub": { modifier: 0.05, description: "" },
Tests ran:
    fishingGame handles empty input gracefully
    fishingGame recognizes a known bait and applies its modifier (e.g., worm, modifier 0.0)
    fishingGame applies negative modifier for poor bait (e.g., bread, modifier -0.05)
  and 4 more tests!


[Survived] ObjectLiteral
src/toys/2025-03-29/fishingGame.js:126:13
-       "grub": { modifier: 0.05, description: "a succulent grub" },
+       "grub": {},
Tests ran:
    fishingGame handles empty input gracefully
    fishingGame recognizes a known bait and applies its modifier (e.g., worm, modifier 0.0)
    fishingGame applies negative modifier for poor bait (e.g., bread, modifier -0.05)
  and 4 more tests!


[Survived] UnaryOperator
src/toys/2025-03-29/fishingGame.js:129:27
-       "maggot": { modifier: -0.1, description: "a squirming maggot" },
+       "maggot": { modifier: +0.1, description: "a squirming maggot" },
Tests ran:
    fishingGame handles empty input gracefully
    fishingGame recognizes a known bait and applies its modifier (e.g., worm, modifier 0.0)
    fishingGame applies negative modifier for poor bait (e.g., bread, modifier -0.05)
  and 4 more tests!


[Survived] StringLiteral
src/toys/2025-03-29/fishingGame.js:128:46
-       "sausage": { modifier: 0.2, description: "a savory sausage" },
+       "sausage": { modifier: 0.2, description: "" },
Tests ran:
    fishingGame handles empty input gracefully
    fishingGame recognizes a known bait and applies its modifier (e.g., worm, modifier 0.0)
    fishingGame applies negative modifier for poor bait (e.g., bread, modifier -0.05)
  and 4 more tests!


[Survived] ObjectLiteral
src/toys/2025-03-29/fishingGame.js:129:15
-       "maggot": { modifier: -0.1, description: "a squirming maggot" },
+       "maggot": {},
Tests ran:
    fishingGame handles empty input gracefully
    fishingGame recognizes a known bait and applies its modifier (e.g., worm, modifier 0.0)
    fishingGame applies negative modifier for poor bait (e.g., bread, modifier -0.05)
  and 4 more tests!


[Survived] StringLiteral
src/toys/2025-03-29/fishingGame.js:129:46
-       "maggot": { modifier: -0.1, description: "a squirming maggot" },
+       "maggot": { modifier: -0.1, description: "" },
Tests ran:
    fishingGame handles empty input gracefully
    fishingGame recognizes a known bait and applies its modifier (e.g., worm, modifier 0.0)
    fishingGame applies negative modifier for poor bait (e.g., bread, modifier -0.05)
  and 4 more tests!


[Survived] ObjectLiteral
src/toys/2025-03-29/fishingGame.js:128:16
-       "sausage": { modifier: 0.2, description: "a savory sausage" },
+       "sausage": {},
Tests ran:
    fishingGame handles empty input gracefully
    fishingGame recognizes a known bait and applies its modifier (e.g., worm, modifier 0.0)
    fishingGame applies negative modifier for poor bait (e.g., bread, modifier -0.05)
  and 4 more tests!


[Survived] MethodExpression
src/toys/2025-03-29/get.js:94:7
-     if (input.trim() === '') {
+     if (input === '') {
Tests ran:
    get function with path traversal should return the value for a top-level key
    get function with path traversal should return the value for a nested key
    get function with path traversal should return the value for an array index
  and 12 more tests!


[Survived] StringLiteral
src/toys/2025-03-30/cyberpunkAdventure.js:8:83
-       return { output: `> Hint: the password is a number and a name...`, nextState: "hacker:door", nextInventory: context.nextInventory, nextVisited: context.nextVisited };
+       return { output: `> Hint: the password is a number and a name...`, nextState: "", nextInventory: context.nextInventory, nextVisited: context.nextVisited };
Tests ran:
    Cyberpunk Text Game shows hint if incorrect hacker password is given


[Survived] StringLiteral
src/toys/2025-03-30/cyberpunkAdventure.js:6:33
-       return { output, nextState: "hub", nextInventory: context.nextInventory, nextVisited: context.nextVisited };
+       return { output, nextState: "", nextInventory: context.nextInventory, nextVisited: context.nextVisited };
Tests ran:
    Cyberpunk Text Game goes to Hacker Den and requires password


[Survived] StringLiteral
src/toys/2025-03-30/cyberpunkAdventure.js:44:16
-       nextState: "hub"
+       nextState: ""
Tests ran:
    Cyberpunk Text Game unknown input in hub


[Survived] StringLiteral
src/toys/2025-03-30/cyberpunkAdventure.js:56:67
-     return nextInventory.includes("datapad") && lowerInput.includes("trade");
+     return nextInventory.includes("datapad") && lowerInput.includes("");
Tests ran:
    Cyberpunk Text Game goes to Transport Hub and trades datapad


[Survived] ArrowFunction
src/toys/2025-03-30/cyberpunkAdventure.js:61:47
-       const newInventory = nextInventory.filter(item => item !== "datapad");
+       const newInventory = nextInventory.filter(() => undefined);
Tests ran:
    Cyberpunk Text Game goes to Transport Hub and trades datapad


[Survived] ConditionalExpression
src/toys/2025-03-30/cyberpunkAdventure.js:61:55
-       const newInventory = nextInventory.filter(item => item !== "datapad");
+       const newInventory = nextInventory.filter(item => false);
Tests ran:
    Cyberpunk Text Game goes to Transport Hub and trades datapad


[Survived] StringLiteral
src/toys/2025-03-30/cyberpunkAdventure.js:66:18
-         nextState: "hub",
+         nextState: "",
Tests ran:
    Cyberpunk Text Game goes to Transport Hub and trades datapad


[Survived] EqualityOperator
src/toys/2025-03-30/cyberpunkAdventure.js:82:19
-     const success = stealthCheck > 0.3;
+     const success = stealthCheck >= 0.3;
Tests ran:
    Cyberpunk Text Game goes to Back Alley and finds stimpack (success)
    Cyberpunk Text Game trips wire in alley if stealth check fails


[Survived] StringLiteral
src/toys/2025-03-30/cyberpunkAdventure.js:73:18
-         nextState: "transport:trade",
+         nextState: "",
Tests ran:
    Cyberpunk Text Game shows trade prompt if no datapad in inventory at transport:trade


[Survived] StringLiteral
src/toys/2025-03-30/cyberpunkAdventure.js:88:18
-         nextState: "hub",
+         nextState: "",
Tests ran:
    Cyberpunk Text Game goes to Back Alley and finds stimpack (success)


[Survived] StringLiteral
src/toys/2025-03-30/cyberpunkAdventure.js:95:18
-         nextState: "hub",
+         nextState: "",
Tests ran:
    Cyberpunk Text Game trips wire in alley if stealth check fails


[Survived] StringLiteral
src/toys/2025-03-30/cyberpunkAdventure.js:103:69
-     return { output: `> Glitch in the grid. Resetting...`, nextState: "intro" };
+     return { output: `> Glitch in the grid. Resetting...`, nextState: "" };
Tests ran:
    Cyberpunk Text Game resets on unknown state (default switch case)


[Survived] ArrayDeclaration
src/toys/2025-03-30/cyberpunkAdventure.js:140:30
-     return scoped.inventory || [];
+     return scoped.inventory || ["Stryker was here"];
Tests ran:
    Cyberpunk Text Game initial naming and intro
    Cyberpunk Text Game goes to Hacker Den and requires password
    Cyberpunk Text Game unknown input in hub
  and 2 more tests!


[Survived] BlockStatement
src/toys/2025-03-30/cyberpunkAdventure.js:143:35
-   function getPlayerVisited(scoped) {
-     return new Set(scoped.visited || []);
-   }
+   function getPlayerVisited(scoped) {}
Tests ran:
    Cyberpunk Text Game initial naming and intro
    Cyberpunk Text Game goes to Hacker Den and requires password
    Cyberpunk Text Game shows hint if incorrect hacker password is given
  and 8 more tests!


[Survived] LogicalOperator
src/toys/2025-03-30/cyberpunkAdventure.js:144:18
-     return new Set(scoped.visited || []);
+     return new Set(scoped.visited && []);
Tests ran:
    Cyberpunk Text Game initial naming and intro
    Cyberpunk Text Game goes to Hacker Den and requires password
    Cyberpunk Text Game shows hint if incorrect hacker password is given
  and 8 more tests!


[Survived] ArrayDeclaration
src/toys/2025-03-30/cyberpunkAdventure.js:144:36
-     return new Set(scoped.visited || []);
+     return new Set(scoped.visited || ["Stryker was here"]);
Tests ran:
    Cyberpunk Text Game initial naming and intro
    Cyberpunk Text Game goes to Hacker Den and requires password
    Cyberpunk Text Game unknown input in hub
  and 2 more tests!


[Survived] MethodExpression
src/toys/2025-03-30/cyberpunkAdventure.js:199:22
-     const lowerInput = input.trim().toLowerCase();
+     const lowerInput = input.toLowerCase();
Tests ran:
    Cyberpunk Text Game initial naming and intro
    Cyberpunk Text Game goes to Hacker Den and requires password
    Cyberpunk Text Game shows hint if incorrect hacker password is given
  and 8 more tests!


[Survived] BlockStatement
src/toys/2025-04-06/ticTacToe.js:12:11
-     } catch {
-       return null;
-     }
+     } catch {}
Tests ran:
    returns optimal move for invalid input


[Survived] ConditionalExpression
src/toys/2025-04-06/ticTacToe.js:22:10
-     return typeof val === "object" && val !== null;
+     return true && val !== null;
Tests ran:
    returns optimal move for invalid input
    minimax early tie return is triggered
    detects win for X and returns no additional move
  and 22 more tests!


[Survived] BlockStatement
src/toys/2025-04-06/ticTacToe.js:29:10
-     } else {
-       return null;
-     }
+     } else {}
Tests ran:
    returns optimal move for invalid input
    returns optimal move for malformed schema


[Survived] BlockStatement
src/toys/2025-04-06/ticTacToe.js:36:15
-       if (!acc) {
-         return false;
-       }
+       if (!acc) {}
Tests ran:
    returns optimal move for invalid input


[Survived] BooleanLiteral
src/toys/2025-04-06/ticTacToe.js:36:9
-       if (!acc) {
+       if (acc) {
Tests ran:
    returns optimal move for invalid input
    minimax early tie return is triggered
    detects win for X and returns no additional move
  and 22 more tests!


[Survived] ConditionalExpression
src/toys/2025-04-06/ticTacToe.js:36:9
-       if (!acc) {
+       if (false) {
Tests ran:
    returns optimal move for invalid input
    minimax early tie return is triggered
    detects win for X and returns no additional move
  and 22 more tests!


[Survived] ConditionalExpression
src/toys/2025-04-06/ticTacToe.js:49:10
-     return isObject(val) && Array.isArray(val.moves);
+     return true;
Tests ran:
    minimax early tie return is triggered
    detects win for X and returns no additional move
    returns optimal move for malformed schema
  and 21 more tests!


[Survived] LogicalOperator
src/toys/2025-04-06/ticTacToe.js:49:10
-     return isObject(val) && Array.isArray(val.moves);
+     return isObject(val) || Array.isArray(val.moves);
Tests ran:
    minimax early tie return is triggered
    detects win for X and returns no additional move
    returns optimal move for malformed schema
  and 21 more tests!


[Survived] BlockStatement
src/toys/2025-04-06/ticTacToe.js:128:38
-   function shouldStop(valid, earlyWin) {
-     return !valid || earlyWin;
-   }
+   function shouldStop(valid, earlyWin) {}
Tests ran:
    minimax early tie return is triggered
    detects win for X and returns no additional move
    detects invalid player alternation
  and 17 more tests!


[Survived] ConditionalExpression
src/toys/2025-04-06/ticTacToe.js:129:10
-     return !valid || earlyWin;
+     return false;
Tests ran:
    minimax early tie return is triggered
    detects win for X and returns no additional move
    detects invalid player alternation
  and 17 more tests!


[Survived] LogicalOperator
src/toys/2025-04-06/ticTacToe.js:129:10
-     return !valid || earlyWin;
+     return !valid && earlyWin;
Tests ran:
    minimax early tie return is triggered
    detects win for X and returns no additional move
    detects invalid player alternation
  and 17 more tests!


[Survived] BlockStatement
src/toys/2025-04-06/ticTacToe.js:134:19
-       if (acc.stop) {
-         return acc;
-       }
+       if (acc.stop) {}
Tests ran:
    detects full board with no remaining moves
    returns fallback when minimax fails to assign bestMove


[Survived] ConditionalExpression
src/toys/2025-04-06/ticTacToe.js:134:9
-       if (acc.stop) {
+       if (false) {
Tests ran:
    minimax early tie return is triggered
    detects win for X and returns no additional move
    detects invalid player alternation
  and 17 more tests!


[Survived] BooleanLiteral
src/toys/2025-04-06/ticTacToe.js:148:28
-     const initial = { valid: true, earlyWin: false, stop: false };
+     const initial = { valid: false, earlyWin: false, stop: false };
Tests ran:
    minimax early tie return is triggered
    detects win for X and returns no additional move
    detects invalid player alternation
  and 19 more tests!


[Survived] ObjectLiteral
src/toys/2025-04-06/ticTacToe.js:148:19
-     const initial = { valid: true, earlyWin: false, stop: false };
+     const initial = {};
Tests ran:
    minimax early tie return is triggered
    detects win for X and returns no additional move
    detects invalid player alternation
  and 19 more tests!


[Survived] MethodExpression
src/toys/2025-04-06/ticTacToe.js:156:27
-     return board.map(row => row.slice());
+     return board.map(row => row);
Tests ran:
    minimax early tie return is triggered
    adds ninth move to result in a tie
    selects optimal move in mid-game scenario
  and 6 more tests!


[Survived] ArrayDeclaration
src/toys/2025-04-06/ticTacToe.js:186:52
-     return getEmptyCells(board).reduce(scoreReducer, []);
+     return getEmptyCells(board).reduce(scoreReducer, ["Stryker was here"]);
Tests ran:
    minimax early tie return is triggered
    adds ninth move to result in a tie
    selects optimal move in mid-game scenario
  and 6 more tests!


[Survived] EqualityOperator
src/toys/2025-04-06/ticTacToe.js:192:11
-         if (current.moveScore > best.moveScore) {
+         if (current.moveScore >= best.moveScore) {
Tests ran:
    minimax early tie return is triggered
    adds ninth move to result in a tie
    selects optimal move in mid-game scenario
  and 6 more tests!


[Survived] BlockStatement
src/toys/2025-04-06/ticTacToe.js:240:42
-   function isColumnWin(board, col, player) {
-     return board.every(row => row[col] === player);
-   }
+   function isColumnWin(board, col, player) {}
Tests ran:
    minimax early tie return is triggered
    detects win for X and returns no additional move
    detects invalid player alternation
  and 19 more tests!


[Survived] ArrowFunction
src/toys/2025-04-06/ticTacToe.js:241:22
-     return board.every(row => row[col] === player);
+     return board.every(() => undefined);
Tests ran:
    minimax early tie return is triggered
    detects win for X and returns no additional move
    detects invalid player alternation
  and 19 more tests!


[Survived] MethodExpression
src/toys/2025-04-06/ticTacToe.js:245:10
-     return [0, 1, 2].some(col => isColumnWin(board, col, player));
+     return [0, 1, 2].every(col => isColumnWin(board, col, player));
Tests ran:
    minimax early tie return is triggered
    detects win for X and returns no additional move
    detects invalid player alternation
  and 19 more tests!


[Survived] BlockStatement
src/toys/2025-04-06/ticTacToe.js:244:38
-   function checkColumns(board, player) {
-     return [0, 1, 2].some(col => isColumnWin(board, col, player));
-   }
+   function checkColumns(board, player) {}
Tests ran:
    minimax early tie return is triggered
    detects win for X and returns no additional move
    detects invalid player alternation
  and 19 more tests!


[Survived] ConditionalExpression
src/toys/2025-04-06/ticTacToe.js:241:29
-     return board.every(row => row[col] === player);
+     return board.every(row => false);
Tests ran:
    minimax early tie return is triggered
    detects win for X and returns no additional move
    detects invalid player alternation
  and 19 more tests!


[Survived] ArrowFunction
src/toys/2025-04-06/ticTacToe.js:245:25
-     return [0, 1, 2].some(col => isColumnWin(board, col, player));
+     return [0, 1, 2].some(() => undefined);
Tests ran:
    minimax early tie return is triggered
    detects win for X and returns no additional move
    detects invalid player alternation
  and 19 more tests!


[Survived] BlockStatement
src/toys/2025-04-06/ticTacToe.js:248:40
-   function checkDiagonals(board, player) {
-     const leftToRight = [0, 1, 2].every(i => board[i][i] === player);
-     const rightToLeft = [0, 1, 2].every(i => board[i][2 - i] === player);
-     return leftToRight || rightToLeft;
-   }
+   function checkDiagonals(board, player) {}
Tests ran:
    minimax early tie return is triggered
    detects win for X and returns no additional move
    detects invalid player alternation
  and 19 more tests!


[Survived] ArrayDeclaration
src/toys/2025-04-06/ticTacToe.js:245:10
-     return [0, 1, 2].some(col => isColumnWin(board, col, player));
+     return [].some(col => isColumnWin(board, col, player));
Tests ran:
    minimax early tie return is triggered
    detects win for X and returns no additional move
    detects invalid player alternation
  and 19 more tests!


[Survived] ArrowFunction
src/toys/2025-04-06/ticTacToe.js:249:39
-     const leftToRight = [0, 1, 2].every(i => board[i][i] === player);
+     const leftToRight = [0, 1, 2].every(() => undefined);
Tests ran:
    minimax early tie return is triggered
    detects win for X and returns no additional move
    detects invalid player alternation
  and 19 more tests!


[Survived] ArrowFunction
src/toys/2025-04-06/ticTacToe.js:250:39
-     const rightToLeft = [0, 1, 2].every(i => board[i][2 - i] === player);
+     const rightToLeft = [0, 1, 2].every(() => undefined);
Tests ran:
    minimax early tie return is triggered
    detects win for X and returns no additional move
    detects invalid player alternation
  and 19 more tests!


[Survived] ConditionalExpression
src/toys/2025-04-06/ticTacToe.js:249:44
-     const leftToRight = [0, 1, 2].every(i => board[i][i] === player);
+     const leftToRight = [0, 1, 2].every(i => false);
Tests ran:
    minimax early tie return is triggered
    detects win for X and returns no additional move
    detects invalid player alternation
  and 19 more tests!


[Survived] ConditionalExpression
src/toys/2025-04-06/ticTacToe.js:250:44
-     const rightToLeft = [0, 1, 2].every(i => board[i][2 - i] === player);
+     const rightToLeft = [0, 1, 2].every(i => false);
Tests ran:
    minimax early tie return is triggered
    detects win for X and returns no additional move
    detects invalid player alternation
  and 19 more tests!


[Survived] ArithmeticOperator
src/toys/2025-04-06/ticTacToe.js:250:53
-     const rightToLeft = [0, 1, 2].every(i => board[i][2 - i] === player);
+     const rightToLeft = [0, 1, 2].every(i => board[i][2 + i] === player);
Tests ran:
    minimax early tie return is triggered
    detects win for X and returns no additional move
    detects invalid player alternation
  and 19 more tests!


[Survived] LogicalOperator
src/toys/2025-04-06/ticTacToe.js:251:10
-     return leftToRight || rightToLeft;
+     return leftToRight && rightToLeft;
Tests ran:
    minimax early tie return is triggered
    detects win for X and returns no additional move
    detects invalid player alternation
  and 19 more tests!


[Survived] ConditionalExpression
src/toys/2025-04-06/ticTacToe.js:251:10
-     return leftToRight || rightToLeft;
+     return false;
Tests ran:
    minimax early tie return is triggered
    detects win for X and returns no additional move
    detects invalid player alternation
  and 19 more tests!


[Survived] ConditionalExpression
src/toys/2025-04-06/ticTacToe.js:271:7
-     if (isWinPlayer()) {
+     if (true) {
Tests ran:
    minimax early tie return is triggered
    selects optimal move in mid-game scenario
    covers non-terminal state in minimax search
  and 3 more tests!


[Survived] ConditionalExpression
src/toys/2025-04-06/ticTacToe.js:278:10
-     return isWinPlayer() || isWinOpponent();
+     return true;
Tests ran:
    minimax early tie return is triggered
    adds ninth move to result in a tie
    selects optimal move in mid-game scenario
  and 6 more tests!


[Survived] ConditionalExpression
src/toys/2025-04-06/ticTacToe.js:282:7
-     if (shouldEvaluateTerminal(isWinPlayer, isWinOpponent)) {
+     if (true) {
Tests ran:
    minimax early tie return is triggered
    adds ninth move to result in a tie
    selects optimal move in mid-game scenario
  and 6 more tests!


[Survived] ArithmeticOperator
src/toys/2025-04-06/ticTacToe.js:274:10
-     return depth - 10;
+     return depth + 10;
Tests ran:
    selects optimal move in mid-game scenario
    covers non-terminal state in minimax search
    assigns X to first move when moves list is empty
  and 2 more tests!


[Survived] BlockStatement
src/toys/2025-04-06/ticTacToe.js:277:61
-   function shouldEvaluateTerminal(isWinPlayer, isWinOpponent) {
-     return isWinPlayer() || isWinOpponent();
-   }
+   function shouldEvaluateTerminal(isWinPlayer, isWinOpponent) {}
Tests ran:
    minimax early tie return is triggered
    adds ninth move to result in a tie
    selects optimal move in mid-game scenario
  and 6 more tests!


[Survived] ConditionalExpression
src/toys/2025-04-06/ticTacToe.js:278:10
-     return isWinPlayer() || isWinOpponent();
+     return false;
Tests ran:
    minimax early tie return is triggered
    adds ninth move to result in a tie
    selects optimal move in mid-game scenario
  and 6 more tests!


[Survived] ConditionalExpression
src/toys/2025-04-06/ticTacToe.js:311:7
-     if (terminalScore !== null) {
+     if (true) {
Tests ran:
    minimax early tie return is triggered
    adds ninth move to result in a tie
    selects optimal move in mid-game scenario
  and 6 more tests!


[Survived] ConditionalExpression
src/toys/2025-04-06/ticTacToe.js:282:7
-     if (shouldEvaluateTerminal(isWinPlayer, isWinOpponent)) {
+     if (false) {
Tests ran:
    minimax early tie return is triggered
    adds ninth move to result in a tie
    selects optimal move in mid-game scenario
  and 6 more tests!


[Survived] EqualityOperator
src/toys/2025-04-06/ticTacToe.js:311:7
-     if (terminalScore !== null) {
+     if (terminalScore === null) {
Tests ran:
    minimax early tie return is triggered
    adds ninth move to result in a tie
    selects optimal move in mid-game scenario
  and 6 more tests!


[Survived] LogicalOperator
src/toys/2025-04-06/ticTacToe.js:278:10
-     return isWinPlayer() || isWinOpponent();
+     return isWinPlayer() && isWinOpponent();
Tests ran:
    minimax early tie return is triggered
    adds ninth move to result in a tie
    selects optimal move in mid-game scenario
  and 6 more tests!


[Survived] ArrowFunction
src/toys/2025-04-06/ticTacToe.js:309:25
-     const isWinOpponent = () => isWin(params.board, opponent);
+     const isWinOpponent = () => undefined;
Tests ran:
    minimax early tie return is triggered
    adds ninth move to result in a tie
    selects optimal move in mid-game scenario
  and 6 more tests!


[Survived] ArrowFunction
src/toys/2025-04-06/ticTacToe.js:308:23
-     const isWinPlayer = () => isWin(params.board, params.player);
+     const isWinPlayer = () => undefined;
Tests ran:
    minimax early tie return is triggered
    adds ninth move to result in a tie
    selects optimal move in mid-game scenario
  and 6 more tests!


[Survived] BlockStatement
src/toys/2025-04-06/ticTacToe.js:282:59
-     if (shouldEvaluateTerminal(isWinPlayer, isWinOpponent)) {
-       return getTerminalScore(isWinPlayer, depth);
-     }
+     if (shouldEvaluateTerminal(isWinPlayer, isWinOpponent)) {}
Tests ran:
    minimax early tie return is triggered
    selects optimal move in mid-game scenario
    covers non-terminal state in minimax search
  and 3 more tests!


[Survived] ConditionalExpression
src/toys/2025-04-06/ticTacToe.js:311:7
-     if (terminalScore !== null) {
+     if (false) {
Tests ran:
    minimax early tie return is triggered
    adds ninth move to result in a tie
    selects optimal move in mid-game scenario
  and 6 more tests!


[Survived] ConditionalExpression
src/toys/2025-04-06/ticTacToe.js:320:7
-     if (isMax) {
+     if (false) {
Tests ran:
    adds ninth move to result in a tie
    selects optimal move in mid-game scenario
    covers non-terminal state in minimax search
  and 5 more tests!


[Survived] ConditionalExpression
src/toys/2025-04-06/ticTacToe.js:329:7
-     if (isMax) {
+     if (true) {
Tests ran:
    adds ninth move to result in a tie
    selects optimal move in mid-game scenario
    covers non-terminal state in minimax search
  and 5 more tests!


[Survived] BlockStatement
src/toys/2025-04-06/ticTacToe.js:320:14
-     if (isMax) {
-       return Math.max(...scores);
-     } else {
+     if (isMax) {} else {
Tests ran:
    selects optimal move in mid-game scenario
    covers non-terminal state in minimax search
    assigns X to first move when moves list is empty
  and 2 more tests!


[Survived] BlockStatement
src/toys/2025-04-06/ticTacToe.js:311:31
-     if (terminalScore !== null) {
-       return terminalScore;
-     }
+     if (terminalScore !== null) {}
Tests ran:
    minimax early tie return is triggered
    selects optimal move in mid-game scenario
    covers non-terminal state in minimax search
  and 3 more tests!


[Survived] ConditionalExpression
src/toys/2025-04-06/ticTacToe.js:329:7
-     if (isMax) {
+     if (false) {
Tests ran:
    adds ninth move to result in a tie
    selects optimal move in mid-game scenario
    covers non-terminal state in minimax search
  and 5 more tests!


[Survived] MethodExpression
src/toys/2025-04-06/ticTacToe.js:336:46
-       const newBoard = params.board.map(row => row.slice());
+       const newBoard = params.board.map(row => row);
Tests ran:
    selects optimal move in mid-game scenario
    covers non-terminal state in minimax search
    assigns X to first move when moves list is empty
  and 2 more tests!


[Survived] MethodExpression
src/toys/2025-04-06/ticTacToe.js:321:12
-       return Math.max(...scores);
+       return Math.min(...scores);
Tests ran:
    selects optimal move in mid-game scenario
    covers non-terminal state in minimax search
    assigns X to first move when moves list is empty
  and 2 more tests!


[Survived] BooleanLiteral
src/toys/2025-04-06/ticTacToe.js:339:38
-       const score = minimax(depth + 1, !isMax, newParams);
+       const score = minimax(depth + 1, isMax, newParams);
Tests ran:
    selects optimal move in mid-game scenario
    covers non-terminal state in minimax search
    assigns X to first move when moves list is empty
  and 2 more tests!


[Survived] ConditionalExpression
src/toys/2025-04-06/ticTacToe.js:351:7
-     if (!isObject(position)) { return false; }
+     if (false) { return false; }
Tests ran:
    minimax early tie return is triggered
    detects win for X and returns no additional move
    detects invalid player alternation
  and 15 more tests!


[Survived] BlockStatement
src/toys/2025-04-06/ticTacToe.js:351:28
-     if (!isObject(position)) { return false; }
+     if (!isObject(position)) {}
Tests ran:
    handles position as non-object


[Survived] LogicalOperator
src/toys/2025-04-06/ticTacToe.js:357:10
-     return [0, 1, 2].includes(row) && [0, 1, 2].includes(column);
+     return [0, 1, 2].includes(row) || [0, 1, 2].includes(column);
Tests ran:
    minimax early tie return is triggered
    detects win for X and returns no additional move
    detects invalid player alternation
  and 14 more tests!


[Survived] BlockStatement
src/toys/2025-05-08/battleshipSolitaireFleet.js:17:28
-   function shuffle(arr, env) {
-     const getRandomNumber = env.get('getRandomNumber');
-     for (let i = arr.length - 1; i > 0; i--) {
-       const j = Math.floor(getRandomNumber() * (i + 1));
-       [arr[i], arr[j]] = [arr[j], arr[i]];
-     }
-   }
+   function shuffle(arr, env) {}
Tests ran:
    generateFleet returns empty fleet for invalid JSON
    generateFleet returns empty fleet for missing ships
    generateFleet places a vertical ship of length 3 somewhere
  and 6 more tests!


[Survived] ConditionalExpression
src/toys/2025-05-08/battleshipSolitaireFleet.js:19:32
-     for (let i = arr.length - 1; i > 0; i--) {
+     for (let i = arr.length - 1; false; i--) {
Tests ran:
    generateFleet returns empty fleet for invalid JSON
    generateFleet returns empty fleet for missing ships
    generateFleet places a vertical ship of length 3 somewhere
  and 6 more tests!


[Survived] EqualityOperator
src/toys/2025-05-08/battleshipSolitaireFleet.js:19:32
-     for (let i = arr.length - 1; i > 0; i--) {
+     for (let i = arr.length - 1; i >= 0; i--) {
Tests ran:
    generateFleet returns empty fleet for invalid JSON
    generateFleet returns empty fleet for missing ships
    generateFleet places a vertical ship of length 3 somewhere
  and 6 more tests!


[Survived] BlockStatement
src/toys/2025-05-08/battleshipSolitaireFleet.js:19:44
-     for (let i = arr.length - 1; i > 0; i--) {
-       const j = Math.floor(getRandomNumber() * (i + 1));
-       [arr[i], arr[j]] = [arr[j], arr[i]];
-     }
+     for (let i = arr.length - 1; i > 0; i--) {}
Tests ran:
    generateFleet generates a valid fleet for simple input
    generateFleet noTouching true blocks all adjacent placements (full adjacency block)
    generateFleet parses comma-separated string ships into array


[Survived] ArithmeticOperator
src/toys/2025-05-08/battleshipSolitaireFleet.js:20:26
-       const j = Math.floor(getRandomNumber() * (i + 1));
+       const j = Math.floor(getRandomNumber() / (i + 1));
Tests ran:
    generateFleet generates a valid fleet for simple input
    generateFleet noTouching true blocks all adjacent placements (full adjacency block)
    generateFleet parses comma-separated string ships into array


[Survived] ArithmeticOperator
src/toys/2025-05-08/battleshipSolitaireFleet.js:20:47
-       const j = Math.floor(getRandomNumber() * (i + 1));
+       const j = Math.floor(getRandomNumber() * (i - 1));
Tests ran:
    generateFleet generates a valid fleet for simple input
    generateFleet noTouching true blocks all adjacent placements (full adjacency block)
    generateFleet parses comma-separated string ships into array


[Survived] ConditionalExpression
src/toys/2025-05-08/battleshipSolitaireFleet.js:28:10
-     return coord.x >= 0 && coord.y >= 0;
+     return true;
Tests ran:
    generateFleet places a vertical ship of length 3 somewhere
    generateFleet generates a valid fleet for simple input
    generateFleet noTouching true blocks all adjacent placements (full adjacency block)
  and 3 more tests!


[Survived] ConditionalExpression
src/toys/2025-05-08/battleshipSolitaireFleet.js:28:10
-     return coord.x >= 0 && coord.y >= 0;
+     return true && coord.y >= 0;
Tests ran:
    generateFleet places a vertical ship of length 3 somewhere
    generateFleet generates a valid fleet for simple input
    generateFleet noTouching true blocks all adjacent placements (full adjacency block)
  and 3 more tests!


[Survived] LogicalOperator
src/toys/2025-05-08/battleshipSolitaireFleet.js:28:10
-     return coord.x >= 0 && coord.y >= 0;
+     return coord.x >= 0 || coord.y >= 0;
Tests ran:
    generateFleet places a vertical ship of length 3 somewhere
    generateFleet generates a valid fleet for simple input
    generateFleet noTouching true blocks all adjacent placements (full adjacency block)
  and 3 more tests!


[Survived] EqualityOperator
src/toys/2025-05-08/battleshipSolitaireFleet.js:28:10
-     return coord.x >= 0 && coord.y >= 0;
+     return coord.x > 0 && coord.y >= 0;
Tests ran:
    generateFleet places a vertical ship of length 3 somewhere
    generateFleet generates a valid fleet for simple input
    generateFleet noTouching true blocks all adjacent placements (full adjacency block)
  and 3 more tests!


[Survived] ConditionalExpression
src/toys/2025-05-08/battleshipSolitaireFleet.js:28:26
-     return coord.x >= 0 && coord.y >= 0;
+     return coord.x >= 0 && true;
Tests ran:
    generateFleet places a vertical ship of length 3 somewhere
    generateFleet generates a valid fleet for simple input
    generateFleet noTouching true blocks all adjacent placements (full adjacency block)
  and 3 more tests!


[Survived] EqualityOperator
src/toys/2025-05-08/battleshipSolitaireFleet.js:28:26
-     return coord.x >= 0 && coord.y >= 0;
+     return coord.x >= 0 && coord.y > 0;
Tests ran:
    generateFleet places a vertical ship of length 3 somewhere
    generateFleet generates a valid fleet for simple input
    generateFleet noTouching true blocks all adjacent placements (full adjacency block)
  and 3 more tests!


[Survived] EqualityOperator
src/toys/2025-05-08/battleshipSolitaireFleet.js:32:10
-     return coord.x < cfg.width && coord.y < cfg.height;
+     return coord.x <= cfg.width && coord.y < cfg.height;
Tests ran:
    generateFleet places a vertical ship of length 3 somewhere
    generateFleet generates a valid fleet for simple input
    generateFleet noTouching true blocks all adjacent placements (full adjacency block)
  and 3 more tests!


[Survived] BlockStatement
src/toys/2025-05-08/battleshipSolitaireFleet.js:40:27
-   function isOrigin(dx, dy) {
-     return dx === 0 && dy === 0;
-   }
+   function isOrigin(dx, dy) {}
Tests ran:
    generateFleet noTouching true blocks all adjacent placements (full adjacency block)


[Survived] ConditionalExpression
src/toys/2025-05-08/battleshipSolitaireFleet.js:41:10
-     return dx === 0 && dy === 0;
+     return true;
Tests ran:
    generateFleet noTouching true blocks all adjacent placements (full adjacency block)


[Survived] LogicalOperator
src/toys/2025-05-08/battleshipSolitaireFleet.js:41:10
-     return dx === 0 && dy === 0;
+     return dx === 0 || dy === 0;
Tests ran:
    generateFleet noTouching true blocks all adjacent placements (full adjacency block)


[Survived] ConditionalExpression
src/toys/2025-05-08/battleshipSolitaireFleet.js:41:10
-     return dx === 0 && dy === 0;
+     return false;
Tests ran:
    generateFleet noTouching true blocks all adjacent placements (full adjacency block)


[Survived] ConditionalExpression
src/toys/2025-05-08/battleshipSolitaireFleet.js:41:10
-     return dx === 0 && dy === 0;
+     return true && dy === 0;
Tests ran:
    generateFleet noTouching true blocks all adjacent placements (full adjacency block)


[Survived] ConditionalExpression
src/toys/2025-05-08/battleshipSolitaireFleet.js:41:22
-     return dx === 0 && dy === 0;
+     return dx === 0 && true;
Tests ran:
    generateFleet noTouching true blocks all adjacent placements (full adjacency block)


[Survived] EqualityOperator
src/toys/2025-05-08/battleshipSolitaireFleet.js:41:10
-     return dx === 0 && dy === 0;
+     return dx !== 0 && dy === 0;
Tests ran:
    generateFleet noTouching true blocks all adjacent placements (full adjacency block)


[Survived] EqualityOperator
src/toys/2025-05-08/battleshipSolitaireFleet.js:41:22
-     return dx === 0 && dy === 0;
+     return dx === 0 && dy !== 0;
Tests ran:
    generateFleet noTouching true blocks all adjacent placements (full adjacency block)


[Survived] ConditionalExpression
src/toys/2025-05-08/battleshipSolitaireFleet.js:46:9
-       if (isOrigin(dx, dy)) {
+       if (true) {
Tests ran:
    generateFleet noTouching true blocks all adjacent placements (full adjacency block)


[Survived] ConditionalExpression
src/toys/2025-05-08/battleshipSolitaireFleet.js:46:9
-       if (isOrigin(dx, dy)) {
+       if (false) {
Tests ran:
    generateFleet noTouching true blocks all adjacent placements (full adjacency block)


[Survived] ObjectLiteral
src/toys/2025-05-08/battleshipSolitaireFleet.js:49:25
-         const neighbour = { x: coord.x + dx, y: coord.y + dy };
+         const neighbour = {};
Tests ran:
    generateFleet noTouching true blocks all adjacent placements (full adjacency block)


[Survived] ArithmeticOperator
src/toys/2025-05-08/battleshipSolitaireFleet.js:49:47
-         const neighbour = { x: coord.x + dx, y: coord.y + dy };
+         const neighbour = { x: coord.x + dx, y: coord.y - dy };
Tests ran:
    generateFleet noTouching true blocks all adjacent placements (full adjacency block)


[Survived] ArithmeticOperator
src/toys/2025-05-08/battleshipSolitaireFleet.js:49:30
-         const neighbour = { x: coord.x + dx, y: coord.y + dy };
+         const neighbour = { x: coord.x - dx, y: coord.y + dy };
Tests ran:
    generateFleet noTouching true blocks all adjacent placements (full adjacency block)


[Survived] ArrayDeclaration
src/toys/2025-05-08/battleshipSolitaireFleet.js:56:10
-     return [-1, 0, 1].reduce((acc, dy) => {
+     return [].reduce((acc, dy) => {
Tests ran:
    generateFleet noTouching true blocks all adjacent placements (full adjacency block)


[Survived] UnaryOperator
src/toys/2025-05-08/battleshipSolitaireFleet.js:58:8
-         [-1, 0, 1].reduce(dxReducerForNeighbour(coord, dy), [])
+         [+1, 0, 1].reduce(dxReducerForNeighbour(coord, dy), [])
Tests ran:
    generateFleet noTouching true blocks all adjacent placements (full adjacency block)


[Survived] ArrayDeclaration
src/toys/2025-05-08/battleshipSolitaireFleet.js:58:7
-         [-1, 0, 1].reduce(dxReducerForNeighbour(coord, dy), [])
+         [].reduce(dxReducerForNeighbour(coord, dy), [])
Tests ran:
    generateFleet noTouching true blocks all adjacent placements (full adjacency block)


[Survived] ArrayDeclaration
src/toys/2025-05-08/battleshipSolitaireFleet.js:60:6
-     }, []);
+     }, ["Stryker was here"]);
Tests ran:
    generateFleet noTouching true blocks all adjacent placements (full adjacency block)


[Survived] UnaryOperator
src/toys/2025-05-08/battleshipSolitaireFleet.js:56:11
-     return [-1, 0, 1].reduce((acc, dy) => {
+     return [+1, 0, 1].reduce((acc, dy) => {
Tests ran:
    generateFleet noTouching true blocks all adjacent placements (full adjacency block)


[Survived] ArrayDeclaration
src/toys/2025-05-08/battleshipSolitaireFleet.js:58:59
-         [-1, 0, 1].reduce(dxReducerForNeighbour(coord, dy), [])
+         [-1, 0, 1].reduce(dxReducerForNeighbour(coord, dy), ["Stryker was here"])
Tests ran:
    generateFleet noTouching true blocks all adjacent placements (full adjacency block)


[Survived] BlockStatement
src/toys/2025-05-08/battleshipSolitaireFleet.js:63:48
-   function isNeighbourOccupied(n, cfg, occupied) {
-     return inBounds(n, cfg) && occupied.has(key(n.x, n.y));
-   }
+   function isNeighbourOccupied(n, cfg, occupied) {}
Tests ran:
    generateFleet noTouching true blocks all adjacent placements (full adjacency block)


[Survived] ArrowFunction
src/toys/2025-05-08/battleshipSolitaireFleet.js:67:58
-   const makeSegHasNoOccupiedNeighbour = (cfg, occupied) => seg => !neighbours(seg).some(n => isNeighbourOccupied(n, cfg, occupied));
+   const makeSegHasNoOccupiedNeighbour = (cfg, occupied) => () => undefined;
Tests ran:
    generateFleet noTouching true blocks all adjacent placements (full adjacency block)


[Survived] ConditionalExpression
src/toys/2025-05-08/battleshipSolitaireFleet.js:64:10
-     return inBounds(n, cfg) && occupied.has(key(n.x, n.y));
+     return true;
Tests ran:
    generateFleet noTouching true blocks all adjacent placements (full adjacency block)


[Survived] MethodExpression
src/toys/2025-05-08/battleshipSolitaireFleet.js:67:66
-   const makeSegHasNoOccupiedNeighbour = (cfg, occupied) => seg => !neighbours(seg).some(n => isNeighbourOccupied(n, cfg, occupied));
+   const makeSegHasNoOccupiedNeighbour = (cfg, occupied) => seg => !neighbours(seg).every(n => isNeighbourOccupied(n, cfg, occupied));
Tests ran:
    generateFleet noTouching true blocks all adjacent placements (full adjacency block)


[Survived] LogicalOperator
src/toys/2025-05-08/battleshipSolitaireFleet.js:64:10
-     return inBounds(n, cfg) && occupied.has(key(n.x, n.y));
+     return inBounds(n, cfg) || occupied.has(key(n.x, n.y));
Tests ran:
    generateFleet noTouching true blocks all adjacent placements (full adjacency block)


[Survived] ConditionalExpression
src/toys/2025-05-08/battleshipSolitaireFleet.js:64:10
-     return inBounds(n, cfg) && occupied.has(key(n.x, n.y));
+     return false;
Tests ran:
    generateFleet noTouching true blocks all adjacent placements (full adjacency block)


[Survived] BooleanLiteral
src/toys/2025-05-08/battleshipSolitaireFleet.js:67:65
-   const makeSegHasNoOccupiedNeighbour = (cfg, occupied) => seg => !neighbours(seg).some(n => isNeighbourOccupied(n, cfg, occupied));
+   const makeSegHasNoOccupiedNeighbour = (cfg, occupied) => seg => neighbours(seg).some(n => isNeighbourOccupied(n, cfg, occupied));
Tests ran:
    generateFleet noTouching true blocks all adjacent placements (full adjacency block)


[Survived] ArrowFunction
src/toys/2025-05-08/battleshipSolitaireFleet.js:67:87
-   const makeSegHasNoOccupiedNeighbour = (cfg, occupied) => seg => !neighbours(seg).some(n => isNeighbourOccupied(n, cfg, occupied));
+   const makeSegHasNoOccupiedNeighbour = (cfg, occupied) => seg => !neighbours(seg).some(() => undefined);
Tests ran:
    generateFleet noTouching true blocks all adjacent placements (full adjacency block)


[Survived] ConditionalExpression
src/toys/2025-05-08/battleshipSolitaireFleet.js:70:7
-     if (dir === 'H') {
+     if (false) {
Tests ran:
    generateFleet places a vertical ship of length 3 somewhere
    generateFleet generates a valid fleet for simple input
    generateFleet noTouching true blocks all adjacent placements (full adjacency block)
  and 3 more tests!


[Survived] ArithmeticOperator
src/toys/2025-05-08/battleshipSolitaireFleet.js:71:12
-       return x + i;
+       return x - i;
Tests ran:
    generateFleet places a vertical ship of length 3 somewhere
    generateFleet generates a valid fleet for simple input
    generateFleet noTouching true blocks all adjacent placements (full adjacency block)
  and 3 more tests!


[Survived] StringLiteral
src/toys/2025-05-08/battleshipSolitaireFleet.js:70:15
-     if (dir === 'H') {
+     if (dir === "") {
Tests ran:
    generateFleet places a vertical ship of length 3 somewhere
    generateFleet generates a valid fleet for simple input
    generateFleet noTouching true blocks all adjacent placements (full adjacency block)
  and 3 more tests!


[Survived] EqualityOperator
src/toys/2025-05-08/battleshipSolitaireFleet.js:70:7
-     if (dir === 'H') {
+     if (dir !== 'H') {
Tests ran:
    generateFleet places a vertical ship of length 3 somewhere
    generateFleet generates a valid fleet for simple input
    generateFleet noTouching true blocks all adjacent placements (full adjacency block)
  and 3 more tests!


[Survived] BlockStatement
src/toys/2025-05-08/battleshipSolitaireFleet.js:70:20
-     if (dir === 'H') {
-       return x + i;
-     } else {
+     if (dir === 'H') {} else {
Tests ran:
    generateFleet places a vertical ship of length 3 somewhere
    generateFleet generates a valid fleet for simple input
    generateFleet noTouching true blocks all adjacent placements (full adjacency block)
  and 3 more tests!


[Survived] EqualityOperator
src/toys/2025-05-08/battleshipSolitaireFleet.js:78:7
-     if (dir === 'V') {
+     if (dir !== 'V') {
Tests ran:
    generateFleet places a vertical ship of length 3 somewhere
    generateFleet generates a valid fleet for simple input
    generateFleet noTouching true blocks all adjacent placements (full adjacency block)
  and 3 more tests!


[Survived] BlockStatement
src/toys/2025-05-08/battleshipSolitaireFleet.js:78:20
-     if (dir === 'V') {
-       return y + i;
-     } else {
+     if (dir === 'V') {} else {
Tests ran:
    generateFleet places a vertical ship of length 3 somewhere
    generateFleet generates a valid fleet for simple input
    generateFleet noTouching true blocks all adjacent placements (full adjacency block)
  and 3 more tests!


[Survived] BlockStatement
src/toys/2025-05-08/battleshipSolitaireFleet.js:80:10
-     } else {
-       return y;
-     }
+     } else {}
Tests ran:
    generateFleet places a vertical ship of length 3 somewhere
    generateFleet generates a valid fleet for simple input
    generateFleet noTouching true blocks all adjacent placements (full adjacency block)
  and 3 more tests!


[Survived] BlockStatement
src/toys/2025-05-08/battleshipSolitaireFleet.js:86:20
-     if (dir === 'H') {
-       return x + len - 1;
-     } else {
+     if (dir === 'H') {} else {
Tests ran:
    generateFleet places a vertical ship of length 3 somewhere
    generateFleet generates a valid fleet for simple input
    generateFleet noTouching true blocks all adjacent placements (full adjacency block)
  and 3 more tests!


[Survived] ArithmeticOperator
src/toys/2025-05-08/battleshipSolitaireFleet.js:87:12
-       return x + len - 1;
+       return x + len + 1;
Tests ran:
    generateFleet places a vertical ship of length 3 somewhere
    generateFleet generates a valid fleet for simple input
    generateFleet noTouching true blocks all adjacent placements (full adjacency block)
  and 3 more tests!


[Survived] ArithmeticOperator
src/toys/2025-05-08/battleshipSolitaireFleet.js:87:12
-       return x + len - 1;
+       return x - len - 1;
Tests ran:
    generateFleet places a vertical ship of length 3 somewhere
    generateFleet generates a valid fleet for simple input
    generateFleet noTouching true blocks all adjacent placements (full adjacency block)
  and 3 more tests!


[Survived] ConditionalExpression
src/toys/2025-05-08/battleshipSolitaireFleet.js:94:7
-     if (dir === 'V') {
+     if (true) {
Tests ran:
    generateFleet places a vertical ship of length 3 somewhere
    generateFleet generates a valid fleet for simple input
    generateFleet noTouching true blocks all adjacent placements (full adjacency block)
  and 3 more tests!


[Survived] BlockStatement
src/toys/2025-05-08/battleshipSolitaireFleet.js:96:10
-     } else {
-       return y;
-     }
+     } else {}
Tests ran:
    generateFleet places a vertical ship of length 3 somewhere
    generateFleet generates a valid fleet for simple input
    generateFleet noTouching true blocks all adjacent placements (full adjacency block)
  and 3 more tests!


[Survived] ConditionalExpression
src/toys/2025-05-08/battleshipSolitaireFleet.js:112:9
-       if (!acc.valid) {return acc;}
+       if (false) {return acc;}
Tests ran:
    generateFleet places a vertical ship of length 3 somewhere
    generateFleet generates a valid fleet for simple input
    generateFleet noTouching true blocks all adjacent placements (full adjacency block)
  and 3 more tests!


[Survived] BlockStatement
src/toys/2025-05-08/battleshipSolitaireFleet.js:112:21
-       if (!acc.valid) {return acc;}
+       if (!acc.valid) {}
Tests ran:
    generateFleet places a vertical ship of length 3 somewhere
    generateFleet generates a valid fleet for simple input
    generateFleet ignores diagonalAllowed property
  and 2 more tests!


[Survived] ObjectLiteral
src/toys/2025-05-08/battleshipSolitaireFleet.js:122:14
-         return { ...acc, valid: false };
+         return {};
Tests ran:
    generateFleet places a vertical ship of length 3 somewhere
    generateFleet generates a valid fleet for simple input
    generateFleet noTouching true blocks all adjacent placements (full adjacency block)
  and 3 more tests!


[Survived] ArrayDeclaration
src/toys/2025-05-08/battleshipSolitaireFleet.js:133:28
-       return { ...acc, segs: [...acc.segs, { x: sx, y: sy }] };
+       return { ...acc, segs: [] };
Tests ran:
    generateFleet places a vertical ship of length 3 somewhere
    generateFleet generates a valid fleet for simple input
    generateFleet noTouching true blocks all adjacent placements (full adjacency block)
  and 3 more tests!


[Survived] MethodExpression
src/toys/2025-05-08/battleshipSolitaireFleet.js:140:10
-     return segs.every(segHasNoOccupiedNeighbour);
+     return segs.some(segHasNoOccupiedNeighbour);
Tests ran:
    generateFleet noTouching true blocks all adjacent placements (full adjacency block)


[Survived] BlockStatement
src/toys/2025-05-08/battleshipSolitaireFleet.js:138:65
-   const allSegsHaveNoOccupiedNeighbour = (cfg, occupied, segs) => {
-     const segHasNoOccupiedNeighbour = makeSegHasNoOccupiedNeighbour(cfg, occupied);
-     return segs.every(segHasNoOccupiedNeighbour);
-   };
+   const allSegsHaveNoOccupiedNeighbour = (cfg, occupied, segs) => {};
Tests ran:
    generateFleet noTouching true blocks all adjacent placements (full adjacency block)


[Survived] ObjectLiteral
src/toys/2025-05-08/battleshipSolitaireFleet.js:133:42
-       return { ...acc, segs: [...acc.segs, { x: sx, y: sy }] };
+       return { ...acc, segs: [...acc.segs, {}] };
Tests ran:
    generateFleet places a vertical ship of length 3 somewhere
    generateFleet generates a valid fleet for simple input
    generateFleet noTouching true blocks all adjacent placements (full adjacency block)
  and 3 more tests!


[Survived] BlockStatement
src/toys/2025-05-08/battleshipSolitaireFleet.js:143:48
-   function isForbiddenTouch(cfg, occupied, segs) {
-     return cfg.noTouching === true && !allSegsHaveNoOccupiedNeighbour(cfg, occupied, segs);
-   }
+   function isForbiddenTouch(cfg, occupied, segs) {}
Tests ran:
    generateFleet places a vertical ship of length 3 somewhere
    generateFleet generates a valid fleet for simple input
    generateFleet noTouching true blocks all adjacent placements (full adjacency block)
  and 3 more tests!


[Survived] ConditionalExpression
src/toys/2025-05-08/battleshipSolitaireFleet.js:144:10
-     return cfg.noTouching === true && !allSegsHaveNoOccupiedNeighbour(cfg, occupied, segs);
+     return false;
Tests ran:
    generateFleet places a vertical ship of length 3 somewhere
    generateFleet generates a valid fleet for simple input
    generateFleet noTouching true blocks all adjacent placements (full adjacency block)
  and 3 more tests!


[Survived] BooleanLiteral
src/toys/2025-05-08/battleshipSolitaireFleet.js:144:37
-     return cfg.noTouching === true && !allSegsHaveNoOccupiedNeighbour(cfg, occupied, segs);
+     return cfg.noTouching === true && allSegsHaveNoOccupiedNeighbour(cfg, occupied, segs);
Tests ran:
    generateFleet noTouching true blocks all adjacent placements (full adjacency block)


[Survived] BooleanLiteral
src/toys/2025-05-08/battleshipSolitaireFleet.js:144:29
-     return cfg.noTouching === true && !allSegsHaveNoOccupiedNeighbour(cfg, occupied, segs);
+     return cfg.noTouching === false && !allSegsHaveNoOccupiedNeighbour(cfg, occupied, segs);
Tests ran:
    generateFleet places a vertical ship of length 3 somewhere
    generateFleet generates a valid fleet for simple input
    generateFleet noTouching true blocks all adjacent placements (full adjacency block)
  and 3 more tests!


[Survived] ArrayDeclaration
src/toys/2025-05-08/battleshipSolitaireFleet.js:182:13
-       { segs: [], valid: true }
+       { segs: ["Stryker was here"], valid: true }
Tests ran:
    generateFleet places a vertical ship of length 3 somewhere
    generateFleet generates a valid fleet for simple input
    generateFleet noTouching true blocks all adjacent placements (full adjacency block)
  and 3 more tests!


[Survived] EqualityOperator
src/toys/2025-05-08/battleshipSolitaireFleet.js:192:19
-     for (let y = 0; y < cfg.height; y++) {
+     for (let y = 0; y <= cfg.height; y++) {
Tests ran:
    generateFleet places a vertical ship of length 3 somewhere
    generateFleet generates a valid fleet for simple input
    generateFleet noTouching true blocks all adjacent placements (full adjacency block)
  and 3 more tests!


[Survived] EqualityOperator
src/toys/2025-05-08/battleshipSolitaireFleet.js:199:19
-     for (let x = 0; x < cfg.width; x++) {
+     for (let x = 0; x <= cfg.width; x++) {
Tests ran:
    generateFleet places a vertical ship of length 3 somewhere
    generateFleet generates a valid fleet for simple input
    generateFleet noTouching true blocks all adjacent placements (full adjacency block)
  and 3 more tests!


[Survived] EqualityOperator
src/toys/2025-05-08/battleshipSolitaireFleet.js:207:19
-     for (let i = 0; i < length; i++) {
+     for (let i = 0; i <= length; i++) {
Tests ran:
    generateFleet places a vertical ship of length 3 somewhere
    generateFleet generates a valid fleet for simple input
    generateFleet noTouching true blocks all adjacent placements (full adjacency block)
  and 3 more tests!


[Survived] ConditionalExpression
src/toys/2025-05-08/battleshipSolitaireFleet.js:258:7
-     if (result !== null) {return result;}
+     if (true) {return result;}
Tests ran:
    generateFleet returns empty fleet for invalid JSON
    generateFleet returns empty fleet for missing ships
    generateFleet places a vertical ship of length 3 somewhere
  and 6 more tests!


[Survived] MethodExpression
src/toys/2025-05-08/battleshipSolitaireFleet.js:253:19
-     const lengths = cfg.ships.slice();
+     const lengths = cfg.ships;
Tests ran:
    generateFleet returns empty fleet for invalid JSON
    generateFleet returns empty fleet for missing ships
    generateFleet places a vertical ship of length 3 somewhere
  and 6 more tests!


[Survived] ConditionalExpression
src/toys/2025-05-08/battleshipSolitaireFleet.js:289:7
-     if (typeof cfg.ships === 'string') {
+     if (false) {
Tests ran:
    generateFleet returns empty fleet for invalid JSON
    generateFleet returns empty fleet for missing ships
    generateFleet returns error if ship segments exceed board area
  and 7 more tests!


[Survived] BlockStatement
src/toys/2025-05-08/battleshipSolitaireFleet.js:289:38
-     if (typeof cfg.ships === 'string') {
-       cfg.ships = cfg.ships
-         .split(',')
-         .map(s => parseInt(s.trim(), 10))
-         .filter(Boolean);
-     }
+     if (typeof cfg.ships === 'string') {}
Tests ran:
    generateFleet parses comma-separated string ships into array


[Survived] StringLiteral
src/toys/2025-05-08/battleshipSolitaireFleet.js:289:28
-     if (typeof cfg.ships === 'string') {
+     if (typeof cfg.ships === "") {
Tests ran:
    generateFleet returns empty fleet for invalid JSON
    generateFleet returns empty fleet for missing ships
    generateFleet returns error if ship segments exceed board area
  and 7 more tests!


[Survived] MethodExpression
src/toys/2025-05-08/battleshipSolitaireFleet.js:290:17
-       cfg.ships = cfg.ships
-         .split(',')
-         .map(s => parseInt(s.trim(), 10))
-         .filter(Boolean);
+       cfg.ships = cfg.ships.split(',').map(s => parseInt(s.trim(), 10));
Tests ran:
    generateFleet parses comma-separated string ships into array


[Survived] StringLiteral
src/toys/2025-05-08/battleshipSolitaireFleet.js:291:14
-         .split(',')
+         .split("")
Tests ran:
    generateFleet parses comma-separated string ships into array


[Survived] ArrowFunction
src/toys/2025-05-08/battleshipSolitaireFleet.js:292:12
-         .map(s => parseInt(s.trim(), 10))
+         .map(() => undefined)
Tests ran:
    generateFleet parses comma-separated string ships into array


[Survived] MethodExpression
src/toys/2025-05-08/battleshipSolitaireFleet.js:292:26
-         .map(s => parseInt(s.trim(), 10))
+         .map(s => parseInt(s, 10))
Tests ran:
    generateFleet parses comma-separated string ships into array


[Survived] ConditionalExpression
src/toys/2025-05-08/battleshipSolitaireFleet.js:296:7
-     if (typeof cfg.width === 'string') {
+     if (true) {
Tests ran:
    generateFleet returns empty fleet for invalid JSON
    generateFleet returns empty fleet for missing ships
    generateFleet returns error if ship segments exceed board area
  and 7 more tests!


[Survived] ConditionalExpression
src/toys/2025-05-08/battleshipSolitaireFleet.js:299:7
-     if (typeof cfg.height === 'string') {
+     if (true) {
Tests ran:
    generateFleet returns empty fleet for invalid JSON
    generateFleet returns empty fleet for missing ships
    generateFleet returns error if ship segments exceed board area
  and 7 more tests!


[Survived] ConditionalExpression
src/toys/2025-05-08/battleshipSolitaireFleet.js:316:7
-     if (fleet !== null) {return fleet;}
+     if (true) {return fleet;}
Tests ran:
    generateFleet returns empty fleet for invalid JSON
    generateFleet returns empty fleet for missing ships
    generateFleet places a vertical ship of length 3 somewhere
  and 6 more tests!


[Survived] ConditionalExpression
src/toys/2025-05-08/battleshipSolitaireFleet.js:327:75
-     return Array.from({ length: maxTries }, (_, i) => cb(i)).find(result => result !== null) || null;
+     return Array.from({ length: maxTries }, (_, i) => cb(i)).find(result => true) || null;
Tests ran:
    generateFleet returns empty fleet for invalid JSON
    generateFleet returns empty fleet for missing ships
    generateFleet places a vertical ship of length 3 somewhere
  and 6 more tests!


[Survived] ArrayDeclaration
src/toys/2025-05-11/battleshipSolitaireClues.js:29:17
-     const cells = [];
+     const cells = ["Stryker was here"];
Tests ran:
    generateClues computes correct clues for a single horizontal ship
    generateClues computes correct clues for mixed horizontal and vertical ships
    generateClues ignores ship cells that fall outside the board


[Survived] ArrayDeclaration
src/toys/2025-05-11/battleshipSolitaireClues.js:37:17
-     const cells = [];
+     const cells = ["Stryker was here"];
Tests ran:
    generateClues computes correct clues for mixed horizontal and vertical ships


[Survived] EqualityOperator
src/toys/2025-05-11/battleshipSolitaireClues.js:38:19
-     for (let i = 0; i < ship.length; i++) {
+     for (let i = 0; i <= ship.length; i++) {
Tests ran:
    generateClues computes correct clues for mixed horizontal and vertical ships


[Survived] ConditionalExpression
src/toys/2025-05-11/battleshipSolitaireClues.js:53:10
-     return x >= 0 && x < board.width;
+     return true && x < board.width;
Tests ran:
    generateClues computes correct clues for a single horizontal ship
    generateClues computes correct clues for mixed horizontal and vertical ships
    generateClues ignores ship cells that fall outside the board


[Survived] LogicalOperator
src/toys/2025-05-11/battleshipSolitaireClues.js:57:10
-     return y >= 0 && y < board.height;
+     return y >= 0 || y < board.height;
Tests ran:
    generateClues computes correct clues for a single horizontal ship
    generateClues computes correct clues for mixed horizontal and vertical ships
    generateClues ignores ship cells that fall outside the board


[Survived] ConditionalExpression
src/toys/2025-05-11/battleshipSolitaireClues.js:57:10
-     return y >= 0 && y < board.height;
+     return true;
Tests ran:
    generateClues computes correct clues for a single horizontal ship
    generateClues computes correct clues for mixed horizontal and vertical ships
    generateClues ignores ship cells that fall outside the board


[Survived] EqualityOperator
src/toys/2025-05-11/battleshipSolitaireClues.js:57:20
-     return y >= 0 && y < board.height;
+     return y >= 0 && y <= board.height;
Tests ran:
    generateClues computes correct clues for a single horizontal ship
    generateClues computes correct clues for mixed horizontal and vertical ships
    generateClues ignores ship cells that fall outside the board


[Survived] ConditionalExpression
src/toys/2025-05-11/battleshipSolitaireClues.js:57:10
-     return y >= 0 && y < board.height;
+     return true && y < board.height;
Tests ran:
    generateClues computes correct clues for a single horizontal ship
    generateClues computes correct clues for mixed horizontal and vertical ships
    generateClues ignores ship cells that fall outside the board


[Survived] ConditionalExpression
src/toys/2025-05-11/battleshipSolitaireClues.js:57:20
-     return y >= 0 && y < board.height;
+     return y >= 0 && true;
Tests ran:
    generateClues computes correct clues for a single horizontal ship
    generateClues computes correct clues for mixed horizontal and vertical ships
    generateClues ignores ship cells that fall outside the board


[Survived] BlockStatement
src/toys/2025-05-11/battleshipSolitaireClues.js:64:11
-     } catch {
-       return { error: 'Invalid input JSON' };
-     }
+     } catch {}
Tests ran:
    generateClues returns an error for invalid JSON


[Survived] OptionalChaining
src/toys/2025-05-11/battleshipSolitaireClues.js:75:12
-       typeof fleet?.width === 'number' &&
+       typeof fleet.width === 'number' &&
Tests ran:
    generateClues returns an error for an invalid fleet structure
    generateClues computes correct clues for a single horizontal ship
    generateClues computes correct clues for mixed horizontal and vertical ships
  and 1 more test!


[Survived] ConditionalExpression
src/toys/2025-05-11/battleshipSolitaireClues.js:76:5
-       typeof fleet?.height === 'number' &&
+       true &&
Tests ran:
    generateClues computes correct clues for a single horizontal ship
    generateClues computes correct clues for mixed horizontal and vertical ships
    generateClues ignores ship cells that fall outside the board


[Survived] OptionalChaining
src/toys/2025-05-11/battleshipSolitaireClues.js:76:12
-       typeof fleet?.height === 'number' &&
+       typeof fleet.height === 'number' &&
Tests ran:
    generateClues computes correct clues for a single horizontal ship
    generateClues computes correct clues for mixed horizontal and vertical ships
    generateClues ignores ship cells that fall outside the board


[Survived] OptionalChaining
src/toys/2025-05-11/battleshipSolitaireClues.js:77:19
-       Array.isArray(fleet?.ships)
+       Array.isArray(fleet.ships)
Tests ran:
    generateClues computes correct clues for a single horizontal ship
    generateClues computes correct clues for mixed horizontal and vertical ships
    generateClues ignores ship cells that fall outside the board


[Survived] ConditionalExpression
src/utils/objectUtils.js:11:9
-       if (key in obj) {
+       if (true) {
Tests ran:
    pick picks specified properties from an object
    pick ignores non-existent properties


Ran 6.64 tests per mutant on average.
-------------------------------|------------------|----------|-----------|------------|----------|----------|
                               | % Mutation score |          |           |            |          |          |
File                           |  total | covered | # killed | # timeout | # survived | # no cov | # errors |
-------------------------------|--------|---------|----------|-----------|------------|----------|----------|
All files                      |  77.06 |   82.72 |     2282 |       136 |        505 |      215 |        1 |
 browser                       |  64.96 |   77.39 |      383 |        62 |        130 |      110 |        0 |
  audio-controls.js            |  58.54 |   58.54 |       24 |         0 |         17 |        0 |        0 |
  common.js                    | 100.00 |  100.00 |       14 |         0 |          0 |        0 |        0 |
  data.js                      |  93.08 |   93.08 |      101 |        20 |          9 |        0 |        0 |
  document.js                  |   1.15 |    2.44 |        1 |         0 |         40 |       46 |        0 |
  main.js                      |   0.00 |    0.00 |        0 |         0 |          0 |       26 |        0 |
  setOutput.js                 |  90.91 |   90.91 |       17 |         3 |          2 |        0 |        0 |
  tags.js                      |  76.19 |   76.19 |       32 |         0 |         10 |        0 |        0 |
  toys.js                      |  72.14 |   81.75 |      194 |        39 |         52 |       38 |        0 |
 constants                     |   0.00 |    0.00 |        0 |         0 |         58 |        0 |        0 |
  markdown.js                  |   0.00 |    0.00 |        0 |         0 |         58 |        0 |        0 |
 generator                     |  69.95 |   85.78 |      398 |         0 |         66 |      105 |        1 |
  copy.js                      |   0.00 |    0.00 |        0 |         0 |          0 |      105 |        0 |
  full-width.js                | 100.00 |  100.00 |        1 |         0 |          0 |        0 |        0 |
  generator.js                 |  88.22 |   88.22 |      367 |         0 |         49 |        0 |        1 |
  head.js                      |   0.00 |    0.00 |        0 |         0 |          1 |        0 |        0 |
  html.js                      |  68.18 |   68.18 |       30 |         0 |         14 |        0 |        0 |
  styles.js                    |   0.00 |    0.00 |        0 |         0 |          1 |        0 |        0 |
  title.js                     |   0.00 |    0.00 |        0 |         0 |          1 |        0 |        0 |
 presenters                    |  86.87 |   86.87 |      251 |        40 |         44 |        0 |        0 |
  battleshipSolitaireClues.js  |  89.47 |   89.47 |       72 |        13 |         10 |        0 |        0 |
  battleshipSolitaireFleet.js  |  86.36 |   86.36 |       99 |        15 |         18 |        0 |        0 |
  paragraph.js                 | 100.00 |  100.00 |        2 |         0 |          0 |        0 |        0 |
  pre.js                       |  86.11 |   86.11 |       25 |         6 |          5 |        0 |        0 |
  ticTacToeBoard.js            |  84.29 |   84.29 |       53 |         6 |         11 |        0 |        0 |
 toys                          |  85.22 |   85.22 |     1154 |        34 |        206 |        0 |        0 |
  2024-10-02                   | 100.00 |  100.00 |        2 |         0 |          0 |        0 |        0 |
   hello.js                    | 100.00 |  100.00 |        2 |         0 |          0 |        0 |        0 |
  2025-03-19                   | 100.00 |  100.00 |        1 |         0 |          0 |        0 |        0 |
   identity.js                 | 100.00 |  100.00 |        1 |         0 |          0 |        0 |        0 |
  2025-03-21                   |  90.60 |   90.60 |       97 |         9 |         11 |        0 |        0 |
   booleanCoercer.js           | 100.00 |  100.00 |       24 |         0 |          0 |        0 |        0 |
   italics.js                  |  88.17 |   88.17 |       73 |         9 |         11 |        0 |        0 |
  2025-03-26                   |  89.02 |   89.02 |       73 |         0 |          9 |        0 |        0 |
   prettyFloat.js              |  89.02 |   89.02 |       73 |         0 |          9 |        0 |        0 |
  2025-03-28                   | 100.00 |  100.00 |        2 |         0 |          0 |        0 |        0 |
   rand.js                     | 100.00 |  100.00 |        2 |         0 |          0 |        0 |        0 |
  2025-03-29                   |  94.89 |   94.89 |      294 |         3 |         16 |        0 |        0 |
   fishingGame.js              |  89.36 |   89.36 |      126 |         0 |         15 |        0 |        0 |
   get.js                      |  99.21 |   99.21 |      126 |         0 |          1 |        0 |        0 |
   setTemporary.js             | 100.00 |  100.00 |       42 |         3 |          0 |        0 |        0 |
  2025-03-30                   |  89.17 |   89.17 |      140 |         0 |         17 |        0 |        0 |
   cyberpunkAdventure.js       |  89.17 |   89.17 |      140 |         0 |         17 |        0 |        0 |
  2025-04-05                   | 100.00 |  100.00 |        3 |         0 |          0 |        0 |        0 |
   httpRequest.js              | 100.00 |  100.00 |        3 |         0 |          0 |        0 |        0 |
  2025-04-06                   |  80.47 |   80.47 |      224 |        15 |         58 |        0 |        0 |
   ticTacToe.js                |  80.47 |   80.47 |      224 |        15 |         58 |        0 |        0 |
  2025-04-16                   | 100.00 |  100.00 |       12 |         0 |          0 |        0 |        0 |
   colorPalette.js             | 100.00 |  100.00 |       12 |         0 |          0 |        0 |        0 |
  2025-05-08                   |  73.79 |   73.79 |      223 |         5 |         81 |        0 |        0 |
   battleshipSolitaireFleet.js |  73.79 |   73.79 |      223 |         5 |         81 |        0 |        0 |
  2025-05-11                   |  84.27 |   84.27 |       73 |         2 |         14 |        0 |        0 |
   battleshipSolitaireClues.js |  84.27 |   84.27 |       73 |         2 |         14 |        0 |        0 |
  2025-05-13                   | 100.00 |  100.00 |        2 |         0 |          0 |        0 |        0 |
   base64Encoder.js            | 100.00 |  100.00 |        2 |         0 |          0 |        0 |        0 |
  2025-05-15                   | 100.00 |  100.00 |        8 |         0 |          0 |        0 |        0 |
   stringToJsonArray.js        | 100.00 |  100.00 |        8 |         0 |          0 |        0 |        0 |
 utils                         |  98.97 |   98.97 |       96 |         0 |          1 |        0 |        0 |
  objectUtils.js               |  95.65 |   95.65 |       22 |         0 |          1 |        0 |        0 |
  regexUtils.js                | 100.00 |  100.00 |       15 |         0 |          0 |        0 |        0 |
  stringUtils.js               | 100.00 |  100.00 |       22 |         0 |          0 |        0 |        0 |
  validation.js                | 100.00 |  100.00 |       37 |         0 |          0 |        0 |        0 |
-------------------------------|--------|---------|----------|-----------|------------|----------|----------|
[32m21:27:38 (1038) INFO MutationTestExecutor[39m Done in 22 minutes 29 seconds.
