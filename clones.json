[
  {
    "format": "javascript",
    "lines": 25,
    "fragment": "\nfunction ensureDend2(data) {\n  if (typeof data.temporary !== 'object' || data.temporary === null) {\n    data.temporary = { DEND2: { stories: [], pages: [], options: [] } };\n    return;\n  }\n  const t = data.temporary;\n  if (\n    typeof t.DEND2 !== 'object' ||\n    t.DEND2 === null ||\n    !Array.isArray(t.DEND2.stories) ||\n    !Array.isArray(t.DEND2.pages) ||\n    !Array.isArray(t.DEND2.options)\n  ) {\n    t.DEND2 = { stories: [], pages: [], options: [] };\n  }\n}\n\n/**\n * Validate the parsed story input.\n * @param {object} [obj] - Parsed object.\n * @param {string} obj.title - Story title.\n * @param {string} obj.content - Story content.\n * @returns {boolean} True when valid.\n */",
    "tokens": 0,
    "firstFile": {
      "name": "src/toys/2025-07-04/transformDendriteStory.js",
      "start": 8,
      "end": 32,
      "startLoc": {
        "line": 8,
        "column": 4,
        "position": 41
      },
      "endLoc": {
        "line": 32,
        "column": 4,
        "position": 251
      }
    },
    "secondFile": {
      "name": "src/toys/2025-07-05/addDendritePage.js",
      "start": 9,
      "end": 33,
      "startLoc": {
        "line": 9,
        "column": 39,
        "position": 43
      },
      "endLoc": {
        "line": 33,
        "column": 4,
        "position": 253
      }
    }
  },
  {
    "format": "javascript",
    "lines": 11,
    "fragment": "(input, env) {\n  try {\n    const parsed = JSON.parse(input);\n    if (!isValidInput(parsed)) {\n      throw new Error('invalid');\n    }\n\n    const getUuid = env.get('getUuid');\n    const getData = env.get('getData');\n    const setLocalTemporaryData = env.get('setLocalTemporaryData');\n    const storyId",
    "tokens": 0,
    "firstFile": {
      "name": "src/toys/2025-07-04/transformDendriteStory.js",
      "start": 56,
      "end": 66,
      "startLoc": {
        "line": 56,
        "column": 23,
        "position": 367
      },
      "endLoc": {
        "line": 66,
        "column": 8,
        "position": 472
      }
    },
    "secondFile": {
      "name": "src/toys/2025-07-05/addDendritePage.js",
      "start": 64,
      "end": 74,
      "startLoc": {
        "line": 64,
        "column": 16,
        "position": 392
      },
      "endLoc": {
        "line": 74,
        "column": 7,
        "position": 497
      }
    }
  },
  {
    "format": "javascript",
    "lines": 6,
    "fragment": ");\n    newData.temporary.DEND2.pages.push(page);\n    newData.temporary.DEND2.options.push(...opts);\n    setLocalTemporaryData(newData);\n\n    return JSON.stringify({ stories",
    "tokens": 0,
    "firstFile": {
      "name": "src/toys/2025-07-04/transformDendriteStory.js",
      "start": 78,
      "end": 83,
      "startLoc": {
        "line": 78,
        "column": 6,
        "position": 630
      },
      "endLoc": {
        "line": 83,
        "column": 8,
        "position": 681
      }
    },
    "secondFile": {
      "name": "src/toys/2025-07-05/addDendritePage.js",
      "start": 84,
      "end": 89,
      "startLoc": {
        "line": 84,
        "column": 8,
        "position": 593
      },
      "endLoc": {
        "line": 89,
        "column": 6,
        "position": 644
      }
    }
  },
  {
    "format": "javascript",
    "lines": 9,
    "fragment": "(marker) {\n  // Escape marker if it's a special regex character\n  let escapedMarker;\n  if (REGEX_SPECIAL_CHARS.test(marker)) {\n    escapedMarker = `\\\\${marker}`;\n  } else {\n    escapedMarker = marker;\n  }\n  return",
    "tokens": 0,
    "firstFile": {
      "name": "src/toys/2025-03-21/italics.js",
      "start": 95,
      "end": 103,
      "startLoc": {
        "line": 95,
        "column": 21,
        "position": 352
      },
      "endLoc": {
        "line": 103,
        "column": 7,
        "position": 412
      }
    },
    "secondFile": {
      "name": "src/toys/2025-03-21/italics.js",
      "start": 52,
      "end": 60,
      "startLoc": {
        "line": 52,
        "column": 22,
        "position": 136
      },
      "endLoc": {
        "line": 60,
        "column": 6,
        "position": 196
      }
    }
  },
  {
    "format": "javascript",
    "lines": 102,
    "fragment": " } from '../constants/dendrite.js';\nimport { parseJsonOrDefault } from '../utils/jsonUtils.js';\nimport { maybeRemoveNumber, maybeRemoveKV } from './removeElements.js';\nimport { DENDRITE_FORM_SELECTOR } from '../constants/selectors.js';\nimport { hideAndDisable } from './inputState.js';\n\n/**\n * Call a node's _dispose method when available.\n * @param {{_dispose?: Function}} node - Node to clean up.\n * @returns {void}\n */\nfunction disposeIfPossible(node) {\n  if (typeof node._dispose === 'function') {\n    node._dispose();\n  }\n}\n\n/**\n * Remove any previously rendered dendrite form from the container.\n * @param {HTMLElement} container - Wrapper element.\n * @param {object} dom - DOM helpers.\n * @returns {void}\n */\nfunction removeExistingForm(container, dom) {\n  const existing = dom.querySelector(container, DENDRITE_FORM_SELECTOR);\n  if (existing) {\n    disposeIfPossible(existing);\n    dom.removeChild(container, existing);\n  }\n}\n\n/**\n * Parse JSON data stored in the hidden text input.\n * @param {object} dom - DOM utilities.\n * @param {HTMLInputElement} textInput - Hidden input element.\n * @returns {object} Parsed dendrite data.\n */\nfunction parseDendriteData(dom, textInput) {\n  const value = dom.getValue(textInput) || '{}';\n  return parseJsonOrDefault(value, {});\n}\n\n/**\n * Create an input element for a given field key.\n * @param {object} dom - DOM utilities.\n * @param {string} key - Field name.\n * @returns {HTMLElement} The created element.\n */\nfunction createInputElement(dom, key) {\n  if (key === 'content') {\n    return dom.createElement('textarea');\n  }\n  const element = dom.createElement('input');\n  dom.setType(element, 'text');\n  return element;\n}\n\n/**\n * Add a labeled input field to the dendrite form.\n * @param {object} dom - DOM helpers.\n * @param {HTMLElement} form - Form container.\n * @param {{key: string, placeholder: string, data: object, textInput: HTMLInputElement, disposers: Function[]}} options - Field options.\n * @returns {void}\n */\nfunction createField(\n  dom,\n  form,\n  { key, placeholder, data, textInput, disposers }\n) {\n  const wrapper = dom.createElement('div');\n  const label = dom.createElement('label');\n  dom.setTextContent(label, placeholder);\n\n  const input = createInputElement(dom, key);\n  dom.setPlaceholder(input, placeholder);\n  if (Object.hasOwn(data, key)) {\n    dom.setValue(input, data[key]);\n  }\n  const onInput = () => {\n    data[key] = dom.getValue(input);\n    dom.setValue(textInput, JSON.stringify(data));\n  };\n  dom.addEventListener(input, 'input', onInput);\n  disposers.push(() => dom.removeEventListener(input, 'input', onInput));\n  dom.appendChild(wrapper, label);\n  dom.appendChild(wrapper, input);\n  dom.appendChild(form, wrapper);\n}\n\n/**\n * Build the interactive dendrite form and insert it after the text input.\n * @param {object} dom - DOM utilities.\n * @param {{container: HTMLElement, textInput: HTMLInputElement, data: object, disposers: Function[]}} param1 - Configuration options.\n * @returns {HTMLElement} The created form element.\n */\nfunction buildForm(dom, { container, textInput, data, disposers }) {\n  const form = dom.createElement('div');\n  dom.setClassName(form, DENDRITE_FORM_SELECTOR.slice(1));\n  const nextSibling = dom.getNextSibling(textInput);\n  dom.insertBefore(container, form, nextSibling);\n\n  DENDRITE_PAGE_FIELDS",
    "tokens": 0,
    "firstFile": {
      "name": "src/inputHandlers/dendritePage.js",
      "start": 1,
      "end": 102,
      "startLoc": {
        "line": 1,
        "column": 21,
        "position": 5
      },
      "endLoc": {
        "line": 102,
        "column": 21,
        "position": 668
      }
    },
    "secondFile": {
      "name": "src/inputHandlers/dendriteStory.js",
      "start": 1,
      "end": 102,
      "startLoc": {
        "line": 1,
        "column": 16,
        "position": 5
      },
      "endLoc": {
        "line": 102,
        "column": 16,
        "position": 668
      }
    }
  },
  {
    "format": "javascript",
    "lines": 61,
    "fragment": ".forEach(([key, placeholder]) =>\n    createField(dom, form, {\n      key,\n      placeholder,\n      data,\n      textInput,\n      disposers,\n    })\n  );\n\n  dom.setValue(textInput, JSON.stringify(data));\n\n  form._dispose = () => {\n    disposers.forEach(fn => fn());\n  };\n\n  return form;\n}\n\n/**\n * Hide and disable the hidden JSON input element.\n * @param {object} dom - DOM helpers.\n * @param {HTMLInputElement} textInput - Input to hide.\n * @returns {void}\n */\nfunction prepareTextInput(dom, textInput) {\n  hideAndDisable(textInput, dom);\n}\n\n/**\n * Remove existing inputs and forms from the container.\n * @param {object} dom - DOM utilities.\n * @param {HTMLElement} container - Container element.\n * @returns {void}\n */\nfunction cleanContainer(dom, container) {\n  maybeRemoveNumber(container, dom);\n  maybeRemoveKV(container, dom);\n  removeExistingForm(container, dom);\n}\n\n/**\n * Create and insert a dendrite form for editing data.\n * @param {object} dom - DOM utilities.\n * @param {HTMLElement} container - Container to insert into.\n * @param {HTMLInputElement} textInput - Hidden JSON input.\n * @returns {HTMLElement} Newly created form.\n */\nfunction createDendriteForm(dom, container, textInput) {\n  const disposers = [];\n  const data = parseDendriteData(dom, textInput);\n  return buildForm(dom, { container, textInput, data, disposers });\n}\n\n/**\n * Initialize the dendrite page editor inside a container.\n * @param {object} dom - DOM utilities.\n * @param {HTMLElement} container - Element that will host the form.\n * @param {HTMLInputElement} textInput - Hidden JSON input element.\n * @returns {HTMLElement} The created form element.\n */",
    "tokens": 0,
    "firstFile": {
      "name": "src/inputHandlers/dendritePage.js",
      "start": 102,
      "end": 162,
      "startLoc": {
        "line": 102,
        "column": 21,
        "position": 669
      },
      "endLoc": {
        "line": 162,
        "column": 4,
        "position": 930
      }
    },
    "secondFile": {
      "name": "src/inputHandlers/dendriteStory.js",
      "start": 102,
      "end": 162,
      "startLoc": {
        "line": 102,
        "column": 16,
        "position": 669
      },
      "endLoc": {
        "line": 162,
        "column": 4,
        "position": 930
      }
    }
  },
  {
    "format": "javascript",
    "lines": 9,
    "fragment": "],\n  ['content', 'Content'],\n  ['firstOption', 'First option'],\n  ['secondOption', 'Second option'],\n  ['thirdOption', 'Third option'],\n  ['fourthOption', 'Fourth option'],\n];\n\nexport const DENDRITE_OPTION_KEYS",
    "tokens": 0,
    "firstFile": {
      "name": "src/constants/dendrite.js",
      "start": 11,
      "end": 19,
      "startLoc": {
        "line": 11,
        "column": 12,
        "position": 84
      },
      "endLoc": {
        "line": 19,
        "column": 21,
        "position": 140
      }
    },
    "secondFile": {
      "name": "src/constants/dendrite.js",
      "start": 2,
      "end": 10,
      "startLoc": {
        "line": 2,
        "column": 8,
        "position": 16
      },
      "endLoc": {
        "line": 10,
        "column": 21,
        "position": 72
      }
    }
  }
]
