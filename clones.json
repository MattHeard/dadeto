[{"id":"fbd595f5c21798db669e194ece8155e57cfd4f22","instances":[{"path":"./src/constants/markdown.js","lines":[4,16],"code":"export function markdownMarkers() {\n  return Object.freeze({\n    ASTERISK: '*',\n    UNDERSCORE: '_',\n    BACKTICK: '`',\n    TILDE: '~',\n    DASH: '-',\n    EQUAL: '=',\n    HASH: '#',\n    GREATER_THAN: '>',\n    PIPE: '|',\n    BACKSLASH: '\\\\',\n    SLASH: '/',"},{"path":"./src/constants/markdown.js","lines":[28,40],"code":"export function htmlTags() {\n  return Object.freeze({\n    EMPHASIS: 'em',\n    STRONG: 'strong',\n    CODE: 'code',\n    PARAGRAPH: 'p',\n    BLOCKQUOTE: 'blockquote',\n    LIST: 'ul',\n    LIST_ITEM: 'li',\n    ORDERED_LIST: 'ol',\n    HORIZONTAL_RULE: 'hr',\n    LINE_BREAK: 'br',\n    LINK: 'a',"},{"path":"./src/constants/markdown.js","lines":[51,65],"code":"export function cssClasses() {\n  return Object.freeze({\n    CONTAINER: 'markdown-container',\n    HEADING: 'markdown-heading',\n    PARAGRAPH: 'markdown-paragraph',\n    LIST: 'markdown-list',\n    LIST_ITEM: 'markdown-list-item',\n    BLOCKQUOTE: 'markdown-blockquote',\n    CODE: 'markdown-code',\n    INLINE_CODE: 'markdown-inline-code',\n    LINK: 'markdown-link',\n    IMAGE: 'markdown-image',\n    HORIZONTAL_RULE: 'markdown-hr',\n  });\n}"}]},
{"id":"f3362671184ebd4988bf0cf70b6c955050e26b46","instances":[{"path":"./src/browser/data.js","lines":[131,146],"code":"export function deepMerge(target, source) {\n  const output = { ...target };\n  const mergeKey = key => {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n    if (shouldDeepMerge(targetValue, sourceValue)) {\n      output[key] = deepMerge(targetValue, sourceValue);\n    } else {\n      output[key] = sourceValue;\n    }\n  };\n  Object.keys(source).forEach(mergeKey);\n  return output;\n}\n\nfunction stripInternalFields(stateCopy) {"},{"path":"./src/toys/2025-03-29/setTemporary.js","lines":[23,40],"code":"function deepMerge(target, source) {\n  const output = { ...target };\n  const mergeKey = key => {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n    if (shouldDeepMerge(targetValue, sourceValue)) {\n      output[key] = deepMerge(targetValue, sourceValue);\n    } else {\n      output[key] = sourceValue;\n    }\n  };\n  Object.keys(source).forEach(mergeKey);\n  return output;\n}\n\nfunction shouldDeepMerge(targetValue, sourceValue) {\n  return isObject(targetValue) && isObject(sourceValue);\n}"}]},
{"id":"be28df861cd56bd76b617bb6fd06bf17a0fab5f0","instances":[{"path":"./src/browser/setOutput.js","lines":[4,41],"code":"export function setOutput(input, env) {\n  let inputJson;\n  try {\n    inputJson = JSON.parse(input);\n  } catch (parseError) {\n    return `Error: Invalid JSON input. ${parseError.message}`;\n  }\n  return processSetOutput(inputJson, env);\n}\n\nfunction processSetOutput(inputJson, env) {\n  if (!isObject(inputJson)) {\n    return \"Error: Input JSON must be a plain object.\";\n  }\n  return handleValidOutputInput(inputJson, env);\n}\n\nfunction handleValidOutputInput(inputJson, env) {\n  // Assume env.get is always a function\n  const getData = env.get('getData');\n  const setData = env.get('setData');\n  try {\n    return mergeOutputData(getData, setData, inputJson);\n  } catch (error) {\n    return `Error updating output data: ${error.message}`;\n  }\n}\n\nfunction mergeOutputData(getData, setData, inputJson) {\n  const currentData = getData();\n  const newData = JSON.parse(JSON.stringify(currentData));\n  if (!isObject(newData.output)) {\n    newData.output = {};\n  }\n  newData.output = deepMerge(newData.output, inputJson);\n  setData(newData);\n  return `Success: Output data deep merged.`;\n}"},{"path":"./src/toys/2025-03-29/setTemporary.js","lines":[50,87],"code":"export function setTemporary(input, env) {\n  let inputJson;\n  try {\n    inputJson = JSON.parse(input);\n  } catch (parseError) {\n    return `Error: Invalid JSON input. ${parseError.message}`;\n  }\n  return processSetTemporary(inputJson, env);\n}\n\nfunction processSetTemporary(inputJson, env) {\n  if (!isObject(inputJson)) {\n    return \"Error: Input JSON must be a plain object.\";\n  }\n  return handleValidTemporaryInput(inputJson, env);\n}\n\nfunction handleValidTemporaryInput(inputJson, env) {\n  const getData = env.get('getData');\n  const setData = env.get('setData');\n  try {\n    return mergeTemporaryData(getData, setData, inputJson);\n  } catch (error) {\n    return `Error updating temporary data: ${error.message}`;\n  }\n}\n\nfunction mergeTemporaryData(getData, setData, inputJson) {\n  const currentData = getData();\n  const newData = JSON.parse(JSON.stringify(currentData));\n  if (!isObject(newData.temporary)) {\n    newData.temporary = {};\n  }\n  newData.temporary = deepMerge(newData.temporary, inputJson);\n  setData(newData);\n  return `Success: Temporary data deep merged.`;\n\n}"}]},
{"id":"2793046a4d91a08ac069566ed109477f9c389e5c","instances":[{"path":"./src/inputHandlers/kv.js","lines":[9,12],"code":"export const ensureKeyValueInput = (container, textInput, dom) => {\n  let kvContainer = dom.querySelector(container, '.kv-container');\n  if (!kvContainer) {\n    kvContainer = dom.createElement('div');"},{"path":"./src/inputHandlers/number.js","lines":[36,40],"code":"export const ensureNumberInput = (container, textInput, dom) => {\n  let numberInput = dom.querySelector(container, 'input[type=\"number\"]');\n\n  if (!numberInput) {\n    numberInput = createNumberInput("}]},
{"id":"909ed16176caa90490a3c7b67e58e8841ffa5350","instances":[{"path":"./src/toys/2025-05-11/battleshipSolitaireClues.js","lines":[31,37],"code":"  return getVerticalCells(ship);\n}\n\nfunction getHorizontalCells(ship) {\n  const cells = [];\n  for (let i = 0; i < ship.length; i++) {\n    cells.push([ship.start.x + i, ship.start.y]);"},{"path":"./src/toys/2025-05-11/battleshipSolitaireClues.js","lines":[39,45],"code":"  return cells;\n}\n\nfunction getVerticalCells(ship) {\n  const cells = [];\n  for (let i = 0; i < ship.length; i++) {\n    cells.push([ship.start.x, ship.start.y + i]);"}]}]
